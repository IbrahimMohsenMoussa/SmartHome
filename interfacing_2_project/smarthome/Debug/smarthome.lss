
smarthome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000158  00800060  000036ae  00003742  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008001b8  008001b8  0000389a  2**0
                  ALLOC
  3 .stab         000039a8  00000000  00000000  0000389c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00005697  00000000  00000000  00007244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c8db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000ca7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000cc6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000f078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000103fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000115d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00011794  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00011a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000123f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__ctors_end>
       4:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
       8:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
       c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      10:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      14:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      18:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      1c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      20:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      24:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      28:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__vector_10>
      2c:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__vector_11>
      30:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      34:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      38:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      3c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      40:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      44:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      48:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      4c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      50:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>

00000054 <ioPins>:
      54:	39 00 3b 00 3a 00 00 39 00 3b 00 3a 00 01 39 00     9.;.:..9.;.:..9.
      64:	3b 00 3a 00 02 39 00 3b 00 3a 00 03 39 00 3b 00     ;.:..9.;.:..9.;.
      74:	3a 00 04 39 00 3b 00 3a 00 05 39 00 3b 00 3a 00     :..9.;.:..9.;.:.
      84:	06 39 00 3b 00 3a 00 07 36 00 38 00 37 00 00 36     .9.;.:..6.8.7..6
      94:	00 38 00 37 00 01 36 00 38 00 37 00 02 36 00 38     .8.7..6.8.7..6.8
      a4:	00 37 00 03 36 00 38 00 37 00 04 36 00 38 00 37     .7..6.8.7..6.8.7
      b4:	00 05 36 00 38 00 37 00 06 36 00 38 00 37 00 07     ..6.8.7..6.8.7..
      c4:	33 00 35 00 34 00 00 33 00 35 00 34 00 01 33 00     3.5.4..3.5.4..3.
      d4:	35 00 34 00 02 33 00 35 00 34 00 03 33 00 35 00     5.4..3.5.4..3.5.
      e4:	34 00 04 33 00 35 00 34 00 05 33 00 35 00 34 00     4..3.5.4..3.5.4.
      f4:	06 33 00 35 00 34 00 07 30 00 32 00 31 00 00 30     .3.5.4..0.2.1..0
     104:	00 32 00 31 00 01 30 00 32 00 31 00 02 30 00 32     .2.1..0.2.1..0.2
     114:	00 31 00 03 30 00 32 00 31 00 04 30 00 32 00 31     .1..0.2.1..0.2.1
     124:	00 05 30 00 32 00 31 00 06 30 00 32 00 31 00 07     ..0.2.1..0.2.1..

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf e5       	ldi	r28, 0x5F	; 95
     13a:	d8 e0       	ldi	r29, 0x08	; 8
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61

00000140 <__do_copy_data>:
     140:	11 e0       	ldi	r17, 0x01	; 1
     142:	a0 e6       	ldi	r26, 0x60	; 96
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	ee ea       	ldi	r30, 0xAE	; 174
     148:	f6 e3       	ldi	r31, 0x36	; 54
     14a:	02 c0       	rjmp	.+4      	; 0x150 <.do_copy_data_start>

0000014c <.do_copy_data_loop>:
     14c:	05 90       	lpm	r0, Z+
     14e:	0d 92       	st	X+, r0

00000150 <.do_copy_data_start>:
     150:	a8 3b       	cpi	r26, 0xB8	; 184
     152:	b1 07       	cpc	r27, r17
     154:	d9 f7       	brne	.-10     	; 0x14c <.do_copy_data_loop>

00000156 <__do_clear_bss>:
     156:	11 e0       	ldi	r17, 0x01	; 1
     158:	a8 eb       	ldi	r26, 0xB8	; 184
     15a:	b1 e0       	ldi	r27, 0x01	; 1
     15c:	01 c0       	rjmp	.+2      	; 0x160 <.do_clear_bss_start>

0000015e <.do_clear_bss_loop>:
     15e:	1d 92       	st	X+, r1

00000160 <.do_clear_bss_start>:
     160:	ad 3b       	cpi	r26, 0xBD	; 189
     162:	b1 07       	cpc	r27, r17
     164:	e1 f7       	brne	.-8      	; 0x15e <.do_clear_bss_loop>
     166:	0e 94 b2 19 	call	0x3364	; 0x3364 <main>
     16a:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <_exit>

0000016e <__bad_interrupt>:
     16e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000172 <__fixunssfsi>:
     172:	ef 92       	push	r14
     174:	ff 92       	push	r15
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	7b 01       	movw	r14, r22
     17c:	8c 01       	movw	r16, r24
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	40 e0       	ldi	r20, 0x00	; 0
     184:	5f e4       	ldi	r21, 0x4F	; 79
     186:	0e 94 65 04 	call	0x8ca	; 0x8ca <__gesf2>
     18a:	88 23       	and	r24, r24
     18c:	8c f0       	brlt	.+34     	; 0x1b0 <__fixunssfsi+0x3e>
     18e:	c8 01       	movw	r24, r16
     190:	b7 01       	movw	r22, r14
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	5f e4       	ldi	r21, 0x4F	; 79
     19a:	0e 94 31 02 	call	0x462	; 0x462 <__subsf3>
     19e:	0e 94 c5 04 	call	0x98a	; 0x98a <__fixsfsi>
     1a2:	9b 01       	movw	r18, r22
     1a4:	ac 01       	movw	r20, r24
     1a6:	20 50       	subi	r18, 0x00	; 0
     1a8:	30 40       	sbci	r19, 0x00	; 0
     1aa:	40 40       	sbci	r20, 0x00	; 0
     1ac:	50 48       	sbci	r21, 0x80	; 128
     1ae:	06 c0       	rjmp	.+12     	; 0x1bc <__fixunssfsi+0x4a>
     1b0:	c8 01       	movw	r24, r16
     1b2:	b7 01       	movw	r22, r14
     1b4:	0e 94 c5 04 	call	0x98a	; 0x98a <__fixsfsi>
     1b8:	9b 01       	movw	r18, r22
     1ba:	ac 01       	movw	r20, r24
     1bc:	b9 01       	movw	r22, r18
     1be:	ca 01       	movw	r24, r20
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	08 95       	ret

000001ca <_fpadd_parts>:
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	eb ee       	ldi	r30, 0xEB	; 235
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__prologue_saves__>
     1d6:	dc 01       	movw	r26, r24
     1d8:	2b 01       	movw	r4, r22
     1da:	fa 01       	movw	r30, r20
     1dc:	9c 91       	ld	r25, X
     1de:	92 30       	cpi	r25, 0x02	; 2
     1e0:	08 f4       	brcc	.+2      	; 0x1e4 <_fpadd_parts+0x1a>
     1e2:	39 c1       	rjmp	.+626    	; 0x456 <_fpadd_parts+0x28c>
     1e4:	eb 01       	movw	r28, r22
     1e6:	88 81       	ld	r24, Y
     1e8:	82 30       	cpi	r24, 0x02	; 2
     1ea:	08 f4       	brcc	.+2      	; 0x1ee <_fpadd_parts+0x24>
     1ec:	33 c1       	rjmp	.+614    	; 0x454 <_fpadd_parts+0x28a>
     1ee:	94 30       	cpi	r25, 0x04	; 4
     1f0:	69 f4       	brne	.+26     	; 0x20c <_fpadd_parts+0x42>
     1f2:	84 30       	cpi	r24, 0x04	; 4
     1f4:	09 f0       	breq	.+2      	; 0x1f8 <_fpadd_parts+0x2e>
     1f6:	2f c1       	rjmp	.+606    	; 0x456 <_fpadd_parts+0x28c>
     1f8:	11 96       	adiw	r26, 0x01	; 1
     1fa:	9c 91       	ld	r25, X
     1fc:	11 97       	sbiw	r26, 0x01	; 1
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	98 17       	cp	r25, r24
     202:	09 f4       	brne	.+2      	; 0x206 <_fpadd_parts+0x3c>
     204:	28 c1       	rjmp	.+592    	; 0x456 <_fpadd_parts+0x28c>
     206:	a6 ea       	ldi	r26, 0xA6	; 166
     208:	b0 e0       	ldi	r27, 0x00	; 0
     20a:	25 c1       	rjmp	.+586    	; 0x456 <_fpadd_parts+0x28c>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f4       	brne	.+2      	; 0x212 <_fpadd_parts+0x48>
     210:	21 c1       	rjmp	.+578    	; 0x454 <_fpadd_parts+0x28a>
     212:	82 30       	cpi	r24, 0x02	; 2
     214:	a9 f4       	brne	.+42     	; 0x240 <_fpadd_parts+0x76>
     216:	92 30       	cpi	r25, 0x02	; 2
     218:	09 f0       	breq	.+2      	; 0x21c <_fpadd_parts+0x52>
     21a:	1d c1       	rjmp	.+570    	; 0x456 <_fpadd_parts+0x28c>
     21c:	9a 01       	movw	r18, r20
     21e:	ad 01       	movw	r20, r26
     220:	88 e0       	ldi	r24, 0x08	; 8
     222:	ea 01       	movw	r28, r20
     224:	09 90       	ld	r0, Y+
     226:	ae 01       	movw	r20, r28
     228:	e9 01       	movw	r28, r18
     22a:	09 92       	st	Y+, r0
     22c:	9e 01       	movw	r18, r28
     22e:	81 50       	subi	r24, 0x01	; 1
     230:	c1 f7       	brne	.-16     	; 0x222 <_fpadd_parts+0x58>
     232:	e2 01       	movw	r28, r4
     234:	89 81       	ldd	r24, Y+1	; 0x01
     236:	11 96       	adiw	r26, 0x01	; 1
     238:	9c 91       	ld	r25, X
     23a:	89 23       	and	r24, r25
     23c:	81 83       	std	Z+1, r24	; 0x01
     23e:	08 c1       	rjmp	.+528    	; 0x450 <_fpadd_parts+0x286>
     240:	92 30       	cpi	r25, 0x02	; 2
     242:	09 f4       	brne	.+2      	; 0x246 <_fpadd_parts+0x7c>
     244:	07 c1       	rjmp	.+526    	; 0x454 <_fpadd_parts+0x28a>
     246:	12 96       	adiw	r26, 0x02	; 2
     248:	2d 90       	ld	r2, X+
     24a:	3c 90       	ld	r3, X
     24c:	13 97       	sbiw	r26, 0x03	; 3
     24e:	eb 01       	movw	r28, r22
     250:	8a 81       	ldd	r24, Y+2	; 0x02
     252:	9b 81       	ldd	r25, Y+3	; 0x03
     254:	14 96       	adiw	r26, 0x04	; 4
     256:	ad 90       	ld	r10, X+
     258:	bd 90       	ld	r11, X+
     25a:	cd 90       	ld	r12, X+
     25c:	dc 90       	ld	r13, X
     25e:	17 97       	sbiw	r26, 0x07	; 7
     260:	ec 80       	ldd	r14, Y+4	; 0x04
     262:	fd 80       	ldd	r15, Y+5	; 0x05
     264:	0e 81       	ldd	r16, Y+6	; 0x06
     266:	1f 81       	ldd	r17, Y+7	; 0x07
     268:	91 01       	movw	r18, r2
     26a:	28 1b       	sub	r18, r24
     26c:	39 0b       	sbc	r19, r25
     26e:	b9 01       	movw	r22, r18
     270:	37 ff       	sbrs	r19, 7
     272:	04 c0       	rjmp	.+8      	; 0x27c <_fpadd_parts+0xb2>
     274:	66 27       	eor	r22, r22
     276:	77 27       	eor	r23, r23
     278:	62 1b       	sub	r22, r18
     27a:	73 0b       	sbc	r23, r19
     27c:	60 32       	cpi	r22, 0x20	; 32
     27e:	71 05       	cpc	r23, r1
     280:	0c f0       	brlt	.+2      	; 0x284 <_fpadd_parts+0xba>
     282:	61 c0       	rjmp	.+194    	; 0x346 <_fpadd_parts+0x17c>
     284:	12 16       	cp	r1, r18
     286:	13 06       	cpc	r1, r19
     288:	6c f5       	brge	.+90     	; 0x2e4 <_fpadd_parts+0x11a>
     28a:	37 01       	movw	r6, r14
     28c:	48 01       	movw	r8, r16
     28e:	06 2e       	mov	r0, r22
     290:	04 c0       	rjmp	.+8      	; 0x29a <_fpadd_parts+0xd0>
     292:	96 94       	lsr	r9
     294:	87 94       	ror	r8
     296:	77 94       	ror	r7
     298:	67 94       	ror	r6
     29a:	0a 94       	dec	r0
     29c:	d2 f7       	brpl	.-12     	; 0x292 <_fpadd_parts+0xc8>
     29e:	21 e0       	ldi	r18, 0x01	; 1
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <_fpadd_parts+0xe6>
     2a8:	22 0f       	add	r18, r18
     2aa:	33 1f       	adc	r19, r19
     2ac:	44 1f       	adc	r20, r20
     2ae:	55 1f       	adc	r21, r21
     2b0:	6a 95       	dec	r22
     2b2:	d2 f7       	brpl	.-12     	; 0x2a8 <_fpadd_parts+0xde>
     2b4:	21 50       	subi	r18, 0x01	; 1
     2b6:	30 40       	sbci	r19, 0x00	; 0
     2b8:	40 40       	sbci	r20, 0x00	; 0
     2ba:	50 40       	sbci	r21, 0x00	; 0
     2bc:	2e 21       	and	r18, r14
     2be:	3f 21       	and	r19, r15
     2c0:	40 23       	and	r20, r16
     2c2:	51 23       	and	r21, r17
     2c4:	21 15       	cp	r18, r1
     2c6:	31 05       	cpc	r19, r1
     2c8:	41 05       	cpc	r20, r1
     2ca:	51 05       	cpc	r21, r1
     2cc:	21 f0       	breq	.+8      	; 0x2d6 <_fpadd_parts+0x10c>
     2ce:	21 e0       	ldi	r18, 0x01	; 1
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	79 01       	movw	r14, r18
     2d8:	8a 01       	movw	r16, r20
     2da:	e6 28       	or	r14, r6
     2dc:	f7 28       	or	r15, r7
     2de:	08 29       	or	r16, r8
     2e0:	19 29       	or	r17, r9
     2e2:	3c c0       	rjmp	.+120    	; 0x35c <_fpadd_parts+0x192>
     2e4:	23 2b       	or	r18, r19
     2e6:	d1 f1       	breq	.+116    	; 0x35c <_fpadd_parts+0x192>
     2e8:	26 0e       	add	r2, r22
     2ea:	37 1e       	adc	r3, r23
     2ec:	35 01       	movw	r6, r10
     2ee:	46 01       	movw	r8, r12
     2f0:	06 2e       	mov	r0, r22
     2f2:	04 c0       	rjmp	.+8      	; 0x2fc <_fpadd_parts+0x132>
     2f4:	96 94       	lsr	r9
     2f6:	87 94       	ror	r8
     2f8:	77 94       	ror	r7
     2fa:	67 94       	ror	r6
     2fc:	0a 94       	dec	r0
     2fe:	d2 f7       	brpl	.-12     	; 0x2f4 <_fpadd_parts+0x12a>
     300:	21 e0       	ldi	r18, 0x01	; 1
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	50 e0       	ldi	r21, 0x00	; 0
     308:	04 c0       	rjmp	.+8      	; 0x312 <_fpadd_parts+0x148>
     30a:	22 0f       	add	r18, r18
     30c:	33 1f       	adc	r19, r19
     30e:	44 1f       	adc	r20, r20
     310:	55 1f       	adc	r21, r21
     312:	6a 95       	dec	r22
     314:	d2 f7       	brpl	.-12     	; 0x30a <_fpadd_parts+0x140>
     316:	21 50       	subi	r18, 0x01	; 1
     318:	30 40       	sbci	r19, 0x00	; 0
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	50 40       	sbci	r21, 0x00	; 0
     31e:	2a 21       	and	r18, r10
     320:	3b 21       	and	r19, r11
     322:	4c 21       	and	r20, r12
     324:	5d 21       	and	r21, r13
     326:	21 15       	cp	r18, r1
     328:	31 05       	cpc	r19, r1
     32a:	41 05       	cpc	r20, r1
     32c:	51 05       	cpc	r21, r1
     32e:	21 f0       	breq	.+8      	; 0x338 <_fpadd_parts+0x16e>
     330:	21 e0       	ldi	r18, 0x01	; 1
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	40 e0       	ldi	r20, 0x00	; 0
     336:	50 e0       	ldi	r21, 0x00	; 0
     338:	59 01       	movw	r10, r18
     33a:	6a 01       	movw	r12, r20
     33c:	a6 28       	or	r10, r6
     33e:	b7 28       	or	r11, r7
     340:	c8 28       	or	r12, r8
     342:	d9 28       	or	r13, r9
     344:	0b c0       	rjmp	.+22     	; 0x35c <_fpadd_parts+0x192>
     346:	82 15       	cp	r24, r2
     348:	93 05       	cpc	r25, r3
     34a:	2c f0       	brlt	.+10     	; 0x356 <_fpadd_parts+0x18c>
     34c:	1c 01       	movw	r2, r24
     34e:	aa 24       	eor	r10, r10
     350:	bb 24       	eor	r11, r11
     352:	65 01       	movw	r12, r10
     354:	03 c0       	rjmp	.+6      	; 0x35c <_fpadd_parts+0x192>
     356:	ee 24       	eor	r14, r14
     358:	ff 24       	eor	r15, r15
     35a:	87 01       	movw	r16, r14
     35c:	11 96       	adiw	r26, 0x01	; 1
     35e:	9c 91       	ld	r25, X
     360:	d2 01       	movw	r26, r4
     362:	11 96       	adiw	r26, 0x01	; 1
     364:	8c 91       	ld	r24, X
     366:	98 17       	cp	r25, r24
     368:	09 f4       	brne	.+2      	; 0x36c <_fpadd_parts+0x1a2>
     36a:	45 c0       	rjmp	.+138    	; 0x3f6 <_fpadd_parts+0x22c>
     36c:	99 23       	and	r25, r25
     36e:	39 f0       	breq	.+14     	; 0x37e <_fpadd_parts+0x1b4>
     370:	a8 01       	movw	r20, r16
     372:	97 01       	movw	r18, r14
     374:	2a 19       	sub	r18, r10
     376:	3b 09       	sbc	r19, r11
     378:	4c 09       	sbc	r20, r12
     37a:	5d 09       	sbc	r21, r13
     37c:	06 c0       	rjmp	.+12     	; 0x38a <_fpadd_parts+0x1c0>
     37e:	a6 01       	movw	r20, r12
     380:	95 01       	movw	r18, r10
     382:	2e 19       	sub	r18, r14
     384:	3f 09       	sbc	r19, r15
     386:	40 0b       	sbc	r20, r16
     388:	51 0b       	sbc	r21, r17
     38a:	57 fd       	sbrc	r21, 7
     38c:	08 c0       	rjmp	.+16     	; 0x39e <_fpadd_parts+0x1d4>
     38e:	11 82       	std	Z+1, r1	; 0x01
     390:	33 82       	std	Z+3, r3	; 0x03
     392:	22 82       	std	Z+2, r2	; 0x02
     394:	24 83       	std	Z+4, r18	; 0x04
     396:	35 83       	std	Z+5, r19	; 0x05
     398:	46 83       	std	Z+6, r20	; 0x06
     39a:	57 83       	std	Z+7, r21	; 0x07
     39c:	1d c0       	rjmp	.+58     	; 0x3d8 <_fpadd_parts+0x20e>
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	81 83       	std	Z+1, r24	; 0x01
     3a2:	33 82       	std	Z+3, r3	; 0x03
     3a4:	22 82       	std	Z+2, r2	; 0x02
     3a6:	88 27       	eor	r24, r24
     3a8:	99 27       	eor	r25, r25
     3aa:	dc 01       	movw	r26, r24
     3ac:	82 1b       	sub	r24, r18
     3ae:	93 0b       	sbc	r25, r19
     3b0:	a4 0b       	sbc	r26, r20
     3b2:	b5 0b       	sbc	r27, r21
     3b4:	84 83       	std	Z+4, r24	; 0x04
     3b6:	95 83       	std	Z+5, r25	; 0x05
     3b8:	a6 83       	std	Z+6, r26	; 0x06
     3ba:	b7 83       	std	Z+7, r27	; 0x07
     3bc:	0d c0       	rjmp	.+26     	; 0x3d8 <_fpadd_parts+0x20e>
     3be:	22 0f       	add	r18, r18
     3c0:	33 1f       	adc	r19, r19
     3c2:	44 1f       	adc	r20, r20
     3c4:	55 1f       	adc	r21, r21
     3c6:	24 83       	std	Z+4, r18	; 0x04
     3c8:	35 83       	std	Z+5, r19	; 0x05
     3ca:	46 83       	std	Z+6, r20	; 0x06
     3cc:	57 83       	std	Z+7, r21	; 0x07
     3ce:	82 81       	ldd	r24, Z+2	; 0x02
     3d0:	93 81       	ldd	r25, Z+3	; 0x03
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	93 83       	std	Z+3, r25	; 0x03
     3d6:	82 83       	std	Z+2, r24	; 0x02
     3d8:	24 81       	ldd	r18, Z+4	; 0x04
     3da:	35 81       	ldd	r19, Z+5	; 0x05
     3dc:	46 81       	ldd	r20, Z+6	; 0x06
     3de:	57 81       	ldd	r21, Z+7	; 0x07
     3e0:	da 01       	movw	r26, r20
     3e2:	c9 01       	movw	r24, r18
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	a1 09       	sbc	r26, r1
     3e8:	b1 09       	sbc	r27, r1
     3ea:	8f 5f       	subi	r24, 0xFF	; 255
     3ec:	9f 4f       	sbci	r25, 0xFF	; 255
     3ee:	af 4f       	sbci	r26, 0xFF	; 255
     3f0:	bf 43       	sbci	r27, 0x3F	; 63
     3f2:	28 f3       	brcs	.-54     	; 0x3be <_fpadd_parts+0x1f4>
     3f4:	0b c0       	rjmp	.+22     	; 0x40c <_fpadd_parts+0x242>
     3f6:	91 83       	std	Z+1, r25	; 0x01
     3f8:	33 82       	std	Z+3, r3	; 0x03
     3fa:	22 82       	std	Z+2, r2	; 0x02
     3fc:	ea 0c       	add	r14, r10
     3fe:	fb 1c       	adc	r15, r11
     400:	0c 1d       	adc	r16, r12
     402:	1d 1d       	adc	r17, r13
     404:	e4 82       	std	Z+4, r14	; 0x04
     406:	f5 82       	std	Z+5, r15	; 0x05
     408:	06 83       	std	Z+6, r16	; 0x06
     40a:	17 83       	std	Z+7, r17	; 0x07
     40c:	83 e0       	ldi	r24, 0x03	; 3
     40e:	80 83       	st	Z, r24
     410:	24 81       	ldd	r18, Z+4	; 0x04
     412:	35 81       	ldd	r19, Z+5	; 0x05
     414:	46 81       	ldd	r20, Z+6	; 0x06
     416:	57 81       	ldd	r21, Z+7	; 0x07
     418:	57 ff       	sbrs	r21, 7
     41a:	1a c0       	rjmp	.+52     	; 0x450 <_fpadd_parts+0x286>
     41c:	c9 01       	movw	r24, r18
     41e:	aa 27       	eor	r26, r26
     420:	97 fd       	sbrc	r25, 7
     422:	a0 95       	com	r26
     424:	ba 2f       	mov	r27, r26
     426:	81 70       	andi	r24, 0x01	; 1
     428:	90 70       	andi	r25, 0x00	; 0
     42a:	a0 70       	andi	r26, 0x00	; 0
     42c:	b0 70       	andi	r27, 0x00	; 0
     42e:	56 95       	lsr	r21
     430:	47 95       	ror	r20
     432:	37 95       	ror	r19
     434:	27 95       	ror	r18
     436:	82 2b       	or	r24, r18
     438:	93 2b       	or	r25, r19
     43a:	a4 2b       	or	r26, r20
     43c:	b5 2b       	or	r27, r21
     43e:	84 83       	std	Z+4, r24	; 0x04
     440:	95 83       	std	Z+5, r25	; 0x05
     442:	a6 83       	std	Z+6, r26	; 0x06
     444:	b7 83       	std	Z+7, r27	; 0x07
     446:	82 81       	ldd	r24, Z+2	; 0x02
     448:	93 81       	ldd	r25, Z+3	; 0x03
     44a:	01 96       	adiw	r24, 0x01	; 1
     44c:	93 83       	std	Z+3, r25	; 0x03
     44e:	82 83       	std	Z+2, r24	; 0x02
     450:	df 01       	movw	r26, r30
     452:	01 c0       	rjmp	.+2      	; 0x456 <_fpadd_parts+0x28c>
     454:	d2 01       	movw	r26, r4
     456:	cd 01       	movw	r24, r26
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
     45c:	e2 e1       	ldi	r30, 0x12	; 18
     45e:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <__epilogue_restores__>

00000462 <__subsf3>:
     462:	a0 e2       	ldi	r26, 0x20	; 32
     464:	b0 e0       	ldi	r27, 0x00	; 0
     466:	e7 e3       	ldi	r30, 0x37	; 55
     468:	f2 e0       	ldi	r31, 0x02	; 2
     46a:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__prologue_saves__+0x18>
     46e:	69 83       	std	Y+1, r22	; 0x01
     470:	7a 83       	std	Y+2, r23	; 0x02
     472:	8b 83       	std	Y+3, r24	; 0x03
     474:	9c 83       	std	Y+4, r25	; 0x04
     476:	2d 83       	std	Y+5, r18	; 0x05
     478:	3e 83       	std	Y+6, r19	; 0x06
     47a:	4f 83       	std	Y+7, r20	; 0x07
     47c:	58 87       	std	Y+8, r21	; 0x08
     47e:	e9 e0       	ldi	r30, 0x09	; 9
     480:	ee 2e       	mov	r14, r30
     482:	f1 2c       	mov	r15, r1
     484:	ec 0e       	add	r14, r28
     486:	fd 1e       	adc	r15, r29
     488:	ce 01       	movw	r24, r28
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	b7 01       	movw	r22, r14
     48e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__unpack_f>
     492:	8e 01       	movw	r16, r28
     494:	0f 5e       	subi	r16, 0xEF	; 239
     496:	1f 4f       	sbci	r17, 0xFF	; 255
     498:	ce 01       	movw	r24, r28
     49a:	05 96       	adiw	r24, 0x05	; 5
     49c:	b8 01       	movw	r22, r16
     49e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__unpack_f>
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	89 27       	eor	r24, r25
     4a8:	8a 8b       	std	Y+18, r24	; 0x12
     4aa:	c7 01       	movw	r24, r14
     4ac:	b8 01       	movw	r22, r16
     4ae:	ae 01       	movw	r20, r28
     4b0:	47 5e       	subi	r20, 0xE7	; 231
     4b2:	5f 4f       	sbci	r21, 0xFF	; 255
     4b4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_fpadd_parts>
     4b8:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__pack_f>
     4bc:	a0 96       	adiw	r28, 0x20	; 32
     4be:	e6 e0       	ldi	r30, 0x06	; 6
     4c0:	0c 94 15 1b 	jmp	0x362a	; 0x362a <__epilogue_restores__+0x18>

000004c4 <__addsf3>:
     4c4:	a0 e2       	ldi	r26, 0x20	; 32
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	e8 e6       	ldi	r30, 0x68	; 104
     4ca:	f2 e0       	ldi	r31, 0x02	; 2
     4cc:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__prologue_saves__+0x18>
     4d0:	69 83       	std	Y+1, r22	; 0x01
     4d2:	7a 83       	std	Y+2, r23	; 0x02
     4d4:	8b 83       	std	Y+3, r24	; 0x03
     4d6:	9c 83       	std	Y+4, r25	; 0x04
     4d8:	2d 83       	std	Y+5, r18	; 0x05
     4da:	3e 83       	std	Y+6, r19	; 0x06
     4dc:	4f 83       	std	Y+7, r20	; 0x07
     4de:	58 87       	std	Y+8, r21	; 0x08
     4e0:	f9 e0       	ldi	r31, 0x09	; 9
     4e2:	ef 2e       	mov	r14, r31
     4e4:	f1 2c       	mov	r15, r1
     4e6:	ec 0e       	add	r14, r28
     4e8:	fd 1e       	adc	r15, r29
     4ea:	ce 01       	movw	r24, r28
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	b7 01       	movw	r22, r14
     4f0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__unpack_f>
     4f4:	8e 01       	movw	r16, r28
     4f6:	0f 5e       	subi	r16, 0xEF	; 239
     4f8:	1f 4f       	sbci	r17, 0xFF	; 255
     4fa:	ce 01       	movw	r24, r28
     4fc:	05 96       	adiw	r24, 0x05	; 5
     4fe:	b8 01       	movw	r22, r16
     500:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__unpack_f>
     504:	c7 01       	movw	r24, r14
     506:	b8 01       	movw	r22, r16
     508:	ae 01       	movw	r20, r28
     50a:	47 5e       	subi	r20, 0xE7	; 231
     50c:	5f 4f       	sbci	r21, 0xFF	; 255
     50e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_fpadd_parts>
     512:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__pack_f>
     516:	a0 96       	adiw	r28, 0x20	; 32
     518:	e6 e0       	ldi	r30, 0x06	; 6
     51a:	0c 94 15 1b 	jmp	0x362a	; 0x362a <__epilogue_restores__+0x18>

0000051e <__mulsf3>:
     51e:	a0 e2       	ldi	r26, 0x20	; 32
     520:	b0 e0       	ldi	r27, 0x00	; 0
     522:	e5 e9       	ldi	r30, 0x95	; 149
     524:	f2 e0       	ldi	r31, 0x02	; 2
     526:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__prologue_saves__>
     52a:	69 83       	std	Y+1, r22	; 0x01
     52c:	7a 83       	std	Y+2, r23	; 0x02
     52e:	8b 83       	std	Y+3, r24	; 0x03
     530:	9c 83       	std	Y+4, r25	; 0x04
     532:	2d 83       	std	Y+5, r18	; 0x05
     534:	3e 83       	std	Y+6, r19	; 0x06
     536:	4f 83       	std	Y+7, r20	; 0x07
     538:	58 87       	std	Y+8, r21	; 0x08
     53a:	ce 01       	movw	r24, r28
     53c:	01 96       	adiw	r24, 0x01	; 1
     53e:	be 01       	movw	r22, r28
     540:	67 5f       	subi	r22, 0xF7	; 247
     542:	7f 4f       	sbci	r23, 0xFF	; 255
     544:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__unpack_f>
     548:	ce 01       	movw	r24, r28
     54a:	05 96       	adiw	r24, 0x05	; 5
     54c:	be 01       	movw	r22, r28
     54e:	6f 5e       	subi	r22, 0xEF	; 239
     550:	7f 4f       	sbci	r23, 0xFF	; 255
     552:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__unpack_f>
     556:	99 85       	ldd	r25, Y+9	; 0x09
     558:	92 30       	cpi	r25, 0x02	; 2
     55a:	88 f0       	brcs	.+34     	; 0x57e <__mulsf3+0x60>
     55c:	89 89       	ldd	r24, Y+17	; 0x11
     55e:	82 30       	cpi	r24, 0x02	; 2
     560:	c8 f0       	brcs	.+50     	; 0x594 <__mulsf3+0x76>
     562:	94 30       	cpi	r25, 0x04	; 4
     564:	19 f4       	brne	.+6      	; 0x56c <__mulsf3+0x4e>
     566:	82 30       	cpi	r24, 0x02	; 2
     568:	51 f4       	brne	.+20     	; 0x57e <__mulsf3+0x60>
     56a:	04 c0       	rjmp	.+8      	; 0x574 <__mulsf3+0x56>
     56c:	84 30       	cpi	r24, 0x04	; 4
     56e:	29 f4       	brne	.+10     	; 0x57a <__mulsf3+0x5c>
     570:	92 30       	cpi	r25, 0x02	; 2
     572:	81 f4       	brne	.+32     	; 0x594 <__mulsf3+0x76>
     574:	86 ea       	ldi	r24, 0xA6	; 166
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	c6 c0       	rjmp	.+396    	; 0x706 <__mulsf3+0x1e8>
     57a:	92 30       	cpi	r25, 0x02	; 2
     57c:	49 f4       	brne	.+18     	; 0x590 <__mulsf3+0x72>
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	9a 85       	ldd	r25, Y+10	; 0x0a
     582:	8a 89       	ldd	r24, Y+18	; 0x12
     584:	98 13       	cpse	r25, r24
     586:	21 e0       	ldi	r18, 0x01	; 1
     588:	2a 87       	std	Y+10, r18	; 0x0a
     58a:	ce 01       	movw	r24, r28
     58c:	09 96       	adiw	r24, 0x09	; 9
     58e:	bb c0       	rjmp	.+374    	; 0x706 <__mulsf3+0x1e8>
     590:	82 30       	cpi	r24, 0x02	; 2
     592:	49 f4       	brne	.+18     	; 0x5a6 <__mulsf3+0x88>
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	9a 85       	ldd	r25, Y+10	; 0x0a
     598:	8a 89       	ldd	r24, Y+18	; 0x12
     59a:	98 13       	cpse	r25, r24
     59c:	21 e0       	ldi	r18, 0x01	; 1
     59e:	2a 8b       	std	Y+18, r18	; 0x12
     5a0:	ce 01       	movw	r24, r28
     5a2:	41 96       	adiw	r24, 0x11	; 17
     5a4:	b0 c0       	rjmp	.+352    	; 0x706 <__mulsf3+0x1e8>
     5a6:	2d 84       	ldd	r2, Y+13	; 0x0d
     5a8:	3e 84       	ldd	r3, Y+14	; 0x0e
     5aa:	4f 84       	ldd	r4, Y+15	; 0x0f
     5ac:	58 88       	ldd	r5, Y+16	; 0x10
     5ae:	6d 88       	ldd	r6, Y+21	; 0x15
     5b0:	7e 88       	ldd	r7, Y+22	; 0x16
     5b2:	8f 88       	ldd	r8, Y+23	; 0x17
     5b4:	98 8c       	ldd	r9, Y+24	; 0x18
     5b6:	ee 24       	eor	r14, r14
     5b8:	ff 24       	eor	r15, r15
     5ba:	87 01       	movw	r16, r14
     5bc:	aa 24       	eor	r10, r10
     5be:	bb 24       	eor	r11, r11
     5c0:	65 01       	movw	r12, r10
     5c2:	40 e0       	ldi	r20, 0x00	; 0
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	e0 e0       	ldi	r30, 0x00	; 0
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	c1 01       	movw	r24, r2
     5d0:	81 70       	andi	r24, 0x01	; 1
     5d2:	90 70       	andi	r25, 0x00	; 0
     5d4:	89 2b       	or	r24, r25
     5d6:	e9 f0       	breq	.+58     	; 0x612 <__mulsf3+0xf4>
     5d8:	e6 0c       	add	r14, r6
     5da:	f7 1c       	adc	r15, r7
     5dc:	08 1d       	adc	r16, r8
     5de:	19 1d       	adc	r17, r9
     5e0:	9a 01       	movw	r18, r20
     5e2:	ab 01       	movw	r20, r22
     5e4:	2a 0d       	add	r18, r10
     5e6:	3b 1d       	adc	r19, r11
     5e8:	4c 1d       	adc	r20, r12
     5ea:	5d 1d       	adc	r21, r13
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	a0 e0       	ldi	r26, 0x00	; 0
     5f2:	b0 e0       	ldi	r27, 0x00	; 0
     5f4:	e6 14       	cp	r14, r6
     5f6:	f7 04       	cpc	r15, r7
     5f8:	08 05       	cpc	r16, r8
     5fa:	19 05       	cpc	r17, r9
     5fc:	20 f4       	brcc	.+8      	; 0x606 <__mulsf3+0xe8>
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	a0 e0       	ldi	r26, 0x00	; 0
     604:	b0 e0       	ldi	r27, 0x00	; 0
     606:	ba 01       	movw	r22, r20
     608:	a9 01       	movw	r20, r18
     60a:	48 0f       	add	r20, r24
     60c:	59 1f       	adc	r21, r25
     60e:	6a 1f       	adc	r22, r26
     610:	7b 1f       	adc	r23, r27
     612:	aa 0c       	add	r10, r10
     614:	bb 1c       	adc	r11, r11
     616:	cc 1c       	adc	r12, r12
     618:	dd 1c       	adc	r13, r13
     61a:	97 fe       	sbrs	r9, 7
     61c:	08 c0       	rjmp	.+16     	; 0x62e <__mulsf3+0x110>
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	a0 e0       	ldi	r26, 0x00	; 0
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	a8 2a       	or	r10, r24
     628:	b9 2a       	or	r11, r25
     62a:	ca 2a       	or	r12, r26
     62c:	db 2a       	or	r13, r27
     62e:	31 96       	adiw	r30, 0x01	; 1
     630:	e0 32       	cpi	r30, 0x20	; 32
     632:	f1 05       	cpc	r31, r1
     634:	49 f0       	breq	.+18     	; 0x648 <__mulsf3+0x12a>
     636:	66 0c       	add	r6, r6
     638:	77 1c       	adc	r7, r7
     63a:	88 1c       	adc	r8, r8
     63c:	99 1c       	adc	r9, r9
     63e:	56 94       	lsr	r5
     640:	47 94       	ror	r4
     642:	37 94       	ror	r3
     644:	27 94       	ror	r2
     646:	c3 cf       	rjmp	.-122    	; 0x5ce <__mulsf3+0xb0>
     648:	fa 85       	ldd	r31, Y+10	; 0x0a
     64a:	ea 89       	ldd	r30, Y+18	; 0x12
     64c:	2b 89       	ldd	r18, Y+19	; 0x13
     64e:	3c 89       	ldd	r19, Y+20	; 0x14
     650:	8b 85       	ldd	r24, Y+11	; 0x0b
     652:	9c 85       	ldd	r25, Y+12	; 0x0c
     654:	28 0f       	add	r18, r24
     656:	39 1f       	adc	r19, r25
     658:	2e 5f       	subi	r18, 0xFE	; 254
     65a:	3f 4f       	sbci	r19, 0xFF	; 255
     65c:	17 c0       	rjmp	.+46     	; 0x68c <__mulsf3+0x16e>
     65e:	ca 01       	movw	r24, r20
     660:	81 70       	andi	r24, 0x01	; 1
     662:	90 70       	andi	r25, 0x00	; 0
     664:	89 2b       	or	r24, r25
     666:	61 f0       	breq	.+24     	; 0x680 <__mulsf3+0x162>
     668:	16 95       	lsr	r17
     66a:	07 95       	ror	r16
     66c:	f7 94       	ror	r15
     66e:	e7 94       	ror	r14
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	a0 e0       	ldi	r26, 0x00	; 0
     676:	b0 e8       	ldi	r27, 0x80	; 128
     678:	e8 2a       	or	r14, r24
     67a:	f9 2a       	or	r15, r25
     67c:	0a 2b       	or	r16, r26
     67e:	1b 2b       	or	r17, r27
     680:	76 95       	lsr	r23
     682:	67 95       	ror	r22
     684:	57 95       	ror	r21
     686:	47 95       	ror	r20
     688:	2f 5f       	subi	r18, 0xFF	; 255
     68a:	3f 4f       	sbci	r19, 0xFF	; 255
     68c:	77 fd       	sbrc	r23, 7
     68e:	e7 cf       	rjmp	.-50     	; 0x65e <__mulsf3+0x140>
     690:	0c c0       	rjmp	.+24     	; 0x6aa <__mulsf3+0x18c>
     692:	44 0f       	add	r20, r20
     694:	55 1f       	adc	r21, r21
     696:	66 1f       	adc	r22, r22
     698:	77 1f       	adc	r23, r23
     69a:	17 fd       	sbrc	r17, 7
     69c:	41 60       	ori	r20, 0x01	; 1
     69e:	ee 0c       	add	r14, r14
     6a0:	ff 1c       	adc	r15, r15
     6a2:	00 1f       	adc	r16, r16
     6a4:	11 1f       	adc	r17, r17
     6a6:	21 50       	subi	r18, 0x01	; 1
     6a8:	30 40       	sbci	r19, 0x00	; 0
     6aa:	40 30       	cpi	r20, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	59 07       	cpc	r21, r25
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	69 07       	cpc	r22, r25
     6b4:	90 e4       	ldi	r25, 0x40	; 64
     6b6:	79 07       	cpc	r23, r25
     6b8:	60 f3       	brcs	.-40     	; 0x692 <__mulsf3+0x174>
     6ba:	2b 8f       	std	Y+27, r18	; 0x1b
     6bc:	3c 8f       	std	Y+28, r19	; 0x1c
     6be:	db 01       	movw	r26, r22
     6c0:	ca 01       	movw	r24, r20
     6c2:	8f 77       	andi	r24, 0x7F	; 127
     6c4:	90 70       	andi	r25, 0x00	; 0
     6c6:	a0 70       	andi	r26, 0x00	; 0
     6c8:	b0 70       	andi	r27, 0x00	; 0
     6ca:	80 34       	cpi	r24, 0x40	; 64
     6cc:	91 05       	cpc	r25, r1
     6ce:	a1 05       	cpc	r26, r1
     6d0:	b1 05       	cpc	r27, r1
     6d2:	61 f4       	brne	.+24     	; 0x6ec <__mulsf3+0x1ce>
     6d4:	47 fd       	sbrc	r20, 7
     6d6:	0a c0       	rjmp	.+20     	; 0x6ec <__mulsf3+0x1ce>
     6d8:	e1 14       	cp	r14, r1
     6da:	f1 04       	cpc	r15, r1
     6dc:	01 05       	cpc	r16, r1
     6de:	11 05       	cpc	r17, r1
     6e0:	29 f0       	breq	.+10     	; 0x6ec <__mulsf3+0x1ce>
     6e2:	40 5c       	subi	r20, 0xC0	; 192
     6e4:	5f 4f       	sbci	r21, 0xFF	; 255
     6e6:	6f 4f       	sbci	r22, 0xFF	; 255
     6e8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ea:	40 78       	andi	r20, 0x80	; 128
     6ec:	1a 8e       	std	Y+26, r1	; 0x1a
     6ee:	fe 17       	cp	r31, r30
     6f0:	11 f0       	breq	.+4      	; 0x6f6 <__mulsf3+0x1d8>
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	8a 8f       	std	Y+26, r24	; 0x1a
     6f6:	4d 8f       	std	Y+29, r20	; 0x1d
     6f8:	5e 8f       	std	Y+30, r21	; 0x1e
     6fa:	6f 8f       	std	Y+31, r22	; 0x1f
     6fc:	78 a3       	std	Y+32, r23	; 0x20
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	89 8f       	std	Y+25, r24	; 0x19
     702:	ce 01       	movw	r24, r28
     704:	49 96       	adiw	r24, 0x19	; 25
     706:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__pack_f>
     70a:	a0 96       	adiw	r28, 0x20	; 32
     70c:	e2 e1       	ldi	r30, 0x12	; 18
     70e:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <__epilogue_restores__>

00000712 <__divsf3>:
     712:	a8 e1       	ldi	r26, 0x18	; 24
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	ef e8       	ldi	r30, 0x8F	; 143
     718:	f3 e0       	ldi	r31, 0x03	; 3
     71a:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <__prologue_saves__+0x10>
     71e:	69 83       	std	Y+1, r22	; 0x01
     720:	7a 83       	std	Y+2, r23	; 0x02
     722:	8b 83       	std	Y+3, r24	; 0x03
     724:	9c 83       	std	Y+4, r25	; 0x04
     726:	2d 83       	std	Y+5, r18	; 0x05
     728:	3e 83       	std	Y+6, r19	; 0x06
     72a:	4f 83       	std	Y+7, r20	; 0x07
     72c:	58 87       	std	Y+8, r21	; 0x08
     72e:	b9 e0       	ldi	r27, 0x09	; 9
     730:	eb 2e       	mov	r14, r27
     732:	f1 2c       	mov	r15, r1
     734:	ec 0e       	add	r14, r28
     736:	fd 1e       	adc	r15, r29
     738:	ce 01       	movw	r24, r28
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	b7 01       	movw	r22, r14
     73e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__unpack_f>
     742:	8e 01       	movw	r16, r28
     744:	0f 5e       	subi	r16, 0xEF	; 239
     746:	1f 4f       	sbci	r17, 0xFF	; 255
     748:	ce 01       	movw	r24, r28
     74a:	05 96       	adiw	r24, 0x05	; 5
     74c:	b8 01       	movw	r22, r16
     74e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__unpack_f>
     752:	29 85       	ldd	r18, Y+9	; 0x09
     754:	22 30       	cpi	r18, 0x02	; 2
     756:	08 f4       	brcc	.+2      	; 0x75a <__divsf3+0x48>
     758:	7e c0       	rjmp	.+252    	; 0x856 <__divsf3+0x144>
     75a:	39 89       	ldd	r19, Y+17	; 0x11
     75c:	32 30       	cpi	r19, 0x02	; 2
     75e:	10 f4       	brcc	.+4      	; 0x764 <__divsf3+0x52>
     760:	b8 01       	movw	r22, r16
     762:	7c c0       	rjmp	.+248    	; 0x85c <__divsf3+0x14a>
     764:	8a 85       	ldd	r24, Y+10	; 0x0a
     766:	9a 89       	ldd	r25, Y+18	; 0x12
     768:	89 27       	eor	r24, r25
     76a:	8a 87       	std	Y+10, r24	; 0x0a
     76c:	24 30       	cpi	r18, 0x04	; 4
     76e:	11 f0       	breq	.+4      	; 0x774 <__divsf3+0x62>
     770:	22 30       	cpi	r18, 0x02	; 2
     772:	31 f4       	brne	.+12     	; 0x780 <__divsf3+0x6e>
     774:	23 17       	cp	r18, r19
     776:	09 f0       	breq	.+2      	; 0x77a <__divsf3+0x68>
     778:	6e c0       	rjmp	.+220    	; 0x856 <__divsf3+0x144>
     77a:	66 ea       	ldi	r22, 0xA6	; 166
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	6e c0       	rjmp	.+220    	; 0x85c <__divsf3+0x14a>
     780:	34 30       	cpi	r19, 0x04	; 4
     782:	39 f4       	brne	.+14     	; 0x792 <__divsf3+0x80>
     784:	1d 86       	std	Y+13, r1	; 0x0d
     786:	1e 86       	std	Y+14, r1	; 0x0e
     788:	1f 86       	std	Y+15, r1	; 0x0f
     78a:	18 8a       	std	Y+16, r1	; 0x10
     78c:	1c 86       	std	Y+12, r1	; 0x0c
     78e:	1b 86       	std	Y+11, r1	; 0x0b
     790:	04 c0       	rjmp	.+8      	; 0x79a <__divsf3+0x88>
     792:	32 30       	cpi	r19, 0x02	; 2
     794:	21 f4       	brne	.+8      	; 0x79e <__divsf3+0x8c>
     796:	84 e0       	ldi	r24, 0x04	; 4
     798:	89 87       	std	Y+9, r24	; 0x09
     79a:	b7 01       	movw	r22, r14
     79c:	5f c0       	rjmp	.+190    	; 0x85c <__divsf3+0x14a>
     79e:	2b 85       	ldd	r18, Y+11	; 0x0b
     7a0:	3c 85       	ldd	r19, Y+12	; 0x0c
     7a2:	8b 89       	ldd	r24, Y+19	; 0x13
     7a4:	9c 89       	ldd	r25, Y+20	; 0x14
     7a6:	28 1b       	sub	r18, r24
     7a8:	39 0b       	sbc	r19, r25
     7aa:	3c 87       	std	Y+12, r19	; 0x0c
     7ac:	2b 87       	std	Y+11, r18	; 0x0b
     7ae:	ed 84       	ldd	r14, Y+13	; 0x0d
     7b0:	fe 84       	ldd	r15, Y+14	; 0x0e
     7b2:	0f 85       	ldd	r16, Y+15	; 0x0f
     7b4:	18 89       	ldd	r17, Y+16	; 0x10
     7b6:	ad 88       	ldd	r10, Y+21	; 0x15
     7b8:	be 88       	ldd	r11, Y+22	; 0x16
     7ba:	cf 88       	ldd	r12, Y+23	; 0x17
     7bc:	d8 8c       	ldd	r13, Y+24	; 0x18
     7be:	ea 14       	cp	r14, r10
     7c0:	fb 04       	cpc	r15, r11
     7c2:	0c 05       	cpc	r16, r12
     7c4:	1d 05       	cpc	r17, r13
     7c6:	40 f4       	brcc	.+16     	; 0x7d8 <__divsf3+0xc6>
     7c8:	ee 0c       	add	r14, r14
     7ca:	ff 1c       	adc	r15, r15
     7cc:	00 1f       	adc	r16, r16
     7ce:	11 1f       	adc	r17, r17
     7d0:	21 50       	subi	r18, 0x01	; 1
     7d2:	30 40       	sbci	r19, 0x00	; 0
     7d4:	3c 87       	std	Y+12, r19	; 0x0c
     7d6:	2b 87       	std	Y+11, r18	; 0x0b
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	a0 e0       	ldi	r26, 0x00	; 0
     7e6:	b0 e4       	ldi	r27, 0x40	; 64
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	ea 14       	cp	r14, r10
     7ee:	fb 04       	cpc	r15, r11
     7f0:	0c 05       	cpc	r16, r12
     7f2:	1d 05       	cpc	r17, r13
     7f4:	40 f0       	brcs	.+16     	; 0x806 <__divsf3+0xf4>
     7f6:	28 2b       	or	r18, r24
     7f8:	39 2b       	or	r19, r25
     7fa:	4a 2b       	or	r20, r26
     7fc:	5b 2b       	or	r21, r27
     7fe:	ea 18       	sub	r14, r10
     800:	fb 08       	sbc	r15, r11
     802:	0c 09       	sbc	r16, r12
     804:	1d 09       	sbc	r17, r13
     806:	b6 95       	lsr	r27
     808:	a7 95       	ror	r26
     80a:	97 95       	ror	r25
     80c:	87 95       	ror	r24
     80e:	ee 0c       	add	r14, r14
     810:	ff 1c       	adc	r15, r15
     812:	00 1f       	adc	r16, r16
     814:	11 1f       	adc	r17, r17
     816:	6f 5f       	subi	r22, 0xFF	; 255
     818:	7f 4f       	sbci	r23, 0xFF	; 255
     81a:	6f 31       	cpi	r22, 0x1F	; 31
     81c:	71 05       	cpc	r23, r1
     81e:	31 f7       	brne	.-52     	; 0x7ec <__divsf3+0xda>
     820:	da 01       	movw	r26, r20
     822:	c9 01       	movw	r24, r18
     824:	8f 77       	andi	r24, 0x7F	; 127
     826:	90 70       	andi	r25, 0x00	; 0
     828:	a0 70       	andi	r26, 0x00	; 0
     82a:	b0 70       	andi	r27, 0x00	; 0
     82c:	80 34       	cpi	r24, 0x40	; 64
     82e:	91 05       	cpc	r25, r1
     830:	a1 05       	cpc	r26, r1
     832:	b1 05       	cpc	r27, r1
     834:	61 f4       	brne	.+24     	; 0x84e <__divsf3+0x13c>
     836:	27 fd       	sbrc	r18, 7
     838:	0a c0       	rjmp	.+20     	; 0x84e <__divsf3+0x13c>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	29 f0       	breq	.+10     	; 0x84e <__divsf3+0x13c>
     844:	20 5c       	subi	r18, 0xC0	; 192
     846:	3f 4f       	sbci	r19, 0xFF	; 255
     848:	4f 4f       	sbci	r20, 0xFF	; 255
     84a:	5f 4f       	sbci	r21, 0xFF	; 255
     84c:	20 78       	andi	r18, 0x80	; 128
     84e:	2d 87       	std	Y+13, r18	; 0x0d
     850:	3e 87       	std	Y+14, r19	; 0x0e
     852:	4f 87       	std	Y+15, r20	; 0x0f
     854:	58 8b       	std	Y+16, r21	; 0x10
     856:	be 01       	movw	r22, r28
     858:	67 5f       	subi	r22, 0xF7	; 247
     85a:	7f 4f       	sbci	r23, 0xFF	; 255
     85c:	cb 01       	movw	r24, r22
     85e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__pack_f>
     862:	68 96       	adiw	r28, 0x18	; 24
     864:	ea e0       	ldi	r30, 0x0A	; 10
     866:	0c 94 11 1b 	jmp	0x3622	; 0x3622 <__epilogue_restores__+0x10>

0000086a <__gtsf2>:
     86a:	a8 e1       	ldi	r26, 0x18	; 24
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	eb e3       	ldi	r30, 0x3B	; 59
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__prologue_saves__+0x18>
     876:	69 83       	std	Y+1, r22	; 0x01
     878:	7a 83       	std	Y+2, r23	; 0x02
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	2d 83       	std	Y+5, r18	; 0x05
     880:	3e 83       	std	Y+6, r19	; 0x06
     882:	4f 83       	std	Y+7, r20	; 0x07
     884:	58 87       	std	Y+8, r21	; 0x08
     886:	89 e0       	ldi	r24, 0x09	; 9
     888:	e8 2e       	mov	r14, r24
     88a:	f1 2c       	mov	r15, r1
     88c:	ec 0e       	add	r14, r28
     88e:	fd 1e       	adc	r15, r29
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	b7 01       	movw	r22, r14
     896:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__unpack_f>
     89a:	8e 01       	movw	r16, r28
     89c:	0f 5e       	subi	r16, 0xEF	; 239
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	ce 01       	movw	r24, r28
     8a2:	05 96       	adiw	r24, 0x05	; 5
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__unpack_f>
     8aa:	89 85       	ldd	r24, Y+9	; 0x09
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	40 f0       	brcs	.+16     	; 0x8c0 <__gtsf2+0x56>
     8b0:	89 89       	ldd	r24, Y+17	; 0x11
     8b2:	82 30       	cpi	r24, 0x02	; 2
     8b4:	28 f0       	brcs	.+10     	; 0x8c0 <__gtsf2+0x56>
     8b6:	c7 01       	movw	r24, r14
     8b8:	b8 01       	movw	r22, r16
     8ba:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__fpcmp_parts_f>
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <__gtsf2+0x58>
     8c0:	8f ef       	ldi	r24, 0xFF	; 255
     8c2:	68 96       	adiw	r28, 0x18	; 24
     8c4:	e6 e0       	ldi	r30, 0x06	; 6
     8c6:	0c 94 15 1b 	jmp	0x362a	; 0x362a <__epilogue_restores__+0x18>

000008ca <__gesf2>:
     8ca:	a8 e1       	ldi	r26, 0x18	; 24
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	eb e6       	ldi	r30, 0x6B	; 107
     8d0:	f4 e0       	ldi	r31, 0x04	; 4
     8d2:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__prologue_saves__+0x18>
     8d6:	69 83       	std	Y+1, r22	; 0x01
     8d8:	7a 83       	std	Y+2, r23	; 0x02
     8da:	8b 83       	std	Y+3, r24	; 0x03
     8dc:	9c 83       	std	Y+4, r25	; 0x04
     8de:	2d 83       	std	Y+5, r18	; 0x05
     8e0:	3e 83       	std	Y+6, r19	; 0x06
     8e2:	4f 83       	std	Y+7, r20	; 0x07
     8e4:	58 87       	std	Y+8, r21	; 0x08
     8e6:	89 e0       	ldi	r24, 0x09	; 9
     8e8:	e8 2e       	mov	r14, r24
     8ea:	f1 2c       	mov	r15, r1
     8ec:	ec 0e       	add	r14, r28
     8ee:	fd 1e       	adc	r15, r29
     8f0:	ce 01       	movw	r24, r28
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	b7 01       	movw	r22, r14
     8f6:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__unpack_f>
     8fa:	8e 01       	movw	r16, r28
     8fc:	0f 5e       	subi	r16, 0xEF	; 239
     8fe:	1f 4f       	sbci	r17, 0xFF	; 255
     900:	ce 01       	movw	r24, r28
     902:	05 96       	adiw	r24, 0x05	; 5
     904:	b8 01       	movw	r22, r16
     906:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__unpack_f>
     90a:	89 85       	ldd	r24, Y+9	; 0x09
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	40 f0       	brcs	.+16     	; 0x920 <__gesf2+0x56>
     910:	89 89       	ldd	r24, Y+17	; 0x11
     912:	82 30       	cpi	r24, 0x02	; 2
     914:	28 f0       	brcs	.+10     	; 0x920 <__gesf2+0x56>
     916:	c7 01       	movw	r24, r14
     918:	b8 01       	movw	r22, r16
     91a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__fpcmp_parts_f>
     91e:	01 c0       	rjmp	.+2      	; 0x922 <__gesf2+0x58>
     920:	8f ef       	ldi	r24, 0xFF	; 255
     922:	68 96       	adiw	r28, 0x18	; 24
     924:	e6 e0       	ldi	r30, 0x06	; 6
     926:	0c 94 15 1b 	jmp	0x362a	; 0x362a <__epilogue_restores__+0x18>

0000092a <__ltsf2>:
     92a:	a8 e1       	ldi	r26, 0x18	; 24
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	eb e9       	ldi	r30, 0x9B	; 155
     930:	f4 e0       	ldi	r31, 0x04	; 4
     932:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__prologue_saves__+0x18>
     936:	69 83       	std	Y+1, r22	; 0x01
     938:	7a 83       	std	Y+2, r23	; 0x02
     93a:	8b 83       	std	Y+3, r24	; 0x03
     93c:	9c 83       	std	Y+4, r25	; 0x04
     93e:	2d 83       	std	Y+5, r18	; 0x05
     940:	3e 83       	std	Y+6, r19	; 0x06
     942:	4f 83       	std	Y+7, r20	; 0x07
     944:	58 87       	std	Y+8, r21	; 0x08
     946:	89 e0       	ldi	r24, 0x09	; 9
     948:	e8 2e       	mov	r14, r24
     94a:	f1 2c       	mov	r15, r1
     94c:	ec 0e       	add	r14, r28
     94e:	fd 1e       	adc	r15, r29
     950:	ce 01       	movw	r24, r28
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	b7 01       	movw	r22, r14
     956:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__unpack_f>
     95a:	8e 01       	movw	r16, r28
     95c:	0f 5e       	subi	r16, 0xEF	; 239
     95e:	1f 4f       	sbci	r17, 0xFF	; 255
     960:	ce 01       	movw	r24, r28
     962:	05 96       	adiw	r24, 0x05	; 5
     964:	b8 01       	movw	r22, r16
     966:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__unpack_f>
     96a:	89 85       	ldd	r24, Y+9	; 0x09
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	40 f0       	brcs	.+16     	; 0x980 <__ltsf2+0x56>
     970:	89 89       	ldd	r24, Y+17	; 0x11
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	28 f0       	brcs	.+10     	; 0x980 <__ltsf2+0x56>
     976:	c7 01       	movw	r24, r14
     978:	b8 01       	movw	r22, r16
     97a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__fpcmp_parts_f>
     97e:	01 c0       	rjmp	.+2      	; 0x982 <__ltsf2+0x58>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	68 96       	adiw	r28, 0x18	; 24
     984:	e6 e0       	ldi	r30, 0x06	; 6
     986:	0c 94 15 1b 	jmp	0x362a	; 0x362a <__epilogue_restores__+0x18>

0000098a <__fixsfsi>:
     98a:	ac e0       	ldi	r26, 0x0C	; 12
     98c:	b0 e0       	ldi	r27, 0x00	; 0
     98e:	eb ec       	ldi	r30, 0xCB	; 203
     990:	f4 e0       	ldi	r31, 0x04	; 4
     992:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__prologue_saves__+0x20>
     996:	69 83       	std	Y+1, r22	; 0x01
     998:	7a 83       	std	Y+2, r23	; 0x02
     99a:	8b 83       	std	Y+3, r24	; 0x03
     99c:	9c 83       	std	Y+4, r25	; 0x04
     99e:	ce 01       	movw	r24, r28
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	be 01       	movw	r22, r28
     9a4:	6b 5f       	subi	r22, 0xFB	; 251
     9a6:	7f 4f       	sbci	r23, 0xFF	; 255
     9a8:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__unpack_f>
     9ac:	8d 81       	ldd	r24, Y+5	; 0x05
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	61 f1       	breq	.+88     	; 0xa0a <__fixsfsi+0x80>
     9b2:	82 30       	cpi	r24, 0x02	; 2
     9b4:	50 f1       	brcs	.+84     	; 0xa0a <__fixsfsi+0x80>
     9b6:	84 30       	cpi	r24, 0x04	; 4
     9b8:	21 f4       	brne	.+8      	; 0x9c2 <__fixsfsi+0x38>
     9ba:	8e 81       	ldd	r24, Y+6	; 0x06
     9bc:	88 23       	and	r24, r24
     9be:	51 f1       	breq	.+84     	; 0xa14 <__fixsfsi+0x8a>
     9c0:	2e c0       	rjmp	.+92     	; 0xa1e <__fixsfsi+0x94>
     9c2:	2f 81       	ldd	r18, Y+7	; 0x07
     9c4:	38 85       	ldd	r19, Y+8	; 0x08
     9c6:	37 fd       	sbrc	r19, 7
     9c8:	20 c0       	rjmp	.+64     	; 0xa0a <__fixsfsi+0x80>
     9ca:	6e 81       	ldd	r22, Y+6	; 0x06
     9cc:	2f 31       	cpi	r18, 0x1F	; 31
     9ce:	31 05       	cpc	r19, r1
     9d0:	1c f0       	brlt	.+6      	; 0x9d8 <__fixsfsi+0x4e>
     9d2:	66 23       	and	r22, r22
     9d4:	f9 f0       	breq	.+62     	; 0xa14 <__fixsfsi+0x8a>
     9d6:	23 c0       	rjmp	.+70     	; 0xa1e <__fixsfsi+0x94>
     9d8:	8e e1       	ldi	r24, 0x1E	; 30
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	82 1b       	sub	r24, r18
     9de:	93 0b       	sbc	r25, r19
     9e0:	29 85       	ldd	r18, Y+9	; 0x09
     9e2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9e4:	4b 85       	ldd	r20, Y+11	; 0x0b
     9e6:	5c 85       	ldd	r21, Y+12	; 0x0c
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x68>
     9ea:	56 95       	lsr	r21
     9ec:	47 95       	ror	r20
     9ee:	37 95       	ror	r19
     9f0:	27 95       	ror	r18
     9f2:	8a 95       	dec	r24
     9f4:	d2 f7       	brpl	.-12     	; 0x9ea <__fixsfsi+0x60>
     9f6:	66 23       	and	r22, r22
     9f8:	b1 f0       	breq	.+44     	; 0xa26 <__fixsfsi+0x9c>
     9fa:	50 95       	com	r21
     9fc:	40 95       	com	r20
     9fe:	30 95       	com	r19
     a00:	21 95       	neg	r18
     a02:	3f 4f       	sbci	r19, 0xFF	; 255
     a04:	4f 4f       	sbci	r20, 0xFF	; 255
     a06:	5f 4f       	sbci	r21, 0xFF	; 255
     a08:	0e c0       	rjmp	.+28     	; 0xa26 <__fixsfsi+0x9c>
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	09 c0       	rjmp	.+18     	; 0xa26 <__fixsfsi+0x9c>
     a14:	2f ef       	ldi	r18, 0xFF	; 255
     a16:	3f ef       	ldi	r19, 0xFF	; 255
     a18:	4f ef       	ldi	r20, 0xFF	; 255
     a1a:	5f e7       	ldi	r21, 0x7F	; 127
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__fixsfsi+0x9c>
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e8       	ldi	r21, 0x80	; 128
     a26:	b9 01       	movw	r22, r18
     a28:	ca 01       	movw	r24, r20
     a2a:	2c 96       	adiw	r28, 0x0c	; 12
     a2c:	e2 e0       	ldi	r30, 0x02	; 2
     a2e:	0c 94 19 1b 	jmp	0x3632	; 0x3632 <__epilogue_restores__+0x20>

00000a32 <__floatunsisf>:
     a32:	a8 e0       	ldi	r26, 0x08	; 8
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	ef e1       	ldi	r30, 0x1F	; 31
     a38:	f5 e0       	ldi	r31, 0x05	; 5
     a3a:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <__prologue_saves__+0x10>
     a3e:	7b 01       	movw	r14, r22
     a40:	8c 01       	movw	r16, r24
     a42:	61 15       	cp	r22, r1
     a44:	71 05       	cpc	r23, r1
     a46:	81 05       	cpc	r24, r1
     a48:	91 05       	cpc	r25, r1
     a4a:	19 f4       	brne	.+6      	; 0xa52 <__floatunsisf+0x20>
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	89 83       	std	Y+1, r24	; 0x01
     a50:	60 c0       	rjmp	.+192    	; 0xb12 <__floatunsisf+0xe0>
     a52:	83 e0       	ldi	r24, 0x03	; 3
     a54:	89 83       	std	Y+1, r24	; 0x01
     a56:	8e e1       	ldi	r24, 0x1E	; 30
     a58:	c8 2e       	mov	r12, r24
     a5a:	d1 2c       	mov	r13, r1
     a5c:	dc 82       	std	Y+4, r13	; 0x04
     a5e:	cb 82       	std	Y+3, r12	; 0x03
     a60:	ed 82       	std	Y+5, r14	; 0x05
     a62:	fe 82       	std	Y+6, r15	; 0x06
     a64:	0f 83       	std	Y+7, r16	; 0x07
     a66:	18 87       	std	Y+8, r17	; 0x08
     a68:	c8 01       	movw	r24, r16
     a6a:	b7 01       	movw	r22, r14
     a6c:	0e 94 92 05 	call	0xb24	; 0xb24 <__clzsi2>
     a70:	fc 01       	movw	r30, r24
     a72:	31 97       	sbiw	r30, 0x01	; 1
     a74:	f7 ff       	sbrs	r31, 7
     a76:	3b c0       	rjmp	.+118    	; 0xaee <__floatunsisf+0xbc>
     a78:	22 27       	eor	r18, r18
     a7a:	33 27       	eor	r19, r19
     a7c:	2e 1b       	sub	r18, r30
     a7e:	3f 0b       	sbc	r19, r31
     a80:	57 01       	movw	r10, r14
     a82:	68 01       	movw	r12, r16
     a84:	02 2e       	mov	r0, r18
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__floatunsisf+0x5e>
     a88:	d6 94       	lsr	r13
     a8a:	c7 94       	ror	r12
     a8c:	b7 94       	ror	r11
     a8e:	a7 94       	ror	r10
     a90:	0a 94       	dec	r0
     a92:	d2 f7       	brpl	.-12     	; 0xa88 <__floatunsisf+0x56>
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	04 c0       	rjmp	.+8      	; 0xaae <__floatunsisf+0x7c>
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	aa 1f       	adc	r26, r26
     aac:	bb 1f       	adc	r27, r27
     aae:	2a 95       	dec	r18
     ab0:	d2 f7       	brpl	.-12     	; 0xaa6 <__floatunsisf+0x74>
     ab2:	01 97       	sbiw	r24, 0x01	; 1
     ab4:	a1 09       	sbc	r26, r1
     ab6:	b1 09       	sbc	r27, r1
     ab8:	8e 21       	and	r24, r14
     aba:	9f 21       	and	r25, r15
     abc:	a0 23       	and	r26, r16
     abe:	b1 23       	and	r27, r17
     ac0:	00 97       	sbiw	r24, 0x00	; 0
     ac2:	a1 05       	cpc	r26, r1
     ac4:	b1 05       	cpc	r27, r1
     ac6:	21 f0       	breq	.+8      	; 0xad0 <__floatunsisf+0x9e>
     ac8:	41 e0       	ldi	r20, 0x01	; 1
     aca:	50 e0       	ldi	r21, 0x00	; 0
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	4a 29       	or	r20, r10
     ad2:	5b 29       	or	r21, r11
     ad4:	6c 29       	or	r22, r12
     ad6:	7d 29       	or	r23, r13
     ad8:	4d 83       	std	Y+5, r20	; 0x05
     ada:	5e 83       	std	Y+6, r21	; 0x06
     adc:	6f 83       	std	Y+7, r22	; 0x07
     ade:	78 87       	std	Y+8, r23	; 0x08
     ae0:	8e e1       	ldi	r24, 0x1E	; 30
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	8e 1b       	sub	r24, r30
     ae6:	9f 0b       	sbc	r25, r31
     ae8:	9c 83       	std	Y+4, r25	; 0x04
     aea:	8b 83       	std	Y+3, r24	; 0x03
     aec:	12 c0       	rjmp	.+36     	; 0xb12 <__floatunsisf+0xe0>
     aee:	30 97       	sbiw	r30, 0x00	; 0
     af0:	81 f0       	breq	.+32     	; 0xb12 <__floatunsisf+0xe0>
     af2:	0e 2e       	mov	r0, r30
     af4:	04 c0       	rjmp	.+8      	; 0xafe <__floatunsisf+0xcc>
     af6:	ee 0c       	add	r14, r14
     af8:	ff 1c       	adc	r15, r15
     afa:	00 1f       	adc	r16, r16
     afc:	11 1f       	adc	r17, r17
     afe:	0a 94       	dec	r0
     b00:	d2 f7       	brpl	.-12     	; 0xaf6 <__floatunsisf+0xc4>
     b02:	ed 82       	std	Y+5, r14	; 0x05
     b04:	fe 82       	std	Y+6, r15	; 0x06
     b06:	0f 83       	std	Y+7, r16	; 0x07
     b08:	18 87       	std	Y+8, r17	; 0x08
     b0a:	ce 1a       	sub	r12, r30
     b0c:	df 0a       	sbc	r13, r31
     b0e:	dc 82       	std	Y+4, r13	; 0x04
     b10:	cb 82       	std	Y+3, r12	; 0x03
     b12:	1a 82       	std	Y+2, r1	; 0x02
     b14:	ce 01       	movw	r24, r28
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__pack_f>
     b1c:	28 96       	adiw	r28, 0x08	; 8
     b1e:	ea e0       	ldi	r30, 0x0A	; 10
     b20:	0c 94 11 1b 	jmp	0x3622	; 0x3622 <__epilogue_restores__+0x10>

00000b24 <__clzsi2>:
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	7b 01       	movw	r14, r22
     b2e:	8c 01       	movw	r16, r24
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	e8 16       	cp	r14, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	f8 06       	cpc	r15, r24
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	08 07       	cpc	r16, r24
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	18 07       	cpc	r17, r24
     b40:	88 f4       	brcc	.+34     	; 0xb64 <__clzsi2+0x40>
     b42:	8f ef       	ldi	r24, 0xFF	; 255
     b44:	e8 16       	cp	r14, r24
     b46:	f1 04       	cpc	r15, r1
     b48:	01 05       	cpc	r16, r1
     b4a:	11 05       	cpc	r17, r1
     b4c:	31 f0       	breq	.+12     	; 0xb5a <__clzsi2+0x36>
     b4e:	28 f0       	brcs	.+10     	; 0xb5a <__clzsi2+0x36>
     b50:	88 e0       	ldi	r24, 0x08	; 8
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	a0 e0       	ldi	r26, 0x00	; 0
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	17 c0       	rjmp	.+46     	; 0xb88 <__clzsi2+0x64>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 e0       	ldi	r26, 0x00	; 0
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	12 c0       	rjmp	.+36     	; 0xb88 <__clzsi2+0x64>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	e8 16       	cp	r14, r24
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	f8 06       	cpc	r15, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	08 07       	cpc	r16, r24
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	18 07       	cpc	r17, r24
     b74:	28 f0       	brcs	.+10     	; 0xb80 <__clzsi2+0x5c>
     b76:	88 e1       	ldi	r24, 0x18	; 24
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	a0 e0       	ldi	r26, 0x00	; 0
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <__clzsi2+0x64>
     b80:	80 e1       	ldi	r24, 0x10	; 16
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	20 e2       	ldi	r18, 0x20	; 32
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	28 1b       	sub	r18, r24
     b92:	39 0b       	sbc	r19, r25
     b94:	4a 0b       	sbc	r20, r26
     b96:	5b 0b       	sbc	r21, r27
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__clzsi2+0x7e>
     b9a:	16 95       	lsr	r17
     b9c:	07 95       	ror	r16
     b9e:	f7 94       	ror	r15
     ba0:	e7 94       	ror	r14
     ba2:	8a 95       	dec	r24
     ba4:	d2 f7       	brpl	.-12     	; 0xb9a <__clzsi2+0x76>
     ba6:	f7 01       	movw	r30, r14
     ba8:	e2 55       	subi	r30, 0x52	; 82
     baa:	ff 4f       	sbci	r31, 0xFF	; 255
     bac:	80 81       	ld	r24, Z
     bae:	28 1b       	sub	r18, r24
     bb0:	31 09       	sbc	r19, r1
     bb2:	41 09       	sbc	r20, r1
     bb4:	51 09       	sbc	r21, r1
     bb6:	c9 01       	movw	r24, r18
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	08 95       	ret

00000bc2 <__pack_f>:
     bc2:	df 92       	push	r13
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	fc 01       	movw	r30, r24
     bce:	e4 80       	ldd	r14, Z+4	; 0x04
     bd0:	f5 80       	ldd	r15, Z+5	; 0x05
     bd2:	06 81       	ldd	r16, Z+6	; 0x06
     bd4:	17 81       	ldd	r17, Z+7	; 0x07
     bd6:	d1 80       	ldd	r13, Z+1	; 0x01
     bd8:	80 81       	ld	r24, Z
     bda:	82 30       	cpi	r24, 0x02	; 2
     bdc:	48 f4       	brcc	.+18     	; 0xbf0 <__pack_f+0x2e>
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	a0 e1       	ldi	r26, 0x10	; 16
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e8 2a       	or	r14, r24
     be8:	f9 2a       	or	r15, r25
     bea:	0a 2b       	or	r16, r26
     bec:	1b 2b       	or	r17, r27
     bee:	a5 c0       	rjmp	.+330    	; 0xd3a <__pack_f+0x178>
     bf0:	84 30       	cpi	r24, 0x04	; 4
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <__pack_f+0x34>
     bf4:	9f c0       	rjmp	.+318    	; 0xd34 <__pack_f+0x172>
     bf6:	82 30       	cpi	r24, 0x02	; 2
     bf8:	21 f4       	brne	.+8      	; 0xc02 <__pack_f+0x40>
     bfa:	ee 24       	eor	r14, r14
     bfc:	ff 24       	eor	r15, r15
     bfe:	87 01       	movw	r16, r14
     c00:	05 c0       	rjmp	.+10     	; 0xc0c <__pack_f+0x4a>
     c02:	e1 14       	cp	r14, r1
     c04:	f1 04       	cpc	r15, r1
     c06:	01 05       	cpc	r16, r1
     c08:	11 05       	cpc	r17, r1
     c0a:	19 f4       	brne	.+6      	; 0xc12 <__pack_f+0x50>
     c0c:	e0 e0       	ldi	r30, 0x00	; 0
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	96 c0       	rjmp	.+300    	; 0xd3e <__pack_f+0x17c>
     c12:	62 81       	ldd	r22, Z+2	; 0x02
     c14:	73 81       	ldd	r23, Z+3	; 0x03
     c16:	9f ef       	ldi	r25, 0xFF	; 255
     c18:	62 38       	cpi	r22, 0x82	; 130
     c1a:	79 07       	cpc	r23, r25
     c1c:	0c f0       	brlt	.+2      	; 0xc20 <__pack_f+0x5e>
     c1e:	5b c0       	rjmp	.+182    	; 0xcd6 <__pack_f+0x114>
     c20:	22 e8       	ldi	r18, 0x82	; 130
     c22:	3f ef       	ldi	r19, 0xFF	; 255
     c24:	26 1b       	sub	r18, r22
     c26:	37 0b       	sbc	r19, r23
     c28:	2a 31       	cpi	r18, 0x1A	; 26
     c2a:	31 05       	cpc	r19, r1
     c2c:	2c f0       	brlt	.+10     	; 0xc38 <__pack_f+0x76>
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	2a c0       	rjmp	.+84     	; 0xc8c <__pack_f+0xca>
     c38:	b8 01       	movw	r22, r16
     c3a:	a7 01       	movw	r20, r14
     c3c:	02 2e       	mov	r0, r18
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <__pack_f+0x86>
     c40:	76 95       	lsr	r23
     c42:	67 95       	ror	r22
     c44:	57 95       	ror	r21
     c46:	47 95       	ror	r20
     c48:	0a 94       	dec	r0
     c4a:	d2 f7       	brpl	.-12     	; 0xc40 <__pack_f+0x7e>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <__pack_f+0x9c>
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	aa 1f       	adc	r26, r26
     c5c:	bb 1f       	adc	r27, r27
     c5e:	2a 95       	dec	r18
     c60:	d2 f7       	brpl	.-12     	; 0xc56 <__pack_f+0x94>
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	a1 09       	sbc	r26, r1
     c66:	b1 09       	sbc	r27, r1
     c68:	8e 21       	and	r24, r14
     c6a:	9f 21       	and	r25, r15
     c6c:	a0 23       	and	r26, r16
     c6e:	b1 23       	and	r27, r17
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	21 f0       	breq	.+8      	; 0xc80 <__pack_f+0xbe>
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	a0 e0       	ldi	r26, 0x00	; 0
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	9a 01       	movw	r18, r20
     c82:	ab 01       	movw	r20, r22
     c84:	28 2b       	or	r18, r24
     c86:	39 2b       	or	r19, r25
     c88:	4a 2b       	or	r20, r26
     c8a:	5b 2b       	or	r21, r27
     c8c:	da 01       	movw	r26, r20
     c8e:	c9 01       	movw	r24, r18
     c90:	8f 77       	andi	r24, 0x7F	; 127
     c92:	90 70       	andi	r25, 0x00	; 0
     c94:	a0 70       	andi	r26, 0x00	; 0
     c96:	b0 70       	andi	r27, 0x00	; 0
     c98:	80 34       	cpi	r24, 0x40	; 64
     c9a:	91 05       	cpc	r25, r1
     c9c:	a1 05       	cpc	r26, r1
     c9e:	b1 05       	cpc	r27, r1
     ca0:	39 f4       	brne	.+14     	; 0xcb0 <__pack_f+0xee>
     ca2:	27 ff       	sbrs	r18, 7
     ca4:	09 c0       	rjmp	.+18     	; 0xcb8 <__pack_f+0xf6>
     ca6:	20 5c       	subi	r18, 0xC0	; 192
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
     caa:	4f 4f       	sbci	r20, 0xFF	; 255
     cac:	5f 4f       	sbci	r21, 0xFF	; 255
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <__pack_f+0xf6>
     cb0:	21 5c       	subi	r18, 0xC1	; 193
     cb2:	3f 4f       	sbci	r19, 0xFF	; 255
     cb4:	4f 4f       	sbci	r20, 0xFF	; 255
     cb6:	5f 4f       	sbci	r21, 0xFF	; 255
     cb8:	e0 e0       	ldi	r30, 0x00	; 0
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	20 30       	cpi	r18, 0x00	; 0
     cbe:	a0 e0       	ldi	r26, 0x00	; 0
     cc0:	3a 07       	cpc	r19, r26
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	4a 07       	cpc	r20, r26
     cc6:	a0 e4       	ldi	r26, 0x40	; 64
     cc8:	5a 07       	cpc	r21, r26
     cca:	10 f0       	brcs	.+4      	; 0xcd0 <__pack_f+0x10e>
     ccc:	e1 e0       	ldi	r30, 0x01	; 1
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	79 01       	movw	r14, r18
     cd2:	8a 01       	movw	r16, r20
     cd4:	27 c0       	rjmp	.+78     	; 0xd24 <__pack_f+0x162>
     cd6:	60 38       	cpi	r22, 0x80	; 128
     cd8:	71 05       	cpc	r23, r1
     cda:	64 f5       	brge	.+88     	; 0xd34 <__pack_f+0x172>
     cdc:	fb 01       	movw	r30, r22
     cde:	e1 58       	subi	r30, 0x81	; 129
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	d8 01       	movw	r26, r16
     ce4:	c7 01       	movw	r24, r14
     ce6:	8f 77       	andi	r24, 0x7F	; 127
     ce8:	90 70       	andi	r25, 0x00	; 0
     cea:	a0 70       	andi	r26, 0x00	; 0
     cec:	b0 70       	andi	r27, 0x00	; 0
     cee:	80 34       	cpi	r24, 0x40	; 64
     cf0:	91 05       	cpc	r25, r1
     cf2:	a1 05       	cpc	r26, r1
     cf4:	b1 05       	cpc	r27, r1
     cf6:	39 f4       	brne	.+14     	; 0xd06 <__pack_f+0x144>
     cf8:	e7 fe       	sbrs	r14, 7
     cfa:	0d c0       	rjmp	.+26     	; 0xd16 <__pack_f+0x154>
     cfc:	80 e4       	ldi	r24, 0x40	; 64
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	a0 e0       	ldi	r26, 0x00	; 0
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	04 c0       	rjmp	.+8      	; 0xd0e <__pack_f+0x14c>
     d06:	8f e3       	ldi	r24, 0x3F	; 63
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	a0 e0       	ldi	r26, 0x00	; 0
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e8 0e       	add	r14, r24
     d10:	f9 1e       	adc	r15, r25
     d12:	0a 1f       	adc	r16, r26
     d14:	1b 1f       	adc	r17, r27
     d16:	17 ff       	sbrs	r17, 7
     d18:	05 c0       	rjmp	.+10     	; 0xd24 <__pack_f+0x162>
     d1a:	16 95       	lsr	r17
     d1c:	07 95       	ror	r16
     d1e:	f7 94       	ror	r15
     d20:	e7 94       	ror	r14
     d22:	31 96       	adiw	r30, 0x01	; 1
     d24:	87 e0       	ldi	r24, 0x07	; 7
     d26:	16 95       	lsr	r17
     d28:	07 95       	ror	r16
     d2a:	f7 94       	ror	r15
     d2c:	e7 94       	ror	r14
     d2e:	8a 95       	dec	r24
     d30:	d1 f7       	brne	.-12     	; 0xd26 <__pack_f+0x164>
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <__pack_f+0x17c>
     d34:	ee 24       	eor	r14, r14
     d36:	ff 24       	eor	r15, r15
     d38:	87 01       	movw	r16, r14
     d3a:	ef ef       	ldi	r30, 0xFF	; 255
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	6e 2f       	mov	r22, r30
     d40:	67 95       	ror	r22
     d42:	66 27       	eor	r22, r22
     d44:	67 95       	ror	r22
     d46:	90 2f       	mov	r25, r16
     d48:	9f 77       	andi	r25, 0x7F	; 127
     d4a:	d7 94       	ror	r13
     d4c:	dd 24       	eor	r13, r13
     d4e:	d7 94       	ror	r13
     d50:	8e 2f       	mov	r24, r30
     d52:	86 95       	lsr	r24
     d54:	49 2f       	mov	r20, r25
     d56:	46 2b       	or	r20, r22
     d58:	58 2f       	mov	r21, r24
     d5a:	5d 29       	or	r21, r13
     d5c:	b7 01       	movw	r22, r14
     d5e:	ca 01       	movw	r24, r20
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	08 95       	ret

00000d6c <__unpack_f>:
     d6c:	fc 01       	movw	r30, r24
     d6e:	db 01       	movw	r26, r22
     d70:	40 81       	ld	r20, Z
     d72:	51 81       	ldd	r21, Z+1	; 0x01
     d74:	22 81       	ldd	r18, Z+2	; 0x02
     d76:	62 2f       	mov	r22, r18
     d78:	6f 77       	andi	r22, 0x7F	; 127
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	22 1f       	adc	r18, r18
     d7e:	22 27       	eor	r18, r18
     d80:	22 1f       	adc	r18, r18
     d82:	93 81       	ldd	r25, Z+3	; 0x03
     d84:	89 2f       	mov	r24, r25
     d86:	88 0f       	add	r24, r24
     d88:	82 2b       	or	r24, r18
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	99 1f       	adc	r25, r25
     d90:	99 27       	eor	r25, r25
     d92:	99 1f       	adc	r25, r25
     d94:	11 96       	adiw	r26, 0x01	; 1
     d96:	9c 93       	st	X, r25
     d98:	11 97       	sbiw	r26, 0x01	; 1
     d9a:	21 15       	cp	r18, r1
     d9c:	31 05       	cpc	r19, r1
     d9e:	a9 f5       	brne	.+106    	; 0xe0a <__unpack_f+0x9e>
     da0:	41 15       	cp	r20, r1
     da2:	51 05       	cpc	r21, r1
     da4:	61 05       	cpc	r22, r1
     da6:	71 05       	cpc	r23, r1
     da8:	11 f4       	brne	.+4      	; 0xdae <__unpack_f+0x42>
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	37 c0       	rjmp	.+110    	; 0xe1c <__unpack_f+0xb0>
     dae:	82 e8       	ldi	r24, 0x82	; 130
     db0:	9f ef       	ldi	r25, 0xFF	; 255
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	9c 93       	st	X, r25
     db6:	8e 93       	st	-X, r24
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	9a 01       	movw	r18, r20
     dbc:	ab 01       	movw	r20, r22
     dbe:	67 e0       	ldi	r22, 0x07	; 7
     dc0:	22 0f       	add	r18, r18
     dc2:	33 1f       	adc	r19, r19
     dc4:	44 1f       	adc	r20, r20
     dc6:	55 1f       	adc	r21, r21
     dc8:	6a 95       	dec	r22
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0x54>
     dcc:	83 e0       	ldi	r24, 0x03	; 3
     dce:	8c 93       	st	X, r24
     dd0:	0d c0       	rjmp	.+26     	; 0xdec <__unpack_f+0x80>
     dd2:	22 0f       	add	r18, r18
     dd4:	33 1f       	adc	r19, r19
     dd6:	44 1f       	adc	r20, r20
     dd8:	55 1f       	adc	r21, r21
     dda:	12 96       	adiw	r26, 0x02	; 2
     ddc:	8d 91       	ld	r24, X+
     dde:	9c 91       	ld	r25, X
     de0:	13 97       	sbiw	r26, 0x03	; 3
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	13 96       	adiw	r26, 0x03	; 3
     de6:	9c 93       	st	X, r25
     de8:	8e 93       	st	-X, r24
     dea:	12 97       	sbiw	r26, 0x02	; 2
     dec:	20 30       	cpi	r18, 0x00	; 0
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	38 07       	cpc	r19, r24
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	48 07       	cpc	r20, r24
     df6:	80 e4       	ldi	r24, 0x40	; 64
     df8:	58 07       	cpc	r21, r24
     dfa:	58 f3       	brcs	.-42     	; 0xdd2 <__unpack_f+0x66>
     dfc:	14 96       	adiw	r26, 0x04	; 4
     dfe:	2d 93       	st	X+, r18
     e00:	3d 93       	st	X+, r19
     e02:	4d 93       	st	X+, r20
     e04:	5c 93       	st	X, r21
     e06:	17 97       	sbiw	r26, 0x07	; 7
     e08:	08 95       	ret
     e0a:	2f 3f       	cpi	r18, 0xFF	; 255
     e0c:	31 05       	cpc	r19, r1
     e0e:	79 f4       	brne	.+30     	; 0xe2e <__unpack_f+0xc2>
     e10:	41 15       	cp	r20, r1
     e12:	51 05       	cpc	r21, r1
     e14:	61 05       	cpc	r22, r1
     e16:	71 05       	cpc	r23, r1
     e18:	19 f4       	brne	.+6      	; 0xe20 <__unpack_f+0xb4>
     e1a:	84 e0       	ldi	r24, 0x04	; 4
     e1c:	8c 93       	st	X, r24
     e1e:	08 95       	ret
     e20:	64 ff       	sbrs	r22, 4
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <__unpack_f+0xbe>
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	8c 93       	st	X, r24
     e28:	12 c0       	rjmp	.+36     	; 0xe4e <__unpack_f+0xe2>
     e2a:	1c 92       	st	X, r1
     e2c:	10 c0       	rjmp	.+32     	; 0xe4e <__unpack_f+0xe2>
     e2e:	2f 57       	subi	r18, 0x7F	; 127
     e30:	30 40       	sbci	r19, 0x00	; 0
     e32:	13 96       	adiw	r26, 0x03	; 3
     e34:	3c 93       	st	X, r19
     e36:	2e 93       	st	-X, r18
     e38:	12 97       	sbiw	r26, 0x02	; 2
     e3a:	83 e0       	ldi	r24, 0x03	; 3
     e3c:	8c 93       	st	X, r24
     e3e:	87 e0       	ldi	r24, 0x07	; 7
     e40:	44 0f       	add	r20, r20
     e42:	55 1f       	adc	r21, r21
     e44:	66 1f       	adc	r22, r22
     e46:	77 1f       	adc	r23, r23
     e48:	8a 95       	dec	r24
     e4a:	d1 f7       	brne	.-12     	; 0xe40 <__unpack_f+0xd4>
     e4c:	70 64       	ori	r23, 0x40	; 64
     e4e:	14 96       	adiw	r26, 0x04	; 4
     e50:	4d 93       	st	X+, r20
     e52:	5d 93       	st	X+, r21
     e54:	6d 93       	st	X+, r22
     e56:	7c 93       	st	X, r23
     e58:	17 97       	sbiw	r26, 0x07	; 7
     e5a:	08 95       	ret

00000e5c <__fpcmp_parts_f>:
     e5c:	1f 93       	push	r17
     e5e:	dc 01       	movw	r26, r24
     e60:	fb 01       	movw	r30, r22
     e62:	9c 91       	ld	r25, X
     e64:	92 30       	cpi	r25, 0x02	; 2
     e66:	08 f4       	brcc	.+2      	; 0xe6a <__fpcmp_parts_f+0xe>
     e68:	47 c0       	rjmp	.+142    	; 0xef8 <__fpcmp_parts_f+0x9c>
     e6a:	80 81       	ld	r24, Z
     e6c:	82 30       	cpi	r24, 0x02	; 2
     e6e:	08 f4       	brcc	.+2      	; 0xe72 <__fpcmp_parts_f+0x16>
     e70:	43 c0       	rjmp	.+134    	; 0xef8 <__fpcmp_parts_f+0x9c>
     e72:	94 30       	cpi	r25, 0x04	; 4
     e74:	51 f4       	brne	.+20     	; 0xe8a <__fpcmp_parts_f+0x2e>
     e76:	11 96       	adiw	r26, 0x01	; 1
     e78:	1c 91       	ld	r17, X
     e7a:	84 30       	cpi	r24, 0x04	; 4
     e7c:	99 f5       	brne	.+102    	; 0xee4 <__fpcmp_parts_f+0x88>
     e7e:	81 81       	ldd	r24, Z+1	; 0x01
     e80:	68 2f       	mov	r22, r24
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	61 1b       	sub	r22, r17
     e86:	71 09       	sbc	r23, r1
     e88:	3f c0       	rjmp	.+126    	; 0xf08 <__fpcmp_parts_f+0xac>
     e8a:	84 30       	cpi	r24, 0x04	; 4
     e8c:	21 f0       	breq	.+8      	; 0xe96 <__fpcmp_parts_f+0x3a>
     e8e:	92 30       	cpi	r25, 0x02	; 2
     e90:	31 f4       	brne	.+12     	; 0xe9e <__fpcmp_parts_f+0x42>
     e92:	82 30       	cpi	r24, 0x02	; 2
     e94:	b9 f1       	breq	.+110    	; 0xf04 <__fpcmp_parts_f+0xa8>
     e96:	81 81       	ldd	r24, Z+1	; 0x01
     e98:	88 23       	and	r24, r24
     e9a:	89 f1       	breq	.+98     	; 0xefe <__fpcmp_parts_f+0xa2>
     e9c:	2d c0       	rjmp	.+90     	; 0xef8 <__fpcmp_parts_f+0x9c>
     e9e:	11 96       	adiw	r26, 0x01	; 1
     ea0:	1c 91       	ld	r17, X
     ea2:	11 97       	sbiw	r26, 0x01	; 1
     ea4:	82 30       	cpi	r24, 0x02	; 2
     ea6:	f1 f0       	breq	.+60     	; 0xee4 <__fpcmp_parts_f+0x88>
     ea8:	81 81       	ldd	r24, Z+1	; 0x01
     eaa:	18 17       	cp	r17, r24
     eac:	d9 f4       	brne	.+54     	; 0xee4 <__fpcmp_parts_f+0x88>
     eae:	12 96       	adiw	r26, 0x02	; 2
     eb0:	2d 91       	ld	r18, X+
     eb2:	3c 91       	ld	r19, X
     eb4:	13 97       	sbiw	r26, 0x03	; 3
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	93 81       	ldd	r25, Z+3	; 0x03
     eba:	82 17       	cp	r24, r18
     ebc:	93 07       	cpc	r25, r19
     ebe:	94 f0       	brlt	.+36     	; 0xee4 <__fpcmp_parts_f+0x88>
     ec0:	28 17       	cp	r18, r24
     ec2:	39 07       	cpc	r19, r25
     ec4:	bc f0       	brlt	.+46     	; 0xef4 <__fpcmp_parts_f+0x98>
     ec6:	14 96       	adiw	r26, 0x04	; 4
     ec8:	8d 91       	ld	r24, X+
     eca:	9d 91       	ld	r25, X+
     ecc:	0d 90       	ld	r0, X+
     ece:	bc 91       	ld	r27, X
     ed0:	a0 2d       	mov	r26, r0
     ed2:	24 81       	ldd	r18, Z+4	; 0x04
     ed4:	35 81       	ldd	r19, Z+5	; 0x05
     ed6:	46 81       	ldd	r20, Z+6	; 0x06
     ed8:	57 81       	ldd	r21, Z+7	; 0x07
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	4a 07       	cpc	r20, r26
     ee0:	5b 07       	cpc	r21, r27
     ee2:	18 f4       	brcc	.+6      	; 0xeea <__fpcmp_parts_f+0x8e>
     ee4:	11 23       	and	r17, r17
     ee6:	41 f0       	breq	.+16     	; 0xef8 <__fpcmp_parts_f+0x9c>
     ee8:	0a c0       	rjmp	.+20     	; 0xefe <__fpcmp_parts_f+0xa2>
     eea:	82 17       	cp	r24, r18
     eec:	93 07       	cpc	r25, r19
     eee:	a4 07       	cpc	r26, r20
     ef0:	b5 07       	cpc	r27, r21
     ef2:	40 f4       	brcc	.+16     	; 0xf04 <__fpcmp_parts_f+0xa8>
     ef4:	11 23       	and	r17, r17
     ef6:	19 f0       	breq	.+6      	; 0xefe <__fpcmp_parts_f+0xa2>
     ef8:	61 e0       	ldi	r22, 0x01	; 1
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	05 c0       	rjmp	.+10     	; 0xf08 <__fpcmp_parts_f+0xac>
     efe:	6f ef       	ldi	r22, 0xFF	; 255
     f00:	7f ef       	ldi	r23, 0xFF	; 255
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <__fpcmp_parts_f+0xac>
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	cb 01       	movw	r24, r22
     f0a:	1f 91       	pop	r17
     f0c:	08 95       	ret

00000f0e <ADC_init>:
#include "../mcal/atmega32_regs.h"
#include "../common/common_macros.h"
/**
 * @brief Initializes the ADC with internal 2.56V reference and prescaler of F_CPU/128.
 */
void ADC_init(void) {
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
	ADMUX_REG.byte=0;
     f16:	e7 e2       	ldi	r30, 0x27	; 39
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	10 82       	st	Z, r1
    ADMUX_REG.bits.refs0 = 1;
     f1c:	e7 e2       	ldi	r30, 0x27	; 39
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	80 64       	ori	r24, 0x40	; 64
     f24:	80 83       	st	Z, r24
    ADMUX_REG.bits.refs1 = 1;
     f26:	e7 e2       	ldi	r30, 0x27	; 39
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	80 68       	ori	r24, 0x80	; 128
     f2e:	80 83       	st	Z, r24
    ADCSRA_REG.bits.aden = 1;
     f30:	e6 e2       	ldi	r30, 0x26	; 38
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	80 68       	ori	r24, 0x80	; 128
     f38:	80 83       	st	Z, r24
    ADCSRA_REG.bits.adif = 1;
     f3a:	e6 e2       	ldi	r30, 0x26	; 38
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 61       	ori	r24, 0x10	; 16
     f42:	80 83       	st	Z, r24
    ADCSRA_REG.bits.adie = 0;
     f44:	e6 e2       	ldi	r30, 0x26	; 38
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	87 7f       	andi	r24, 0xF7	; 247
     f4c:	80 83       	st	Z, r24
    ADCSRA_REG.bits.adps0=1;
     f4e:	e6 e2       	ldi	r30, 0x26	; 38
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	81 60       	ori	r24, 0x01	; 1
     f56:	80 83       	st	Z, r24
    ADCSRA_REG.bits.adps1=1;
     f58:	e6 e2       	ldi	r30, 0x26	; 38
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	82 60       	ori	r24, 0x02	; 2
     f60:	80 83       	st	Z, r24
    ADCSRA_REG.bits.adps2=1;
     f62:	e6 e2       	ldi	r30, 0x26	; 38
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	80 83       	st	Z, r24
    SET_BIT(ADCSRA_REG.byte, (0x07));
     f6c:	a6 e2       	ldi	r26, 0x26	; 38
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e6 e2       	ldi	r30, 0x26	; 38
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	80 68       	ori	r24, 0x80	; 128
     f78:	8c 93       	st	X, r24


    // 3. Enable the ADC (ADEN bit in ADCSRA)

}
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <ADC_readChannel>:
 * and returns a 10-bit result.
 *
 * @param channel_num The ADC channel to read from (0-7).
 * @return The 10-bit digital result from the ADC conversion.
 */
uint16 ADC_readChannel(uint8 a_adcChannel) {
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	0f 92       	push	r0
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	89 83       	std	Y+1, r24	; 0x01

	ADMUX_REG.byte = (ADMUX_REG.byte & 0xE0) | (a_adcChannel);
     f8c:	a7 e2       	ldi	r26, 0x27	; 39
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e7 e2       	ldi	r30, 0x27	; 39
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	98 2f       	mov	r25, r24
     f98:	90 7e       	andi	r25, 0xE0	; 224
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	89 2b       	or	r24, r25
     f9e:	8c 93       	st	X, r24
	ADCSRA_REG.bits.adsc=LOGIC_HIGH;
     fa0:	e6 e2       	ldi	r30, 0x26	; 38
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	80 64       	ori	r24, 0x40	; 64
     fa8:	80 83       	st	Z, r24

		while (ADCSRA_REG.bits.adif == LOGIC_LOW)
     faa:	e6 e2       	ldi	r30, 0x26	; 38
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 71       	andi	r24, 0x10	; 16
     fb2:	88 23       	and	r24, r24
     fb4:	d1 f3       	breq	.-12     	; 0xfaa <ADC_readChannel+0x2a>
			;
		ADCSRA_REG.bits.adif = LOGIC_HIGH;
     fb6:	e6 e2       	ldi	r30, 0x26	; 38
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	80 61       	ori	r24, 0x10	; 16
     fbe:	80 83       	st	Z, r24
		return ADC_REG.value;
     fc0:	e4 e2       	ldi	r30, 0x24	; 36
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
}
     fc8:	0f 90       	pop	r0
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <PGM_readPtrToRam>:
 * @param __addr16 The 16-bit address in program memory to read.
 * @return Pointer to the corresponding location in RAM.
 */
static uint8*
PGM_readPtrToRam(const uint16_t a_addr16)
    {
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <PGM_readPtrToRam+0x6>
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <PGM_readPtrToRam+0x8>
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	9c 83       	std	Y+4, r25	; 0x04
     fde:	8b 83       	std	Y+3, r24	; 0x03
    uint16_t ram_addr;

    /* Use inline assembly to read two bytes from program memory (flash)*/
    __asm__ volatile (
     fe0:	eb 81       	ldd	r30, Y+3	; 0x03
     fe2:	fc 81       	ldd	r31, Y+4	; 0x04
     fe4:	85 91       	lpm	r24, Z+
     fe6:	94 91       	lpm	r25, Z+
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	89 83       	std	Y+1, r24	; 0x01
	    : "=r" (ram_addr) /* Output: ram_addr is where the 16-bit address is stored */
	    : "z" (a_addr16) /* Input: Z register holds the flash memory address (__addr16) */
    );

    /* Return the loaded 16-bit address as a pointer to RAM*/
    return (uint8*) ram_addr;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
    }
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <GPIO_setupPortDirection>:
 *
 * @param port_num Port_ID PORTA_ID, PORTB_IB ,...etc
 * @param a_value The desired direction PORT_INPUT,PORT_OUTPUT or the desired value
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction)
    {
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	00 d0       	rcall	.+0      	; 0x1004 <GPIO_setupPortDirection+0x6>
    1004:	00 d0       	rcall	.+0      	; 0x1006 <GPIO_setupPortDirection+0x8>
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	89 83       	std	Y+1, r24	; 0x01
    100c:	6a 83       	std	Y+2, r22	; 0x02
    /*
     * Check if the input number is greater than NUM_OF_PORTS value.
     * In this case the input is not valid port number
     */
    if (port_num >= NUM_OF_PORTS)
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	84 30       	cpi	r24, 0x04	; 4
    1012:	90 f5       	brcc	.+100    	; 0x1078 <GPIO_setupPortDirection+0x7a>
	/* Do Nothing */
	}
    else
	{
	/* Setup the port direction as required */
	switch (port_num)
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	3c 83       	std	Y+4, r19	; 0x04
    101c:	2b 83       	std	Y+3, r18	; 0x03
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	91 05       	cpc	r25, r1
    1026:	d1 f0       	breq	.+52     	; 0x105c <GPIO_setupPortDirection+0x5e>
    1028:	2b 81       	ldd	r18, Y+3	; 0x03
    102a:	3c 81       	ldd	r19, Y+4	; 0x04
    102c:	22 30       	cpi	r18, 0x02	; 2
    102e:	31 05       	cpc	r19, r1
    1030:	2c f4       	brge	.+10     	; 0x103c <GPIO_setupPortDirection+0x3e>
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	61 f0       	breq	.+24     	; 0x1052 <GPIO_setupPortDirection+0x54>
    103a:	1e c0       	rjmp	.+60     	; 0x1078 <GPIO_setupPortDirection+0x7a>
    103c:	2b 81       	ldd	r18, Y+3	; 0x03
    103e:	3c 81       	ldd	r19, Y+4	; 0x04
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	31 05       	cpc	r19, r1
    1044:	81 f0       	breq	.+32     	; 0x1066 <GPIO_setupPortDirection+0x68>
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	83 30       	cpi	r24, 0x03	; 3
    104c:	91 05       	cpc	r25, r1
    104e:	81 f0       	breq	.+32     	; 0x1070 <GPIO_setupPortDirection+0x72>
    1050:	13 c0       	rjmp	.+38     	; 0x1078 <GPIO_setupPortDirection+0x7a>
	    {
	case PORTA_ID:
	    DDRA = direction;
    1052:	ea e3       	ldi	r30, 0x3A	; 58
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	80 83       	st	Z, r24
    105a:	0e c0       	rjmp	.+28     	; 0x1078 <GPIO_setupPortDirection+0x7a>
	    break;
	case PORTB_ID:
	    DDRB = direction;
    105c:	e7 e3       	ldi	r30, 0x37	; 55
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	80 83       	st	Z, r24
    1064:	09 c0       	rjmp	.+18     	; 0x1078 <GPIO_setupPortDirection+0x7a>
	    break;
	case PORTC_ID:
	    DDRC = direction;
    1066:	e4 e3       	ldi	r30, 0x34	; 52
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	80 83       	st	Z, r24
    106e:	04 c0       	rjmp	.+8      	; 0x1078 <GPIO_setupPortDirection+0x7a>
	    break;
	case PORTD_ID:
	    DDRD = direction;
    1070:	e1 e3       	ldi	r30, 0x31	; 49
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	80 83       	st	Z, r24
	    break;
	    }
	}
    }
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <GPIO_writePort>:
 * @param port_num Port_ID PORTA_ID, PORTB_IB ,...etc
 * @param a_value The desired 8-bit  value to be set into the port.
 */

void GPIO_writePort(uint8 port_num, uint8 value)
    {
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	00 d0       	rcall	.+0      	; 0x108c <GPIO_writePort+0x6>
    108c:	00 d0       	rcall	.+0      	; 0x108e <GPIO_writePort+0x8>
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	6a 83       	std	Y+2, r22	; 0x02

    if (port_num >= NUM_OF_PORTS)
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	84 30       	cpi	r24, 0x04	; 4
    109a:	90 f5       	brcc	.+100    	; 0x1100 <GPIO_writePort+0x7a>
	/* Do Nothing */
	}
    else
	{

	switch (port_num)
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	3c 83       	std	Y+4, r19	; 0x04
    10a4:	2b 83       	std	Y+3, r18	; 0x03
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	9c 81       	ldd	r25, Y+4	; 0x04
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	91 05       	cpc	r25, r1
    10ae:	d1 f0       	breq	.+52     	; 0x10e4 <GPIO_writePort+0x5e>
    10b0:	2b 81       	ldd	r18, Y+3	; 0x03
    10b2:	3c 81       	ldd	r19, Y+4	; 0x04
    10b4:	22 30       	cpi	r18, 0x02	; 2
    10b6:	31 05       	cpc	r19, r1
    10b8:	2c f4       	brge	.+10     	; 0x10c4 <GPIO_writePort+0x3e>
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	9c 81       	ldd	r25, Y+4	; 0x04
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	61 f0       	breq	.+24     	; 0x10da <GPIO_writePort+0x54>
    10c2:	1e c0       	rjmp	.+60     	; 0x1100 <GPIO_writePort+0x7a>
    10c4:	2b 81       	ldd	r18, Y+3	; 0x03
    10c6:	3c 81       	ldd	r19, Y+4	; 0x04
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	81 f0       	breq	.+32     	; 0x10ee <GPIO_writePort+0x68>
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	83 30       	cpi	r24, 0x03	; 3
    10d4:	91 05       	cpc	r25, r1
    10d6:	81 f0       	breq	.+32     	; 0x10f8 <GPIO_writePort+0x72>
    10d8:	13 c0       	rjmp	.+38     	; 0x1100 <GPIO_writePort+0x7a>
	    {
	case PORTA_ID:
	    PORTA = value;
    10da:	eb e3       	ldi	r30, 0x3B	; 59
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	80 83       	st	Z, r24
    10e2:	0e c0       	rjmp	.+28     	; 0x1100 <GPIO_writePort+0x7a>
	    break;
	case PORTB_ID:
	    PORTB = value;
    10e4:	e8 e3       	ldi	r30, 0x38	; 56
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	80 83       	st	Z, r24
    10ec:	09 c0       	rjmp	.+18     	; 0x1100 <GPIO_writePort+0x7a>
	    break;
	case PORTC_ID:
	    PORTC = value;
    10ee:	e5 e3       	ldi	r30, 0x35	; 53
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	80 83       	st	Z, r24
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <GPIO_writePort+0x7a>
	    break;
	case PORTD_ID:
	    PORTD = value;
    10f8:	e2 e3       	ldi	r30, 0x32	; 50
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	80 83       	st	Z, r24
	    break;
	    }
	}
    }
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <GPIO_setupPinDirection>:
 * @param a_port The port ID (PORTA_ID, PORTB_ID, etc.)
 * @param a_pin The pin number on the port.
 * @param a_state The desired direction (PIN_INPUT, PIN_OUTPUT, PIN_INPUT_PULLUP).
 */
void GPIO_setupPinDirection(uint8 a_port, uint8 a_pin, uint8 a_state)
    {
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	2d 97       	sbiw	r28, 0x0d	; 13
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	6a 83       	std	Y+2, r22	; 0x02
    1126:	4b 83       	std	Y+3, r20	; 0x03
    switch (a_port)
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	3d 87       	std	Y+13, r19	; 0x0d
    1130:	2c 87       	std	Y+12, r18	; 0x0c
    1132:	8c 85       	ldd	r24, Y+12	; 0x0c
    1134:	9d 85       	ldd	r25, Y+13	; 0x0d
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	91 05       	cpc	r25, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <GPIO_setupPinDirection+0x30>
    113c:	7b c0       	rjmp	.+246    	; 0x1234 <GPIO_setupPinDirection+0x126>
    113e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1140:	3d 85       	ldd	r19, Y+13	; 0x0d
    1142:	22 30       	cpi	r18, 0x02	; 2
    1144:	31 05       	cpc	r19, r1
    1146:	2c f4       	brge	.+10     	; 0x1152 <GPIO_setupPinDirection+0x44>
    1148:	8c 85       	ldd	r24, Y+12	; 0x0c
    114a:	9d 85       	ldd	r25, Y+13	; 0x0d
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	71 f0       	breq	.+28     	; 0x116c <GPIO_setupPinDirection+0x5e>
    1150:	9c c1       	rjmp	.+824    	; 0x148a <GPIO_setupPinDirection+0x37c>
    1152:	2c 85       	ldd	r18, Y+12	; 0x0c
    1154:	3d 85       	ldd	r19, Y+13	; 0x0d
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	09 f4       	brne	.+2      	; 0x115e <GPIO_setupPinDirection+0x50>
    115c:	cf c0       	rjmp	.+414    	; 0x12fc <GPIO_setupPinDirection+0x1ee>
    115e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1160:	9d 85       	ldd	r25, Y+13	; 0x0d
    1162:	83 30       	cpi	r24, 0x03	; 3
    1164:	91 05       	cpc	r25, r1
    1166:	09 f4       	brne	.+2      	; 0x116a <GPIO_setupPinDirection+0x5c>
    1168:	2d c1       	rjmp	.+602    	; 0x13c4 <GPIO_setupPinDirection+0x2b6>
    116a:	8f c1       	rjmp	.+798    	; 0x148a <GPIO_setupPinDirection+0x37c>
	{
    case PORTA_ID:
	switch (a_state)
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	3b 87       	std	Y+11, r19	; 0x0b
    1174:	2a 87       	std	Y+10, r18	; 0x0a
    1176:	8a 85       	ldd	r24, Y+10	; 0x0a
    1178:	9b 85       	ldd	r25, Y+11	; 0x0b
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	91 05       	cpc	r25, r1
    117e:	f9 f0       	breq	.+62     	; 0x11be <GPIO_setupPinDirection+0xb0>
    1180:	2a 85       	ldd	r18, Y+10	; 0x0a
    1182:	3b 85       	ldd	r19, Y+11	; 0x0b
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	71 f1       	breq	.+92     	; 0x11e6 <GPIO_setupPinDirection+0xd8>
    118a:	8a 85       	ldd	r24, Y+10	; 0x0a
    118c:	9b 85       	ldd	r25, Y+11	; 0x0b
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	09 f0       	breq	.+2      	; 0x1194 <GPIO_setupPinDirection+0x86>
    1192:	7b c1       	rjmp	.+758    	; 0x148a <GPIO_setupPinDirection+0x37c>
	    {
	case PIN_INPUT:
	    CLEAR_BIT(DDRA, a_pin);
    1194:	aa e3       	ldi	r26, 0x3A	; 58
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ea e3       	ldi	r30, 0x3A	; 58
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <GPIO_setupPinDirection+0xa4>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <GPIO_setupPinDirection+0xa0>
    11b6:	80 95       	com	r24
    11b8:	84 23       	and	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	66 c1       	rjmp	.+716    	; 0x148a <GPIO_setupPinDirection+0x37c>
	    break;
	case PIN_OUTPUT:
	    SET_BIT(DDRA, a_pin);
    11be:	aa e3       	ldi	r26, 0x3A	; 58
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ea e3       	ldi	r30, 0x3A	; 58
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <GPIO_setupPinDirection+0xce>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <GPIO_setupPinDirection+0xca>
    11e0:	84 2b       	or	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	52 c1       	rjmp	.+676    	; 0x148a <GPIO_setupPinDirection+0x37c>
	    break;
	case PIN_INPUT_PULLUP:
	    CLEAR_BIT(DDRA, a_pin);
    11e6:	aa e3       	ldi	r26, 0x3A	; 58
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	ea e3       	ldi	r30, 0x3A	; 58
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <GPIO_setupPinDirection+0xf4>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	2a 95       	dec	r18
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <GPIO_setupPinDirection+0xf0>
    1206:	80 95       	com	r24
    1208:	84 23       	and	r24, r20
    120a:	8c 93       	st	X, r24
	    SET_BIT(PORTA, a_pin);
    120c:	ab e3       	ldi	r26, 0x3B	; 59
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	eb e3       	ldi	r30, 0x3B	; 59
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <GPIO_setupPinDirection+0x11c>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <GPIO_setupPinDirection+0x118>
    122e:	84 2b       	or	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	2b c1       	rjmp	.+598    	; 0x148a <GPIO_setupPinDirection+0x37c>
	    break;
	    }
	break;

    case PORTB_ID:
	switch (a_state)
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	39 87       	std	Y+9, r19	; 0x09
    123c:	28 87       	std	Y+8, r18	; 0x08
    123e:	88 85       	ldd	r24, Y+8	; 0x08
    1240:	99 85       	ldd	r25, Y+9	; 0x09
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	f9 f0       	breq	.+62     	; 0x1286 <GPIO_setupPinDirection+0x178>
    1248:	28 85       	ldd	r18, Y+8	; 0x08
    124a:	39 85       	ldd	r19, Y+9	; 0x09
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	31 05       	cpc	r19, r1
    1250:	71 f1       	breq	.+92     	; 0x12ae <GPIO_setupPinDirection+0x1a0>
    1252:	88 85       	ldd	r24, Y+8	; 0x08
    1254:	99 85       	ldd	r25, Y+9	; 0x09
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	09 f0       	breq	.+2      	; 0x125c <GPIO_setupPinDirection+0x14e>
    125a:	17 c1       	rjmp	.+558    	; 0x148a <GPIO_setupPinDirection+0x37c>
	    {
	case PIN_INPUT:
	    CLEAR_BIT(DDRB, a_pin);
    125c:	a7 e3       	ldi	r26, 0x37	; 55
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e7 e3       	ldi	r30, 0x37	; 55
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 2e       	mov	r0, r18
    1274:	02 c0       	rjmp	.+4      	; 0x127a <GPIO_setupPinDirection+0x16c>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	0a 94       	dec	r0
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <GPIO_setupPinDirection+0x168>
    127e:	80 95       	com	r24
    1280:	84 23       	and	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	02 c1       	rjmp	.+516    	; 0x148a <GPIO_setupPinDirection+0x37c>
	    break;
	case PIN_OUTPUT:
	    SET_BIT(DDRB, a_pin);
    1286:	a7 e3       	ldi	r26, 0x37	; 55
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e7 e3       	ldi	r30, 0x37	; 55
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <GPIO_setupPinDirection+0x196>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <GPIO_setupPinDirection+0x192>
    12a8:	84 2b       	or	r24, r20
    12aa:	8c 93       	st	X, r24
    12ac:	ee c0       	rjmp	.+476    	; 0x148a <GPIO_setupPinDirection+0x37c>
	    break;
	case PIN_INPUT_PULLUP:
	    CLEAR_BIT(DDRB, a_pin);
    12ae:	a7 e3       	ldi	r26, 0x37	; 55
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e7 e3       	ldi	r30, 0x37	; 55
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <GPIO_setupPinDirection+0x1bc>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	2a 95       	dec	r18
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <GPIO_setupPinDirection+0x1b8>
    12ce:	80 95       	com	r24
    12d0:	84 23       	and	r24, r20
    12d2:	8c 93       	st	X, r24
	    SET_BIT(PORTB, a_pin);
    12d4:	a8 e3       	ldi	r26, 0x38	; 56
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e8 e3       	ldi	r30, 0x38	; 56
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <GPIO_setupPinDirection+0x1e4>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <GPIO_setupPinDirection+0x1e0>
    12f6:	84 2b       	or	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	c7 c0       	rjmp	.+398    	; 0x148a <GPIO_setupPinDirection+0x37c>
	    break;
	    }
	break;

    case PORTC_ID:
	switch (a_state)
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	3f 83       	std	Y+7, r19	; 0x07
    1304:	2e 83       	std	Y+6, r18	; 0x06
    1306:	8e 81       	ldd	r24, Y+6	; 0x06
    1308:	9f 81       	ldd	r25, Y+7	; 0x07
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	91 05       	cpc	r25, r1
    130e:	f9 f0       	breq	.+62     	; 0x134e <GPIO_setupPinDirection+0x240>
    1310:	2e 81       	ldd	r18, Y+6	; 0x06
    1312:	3f 81       	ldd	r19, Y+7	; 0x07
    1314:	22 30       	cpi	r18, 0x02	; 2
    1316:	31 05       	cpc	r19, r1
    1318:	71 f1       	breq	.+92     	; 0x1376 <GPIO_setupPinDirection+0x268>
    131a:	8e 81       	ldd	r24, Y+6	; 0x06
    131c:	9f 81       	ldd	r25, Y+7	; 0x07
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	09 f0       	breq	.+2      	; 0x1324 <GPIO_setupPinDirection+0x216>
    1322:	b3 c0       	rjmp	.+358    	; 0x148a <GPIO_setupPinDirection+0x37c>
	    {
	case PIN_INPUT:
	    CLEAR_BIT(DDRC, a_pin);
    1324:	a4 e3       	ldi	r26, 0x34	; 52
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e4 e3       	ldi	r30, 0x34	; 52
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <GPIO_setupPinDirection+0x234>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <GPIO_setupPinDirection+0x230>
    1346:	80 95       	com	r24
    1348:	84 23       	and	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	9e c0       	rjmp	.+316    	; 0x148a <GPIO_setupPinDirection+0x37c>
	    break;
	case PIN_OUTPUT:
	    SET_BIT(DDRC, a_pin);
    134e:	a4 e3       	ldi	r26, 0x34	; 52
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e4 e3       	ldi	r30, 0x34	; 52
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <GPIO_setupPinDirection+0x25e>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <GPIO_setupPinDirection+0x25a>
    1370:	84 2b       	or	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	8a c0       	rjmp	.+276    	; 0x148a <GPIO_setupPinDirection+0x37c>
	    break;
	case PIN_INPUT_PULLUP:
	    CLEAR_BIT(DDRC, a_pin);
    1376:	a4 e3       	ldi	r26, 0x34	; 52
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e4 e3       	ldi	r30, 0x34	; 52
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <GPIO_setupPinDirection+0x284>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	2a 95       	dec	r18
    1394:	e2 f7       	brpl	.-8      	; 0x138e <GPIO_setupPinDirection+0x280>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
	    SET_BIT(PORTC, a_pin);
    139c:	a5 e3       	ldi	r26, 0x35	; 53
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e5 e3       	ldi	r30, 0x35	; 53
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <GPIO_setupPinDirection+0x2ac>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <GPIO_setupPinDirection+0x2a8>
    13be:	84 2b       	or	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	63 c0       	rjmp	.+198    	; 0x148a <GPIO_setupPinDirection+0x37c>
	    break;
	    }
	break;

    case PORTD_ID:
	switch (a_state)
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3d 83       	std	Y+5, r19	; 0x05
    13cc:	2c 83       	std	Y+4, r18	; 0x04
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	9d 81       	ldd	r25, Y+5	; 0x05
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	91 05       	cpc	r25, r1
    13d6:	f9 f0       	breq	.+62     	; 0x1416 <GPIO_setupPinDirection+0x308>
    13d8:	2c 81       	ldd	r18, Y+4	; 0x04
    13da:	3d 81       	ldd	r19, Y+5	; 0x05
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	71 f1       	breq	.+92     	; 0x143e <GPIO_setupPinDirection+0x330>
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	09 f0       	breq	.+2      	; 0x13ec <GPIO_setupPinDirection+0x2de>
    13ea:	4f c0       	rjmp	.+158    	; 0x148a <GPIO_setupPinDirection+0x37c>
	    {
	case PIN_INPUT:
	    CLEAR_BIT(DDRD, a_pin);
    13ec:	a1 e3       	ldi	r26, 0x31	; 49
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e1 e3       	ldi	r30, 0x31	; 49
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <GPIO_setupPinDirection+0x2fc>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <GPIO_setupPinDirection+0x2f8>
    140e:	80 95       	com	r24
    1410:	84 23       	and	r24, r20
    1412:	8c 93       	st	X, r24
    1414:	3a c0       	rjmp	.+116    	; 0x148a <GPIO_setupPinDirection+0x37c>
	    break;
	case PIN_OUTPUT:
	    SET_BIT(DDRD, a_pin);
    1416:	a1 e3       	ldi	r26, 0x31	; 49
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e1 e3       	ldi	r30, 0x31	; 49
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	48 2f       	mov	r20, r24
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 2e       	mov	r0, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <GPIO_setupPinDirection+0x326>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	0a 94       	dec	r0
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <GPIO_setupPinDirection+0x322>
    1438:	84 2b       	or	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	26 c0       	rjmp	.+76     	; 0x148a <GPIO_setupPinDirection+0x37c>
	    break;
	case PIN_INPUT_PULLUP:
	    CLEAR_BIT(DDRD, a_pin);
    143e:	a1 e3       	ldi	r26, 0x31	; 49
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e1 e3       	ldi	r30, 0x31	; 49
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 c0       	rjmp	.+4      	; 0x145a <GPIO_setupPinDirection+0x34c>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	2a 95       	dec	r18
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <GPIO_setupPinDirection+0x348>
    145e:	80 95       	com	r24
    1460:	84 23       	and	r24, r20
    1462:	8c 93       	st	X, r24
	    SET_BIT(PORTD, a_pin);
    1464:	a2 e3       	ldi	r26, 0x32	; 50
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e2 e3       	ldi	r30, 0x32	; 50
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <GPIO_setupPinDirection+0x374>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <GPIO_setupPinDirection+0x370>
    1486:	84 2b       	or	r24, r20
    1488:	8c 93       	st	X, r24
	    break;
	    }
	break;
	}
    }
    148a:	2d 96       	adiw	r28, 0x0d	; 13
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <GPIO_writePin>:
 * @param a_port The port ID (PORTA_ID, PORTB_ID, etc.)
 * @param a_pin The pin number on the port.
 * @param a_state The desired state (HIGH or LOW).
 */
void GPIO_writePin(uint8 a_port, uint8 a_pin, uint8 a_state)
    {
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <GPIO_writePin+0x6>
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <GPIO_writePin+0x8>
    14a4:	0f 92       	push	r0
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	6a 83       	std	Y+2, r22	; 0x02
    14ae:	4b 83       	std	Y+3, r20	; 0x03
    switch (a_port)
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3d 83       	std	Y+5, r19	; 0x05
    14b8:	2c 83       	std	Y+4, r18	; 0x04
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	9d 81       	ldd	r25, Y+5	; 0x05
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	91 05       	cpc	r25, r1
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <GPIO_writePin+0x2a>
    14c4:	43 c0       	rjmp	.+134    	; 0x154c <GPIO_writePin+0xb0>
    14c6:	2c 81       	ldd	r18, Y+4	; 0x04
    14c8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	2c f4       	brge	.+10     	; 0x14da <GPIO_writePin+0x3e>
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	71 f0       	breq	.+28     	; 0x14f4 <GPIO_writePin+0x58>
    14d8:	bc c0       	rjmp	.+376    	; 0x1652 <GPIO_writePin+0x1b6>
    14da:	2c 81       	ldd	r18, Y+4	; 0x04
    14dc:	3d 81       	ldd	r19, Y+5	; 0x05
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <GPIO_writePin+0x4a>
    14e4:	5f c0       	rjmp	.+190    	; 0x15a4 <GPIO_writePin+0x108>
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ea:	83 30       	cpi	r24, 0x03	; 3
    14ec:	91 05       	cpc	r25, r1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <GPIO_writePin+0x56>
    14f0:	85 c0       	rjmp	.+266    	; 0x15fc <GPIO_writePin+0x160>
    14f2:	af c0       	rjmp	.+350    	; 0x1652 <GPIO_writePin+0x1b6>
	{
    case PORTA_ID:
	if (a_state == LOW)
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	88 23       	and	r24, r24
    14f8:	a9 f4       	brne	.+42     	; 0x1524 <GPIO_writePin+0x88>
	    {
	    CLEAR_BIT(PORTA, a_pin);
    14fa:	ab e3       	ldi	r26, 0x3B	; 59
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	eb e3       	ldi	r30, 0x3B	; 59
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	48 2f       	mov	r20, r24
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 2e       	mov	r0, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <GPIO_writePin+0x7c>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <GPIO_writePin+0x78>
    151c:	80 95       	com	r24
    151e:	84 23       	and	r24, r20
    1520:	8c 93       	st	X, r24
    1522:	97 c0       	rjmp	.+302    	; 0x1652 <GPIO_writePin+0x1b6>
	    }
	else
	    {
	    SET_BIT(PORTA, a_pin);
    1524:	ab e3       	ldi	r26, 0x3B	; 59
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	eb e3       	ldi	r30, 0x3B	; 59
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <GPIO_writePin+0xa6>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <GPIO_writePin+0xa2>
    1546:	84 2b       	or	r24, r20
    1548:	8c 93       	st	X, r24
    154a:	83 c0       	rjmp	.+262    	; 0x1652 <GPIO_writePin+0x1b6>
	    }
	break;

    case PORTB_ID:
	if (a_state == LOW)
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	88 23       	and	r24, r24
    1550:	a9 f4       	brne	.+42     	; 0x157c <GPIO_writePin+0xe0>
	    {
	    CLEAR_BIT(PORTB, a_pin);
    1552:	a8 e3       	ldi	r26, 0x38	; 56
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e8 e3       	ldi	r30, 0x38	; 56
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <GPIO_writePin+0xd4>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <GPIO_writePin+0xd0>
    1574:	80 95       	com	r24
    1576:	84 23       	and	r24, r20
    1578:	8c 93       	st	X, r24
    157a:	6b c0       	rjmp	.+214    	; 0x1652 <GPIO_writePin+0x1b6>
	    }
	else
	    {
	    SET_BIT(PORTB, a_pin);
    157c:	a8 e3       	ldi	r26, 0x38	; 56
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e8 e3       	ldi	r30, 0x38	; 56
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <GPIO_writePin+0xfe>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <GPIO_writePin+0xfa>
    159e:	84 2b       	or	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	57 c0       	rjmp	.+174    	; 0x1652 <GPIO_writePin+0x1b6>
	    }
	break;

    case PORTC_ID:
	if (a_state == LOW)
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	88 23       	and	r24, r24
    15a8:	a9 f4       	brne	.+42     	; 0x15d4 <GPIO_writePin+0x138>
	    {
	    CLEAR_BIT(PORTC, a_pin);
    15aa:	a5 e3       	ldi	r26, 0x35	; 53
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e5 e3       	ldi	r30, 0x35	; 53
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <GPIO_writePin+0x12c>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <GPIO_writePin+0x128>
    15cc:	80 95       	com	r24
    15ce:	84 23       	and	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	3f c0       	rjmp	.+126    	; 0x1652 <GPIO_writePin+0x1b6>
	    }
	else
	    {
	    SET_BIT(PORTC, a_pin);
    15d4:	a5 e3       	ldi	r26, 0x35	; 53
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e5 e3       	ldi	r30, 0x35	; 53
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <GPIO_writePin+0x156>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <GPIO_writePin+0x152>
    15f6:	84 2b       	or	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	2b c0       	rjmp	.+86     	; 0x1652 <GPIO_writePin+0x1b6>
	    }
	break;

    case PORTD_ID:
	if (a_state == LOW)
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	88 23       	and	r24, r24
    1600:	a9 f4       	brne	.+42     	; 0x162c <GPIO_writePin+0x190>
	    {
	    CLEAR_BIT(PORTD, a_pin);
    1602:	a2 e3       	ldi	r26, 0x32	; 50
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e2 e3       	ldi	r30, 0x32	; 50
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	48 2f       	mov	r20, r24
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 2e       	mov	r0, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <GPIO_writePin+0x184>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <GPIO_writePin+0x180>
    1624:	80 95       	com	r24
    1626:	84 23       	and	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	13 c0       	rjmp	.+38     	; 0x1652 <GPIO_writePin+0x1b6>
	    }
	else
	    {
	    SET_BIT(PORTD, a_pin);
    162c:	a2 e3       	ldi	r26, 0x32	; 50
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e2 e3       	ldi	r30, 0x32	; 50
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 2e       	mov	r0, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <GPIO_writePin+0x1ae>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <GPIO_writePin+0x1aa>
    164e:	84 2b       	or	r24, r20
    1650:	8c 93       	st	X, r24
	    }
	break;
	}
    }
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <GPIO_tooglePin>:
 *
 * @param a_port The port ID (PORTA_ID, PORTB_ID, etc.)
 * @param pin The pin number on the port.
 */
void GPIO_tooglePin(uint8 a_port, uint8 pin)
    {
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	00 d0       	rcall	.+0      	; 0x1668 <GPIO_tooglePin+0x6>
    1668:	00 d0       	rcall	.+0      	; 0x166a <GPIO_tooglePin+0x8>
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	6a 83       	std	Y+2, r22	; 0x02
    switch (a_port)
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	3c 83       	std	Y+4, r19	; 0x04
    167a:	2b 83       	std	Y+3, r18	; 0x03
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	91 05       	cpc	r25, r1
    1684:	49 f1       	breq	.+82     	; 0x16d8 <GPIO_tooglePin+0x76>
    1686:	2b 81       	ldd	r18, Y+3	; 0x03
    1688:	3c 81       	ldd	r19, Y+4	; 0x04
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	2c f4       	brge	.+10     	; 0x169a <GPIO_tooglePin+0x38>
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	61 f0       	breq	.+24     	; 0x16b0 <GPIO_tooglePin+0x4e>
    1698:	5a c0       	rjmp	.+180    	; 0x174e <GPIO_tooglePin+0xec>
    169a:	2b 81       	ldd	r18, Y+3	; 0x03
    169c:	3c 81       	ldd	r19, Y+4	; 0x04
    169e:	22 30       	cpi	r18, 0x02	; 2
    16a0:	31 05       	cpc	r19, r1
    16a2:	71 f1       	breq	.+92     	; 0x1700 <GPIO_tooglePin+0x9e>
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	9c 81       	ldd	r25, Y+4	; 0x04
    16a8:	83 30       	cpi	r24, 0x03	; 3
    16aa:	91 05       	cpc	r25, r1
    16ac:	e9 f1       	breq	.+122    	; 0x1728 <GPIO_tooglePin+0xc6>
    16ae:	4f c0       	rjmp	.+158    	; 0x174e <GPIO_tooglePin+0xec>
	{
    case PORTA_ID:
	TOGGLE_BIT(PORTA, pin);
    16b0:	ab e3       	ldi	r26, 0x3B	; 59
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	eb e3       	ldi	r30, 0x3B	; 59
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <GPIO_tooglePin+0x6c>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <GPIO_tooglePin+0x68>
    16d2:	84 27       	eor	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	3b c0       	rjmp	.+118    	; 0x174e <GPIO_tooglePin+0xec>
	break;
    case PORTB_ID:
	TOGGLE_BIT(PORTB, pin);
    16d8:	a8 e3       	ldi	r26, 0x38	; 56
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e8 e3       	ldi	r30, 0x38	; 56
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <GPIO_tooglePin+0x94>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <GPIO_tooglePin+0x90>
    16fa:	84 27       	eor	r24, r20
    16fc:	8c 93       	st	X, r24
    16fe:	27 c0       	rjmp	.+78     	; 0x174e <GPIO_tooglePin+0xec>
	break;
    case PORTC_ID:
	TOGGLE_BIT(PORTC, pin);
    1700:	a5 e3       	ldi	r26, 0x35	; 53
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e5 e3       	ldi	r30, 0x35	; 53
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <GPIO_tooglePin+0xbc>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <GPIO_tooglePin+0xb8>
    1722:	84 27       	eor	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	13 c0       	rjmp	.+38     	; 0x174e <GPIO_tooglePin+0xec>
	break;
    case PORTD_ID:
	TOGGLE_BIT(PORTD, pin);
    1728:	a2 e3       	ldi	r26, 0x32	; 50
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e2 e3       	ldi	r30, 0x32	; 50
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <GPIO_tooglePin+0xe4>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <GPIO_tooglePin+0xe0>
    174a:	84 27       	eor	r24, r20
    174c:	8c 93       	st	X, r24
	break;
	}
    }
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <GPIO_readPin>:
 * @param a_port The port ID (PORTA_ID, PORTB_ID, etc.)
 * @param pin The pin number on the port.
 * @return The current state of the pin (1 for HIGH, 0 for LOW).
 */
uint8 GPIO_readPin(uint8 a_port, uint8 pin)
    {
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	00 d0       	rcall	.+0      	; 0x1762 <GPIO_readPin+0x6>
    1762:	00 d0       	rcall	.+0      	; 0x1764 <GPIO_readPin+0x8>
    1764:	0f 92       	push	r0
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	6a 83       	std	Y+2, r22	; 0x02
    switch (a_port)
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	3d 83       	std	Y+5, r19	; 0x05
    1776:	2c 83       	std	Y+4, r18	; 0x04
    1778:	4c 81       	ldd	r20, Y+4	; 0x04
    177a:	5d 81       	ldd	r21, Y+5	; 0x05
    177c:	41 30       	cpi	r20, 0x01	; 1
    177e:	51 05       	cpc	r21, r1
    1780:	b1 f1       	breq	.+108    	; 0x17ee <GPIO_readPin+0x92>
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	9d 81       	ldd	r25, Y+5	; 0x05
    1786:	82 30       	cpi	r24, 0x02	; 2
    1788:	91 05       	cpc	r25, r1
    178a:	34 f4       	brge	.+12     	; 0x1798 <GPIO_readPin+0x3c>
    178c:	2c 81       	ldd	r18, Y+4	; 0x04
    178e:	3d 81       	ldd	r19, Y+5	; 0x05
    1790:	21 15       	cp	r18, r1
    1792:	31 05       	cpc	r19, r1
    1794:	71 f0       	breq	.+28     	; 0x17b2 <GPIO_readPin+0x56>
    1796:	85 c0       	rjmp	.+266    	; 0x18a2 <GPIO_readPin+0x146>
    1798:	4c 81       	ldd	r20, Y+4	; 0x04
    179a:	5d 81       	ldd	r21, Y+5	; 0x05
    179c:	42 30       	cpi	r20, 0x02	; 2
    179e:	51 05       	cpc	r21, r1
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <GPIO_readPin+0x48>
    17a2:	43 c0       	rjmp	.+134    	; 0x182a <GPIO_readPin+0xce>
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	9d 81       	ldd	r25, Y+5	; 0x05
    17a8:	83 30       	cpi	r24, 0x03	; 3
    17aa:	91 05       	cpc	r25, r1
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <GPIO_readPin+0x54>
    17ae:	5b c0       	rjmp	.+182    	; 0x1866 <GPIO_readPin+0x10a>
    17b0:	78 c0       	rjmp	.+240    	; 0x18a2 <GPIO_readPin+0x146>
	{
    case PORTA_ID:
	return GET_BIT(PINA, pin);
    17b2:	e9 e3       	ldi	r30, 0x39	; 57
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <GPIO_readPin+0x70>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	2a 95       	dec	r18
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <GPIO_readPin+0x6c>
    17d0:	9a 01       	movw	r18, r20
    17d2:	28 23       	and	r18, r24
    17d4:	39 23       	and	r19, r25
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a9 01       	movw	r20, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <GPIO_readPin+0x88>
    17e0:	55 95       	asr	r21
    17e2:	47 95       	ror	r20
    17e4:	8a 95       	dec	r24
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <GPIO_readPin+0x84>
    17e8:	ca 01       	movw	r24, r20
    17ea:	8b 83       	std	Y+3, r24	; 0x03
    17ec:	5b c0       	rjmp	.+182    	; 0x18a4 <GPIO_readPin+0x148>
    case PORTB_ID:
	return GET_BIT(PINB, pin);
    17ee:	e6 e3       	ldi	r30, 0x36	; 54
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	48 2f       	mov	r20, r24
    17f6:	50 e0       	ldi	r21, 0x00	; 0
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <GPIO_readPin+0xac>
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	2a 95       	dec	r18
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <GPIO_readPin+0xa8>
    180c:	9a 01       	movw	r18, r20
    180e:	28 23       	and	r18, r24
    1810:	39 23       	and	r19, r25
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a9 01       	movw	r20, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <GPIO_readPin+0xc4>
    181c:	55 95       	asr	r21
    181e:	47 95       	ror	r20
    1820:	8a 95       	dec	r24
    1822:	e2 f7       	brpl	.-8      	; 0x181c <GPIO_readPin+0xc0>
    1824:	ca 01       	movw	r24, r20
    1826:	8b 83       	std	Y+3, r24	; 0x03
    1828:	3d c0       	rjmp	.+122    	; 0x18a4 <GPIO_readPin+0x148>
    case PORTC_ID:
	return GET_BIT(PINC, pin);
    182a:	e3 e3       	ldi	r30, 0x33	; 51
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	48 2f       	mov	r20, r24
    1832:	50 e0       	ldi	r21, 0x00	; 0
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <GPIO_readPin+0xe8>
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	2a 95       	dec	r18
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <GPIO_readPin+0xe4>
    1848:	9a 01       	movw	r18, r20
    184a:	28 23       	and	r18, r24
    184c:	39 23       	and	r19, r25
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	88 2f       	mov	r24, r24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	a9 01       	movw	r20, r18
    1856:	02 c0       	rjmp	.+4      	; 0x185c <GPIO_readPin+0x100>
    1858:	55 95       	asr	r21
    185a:	47 95       	ror	r20
    185c:	8a 95       	dec	r24
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <GPIO_readPin+0xfc>
    1860:	ca 01       	movw	r24, r20
    1862:	8b 83       	std	Y+3, r24	; 0x03
    1864:	1f c0       	rjmp	.+62     	; 0x18a4 <GPIO_readPin+0x148>
    case PORTD_ID:
	return GET_BIT(PIND, pin);
    1866:	e0 e3       	ldi	r30, 0x30	; 48
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <GPIO_readPin+0x124>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	2a 95       	dec	r18
    1882:	e2 f7       	brpl	.-8      	; 0x187c <GPIO_readPin+0x120>
    1884:	9a 01       	movw	r18, r20
    1886:	28 23       	and	r18, r24
    1888:	39 23       	and	r19, r25
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	88 2f       	mov	r24, r24
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a9 01       	movw	r20, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <GPIO_readPin+0x13c>
    1894:	55 95       	asr	r21
    1896:	47 95       	ror	r20
    1898:	8a 95       	dec	r24
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <GPIO_readPin+0x138>
    189c:	ca 01       	movw	r24, r20
    189e:	8b 83       	std	Y+3, r24	; 0x03
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <GPIO_readPin+0x148>
    default:
	return 0;
    18a2:	1b 82       	std	Y+3, r1	; 0x03
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    }
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <GPIO_ARR_setPinState>:
 *
 * @param a_pin The index of the pin in the `ioPins` array stored in flash memory.
 * @param a_value The desired state (HIGH or LOW).
 */
void GPIO_ARR_setPinState(uint8 a_pin, uint8 a_value)
    {
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	28 97       	sbiw	r28, 0x08	; 8
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	8f 83       	std	Y+7, r24	; 0x07
    18cc:	68 87       	std	Y+8, r22	; 0x08
    if (a_pin > NUM_OF_PINS)
    18ce:	8f 81       	ldd	r24, Y+7	; 0x07
    18d0:	81 32       	cpi	r24, 0x21	; 33
    18d2:	08 f0       	brcs	.+2      	; 0x18d6 <GPIO_ARR_setPinState+0x20>
    18d4:	55 c0       	rjmp	.+170    	; 0x1980 <GPIO_ARR_setPinState+0xca>
	return;
    volatile uint8 *port = (volatile uint8*) PGM_readPtrToRam(
	    (uint16) (&ioPins[a_pin].port_addr));
    18d6:	8f 81       	ldd	r24, Y+7	; 0x07
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	c9 01       	movw	r24, r18
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	82 1b       	sub	r24, r18
    18ec:	93 0b       	sbc	r25, r19
    18ee:	02 96       	adiw	r24, 0x02	; 2
    18f0:	8c 5a       	subi	r24, 0xAC	; 172
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <PGM_readPtrToRam>
    18f8:	9e 83       	std	Y+6, r25	; 0x06
    18fa:	8d 83       	std	Y+5, r24	; 0x05
    uint8 pin = pgm_read_byte(&(ioPins[a_pin].pin));
    18fc:	8f 81       	ldd	r24, Y+7	; 0x07
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	c9 01       	movw	r24, r18
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	82 1b       	sub	r24, r18
    1912:	93 0b       	sbc	r25, r19
    1914:	06 96       	adiw	r24, 0x06	; 6
    1916:	8c 5a       	subi	r24, 0xAC	; 172
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	9b 83       	std	Y+3, r25	; 0x03
    191c:	8a 83       	std	Y+2, r24	; 0x02
    191e:	ea 81       	ldd	r30, Y+2	; 0x02
    1920:	fb 81       	ldd	r31, Y+3	; 0x03
    1922:	84 91       	lpm	r24, Z+
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	8c 83       	std	Y+4, r24	; 0x04

    if (a_value == HIGH)
    192a:	88 85       	ldd	r24, Y+8	; 0x08
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	a1 f4       	brne	.+40     	; 0x1958 <GPIO_ARR_setPinState+0xa2>
	{
	SET_BIT(*port, pin);
    1930:	ed 81       	ldd	r30, Y+5	; 0x05
    1932:	fe 81       	ldd	r31, Y+6	; 0x06
    1934:	80 81       	ld	r24, Z
    1936:	48 2f       	mov	r20, r24
    1938:	8c 81       	ldd	r24, Y+4	; 0x04
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	02 2e       	mov	r0, r18
    1944:	02 c0       	rjmp	.+4      	; 0x194a <GPIO_ARR_setPinState+0x94>
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	0a 94       	dec	r0
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <GPIO_ARR_setPinState+0x90>
    194e:	84 2b       	or	r24, r20
    1950:	ed 81       	ldd	r30, Y+5	; 0x05
    1952:	fe 81       	ldd	r31, Y+6	; 0x06
    1954:	80 83       	st	Z, r24
    1956:	14 c0       	rjmp	.+40     	; 0x1980 <GPIO_ARR_setPinState+0xca>
	}
    else
	{
	CLEAR_BIT(*port, pin);
    1958:	ed 81       	ldd	r30, Y+5	; 0x05
    195a:	fe 81       	ldd	r31, Y+6	; 0x06
    195c:	80 81       	ld	r24, Z
    195e:	48 2f       	mov	r20, r24
    1960:	8c 81       	ldd	r24, Y+4	; 0x04
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	02 2e       	mov	r0, r18
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <GPIO_ARR_setPinState+0xbc>
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	0a 94       	dec	r0
    1974:	e2 f7       	brpl	.-8      	; 0x196e <GPIO_ARR_setPinState+0xb8>
    1976:	80 95       	com	r24
    1978:	84 23       	and	r24, r20
    197a:	ed 81       	ldd	r30, Y+5	; 0x05
    197c:	fe 81       	ldd	r31, Y+6	; 0x06
    197e:	80 83       	st	Z, r24
	}
    }
    1980:	28 96       	adiw	r28, 0x08	; 8
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <GPIO_ARR_setPinDirection>:
 *
 * @param a_pin The index of the pin in the `ioPins` array stored in flash memory.
 * @param a_state The desired direction (PIN_INPUT, PIN_OUTPUT, PIN_INPUT_PULLUP).
 */
void GPIO_ARR_setPinDirection(uint8 a_pin, uint8 a_state)
    {
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	2a 97       	sbiw	r28, 0x0a	; 10
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	89 87       	std	Y+9, r24	; 0x09
    19a8:	6a 87       	std	Y+10, r22	; 0x0a
    if (a_pin > NUM_OF_PINS)
    19aa:	89 85       	ldd	r24, Y+9	; 0x09
    19ac:	81 32       	cpi	r24, 0x21	; 33
    19ae:	08 f0       	brcs	.+2      	; 0x19b2 <GPIO_ARR_setPinDirection+0x20>
    19b0:	95 c0       	rjmp	.+298    	; 0x1adc <GPIO_ARR_setPinDirection+0x14a>
	return;
    volatile uint8 *ddr = (volatile uint8*) PGM_readPtrToRam(
	    (uint16) (&ioPins[a_pin].ddr_addr));
    19b2:	89 85       	ldd	r24, Y+9	; 0x09
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	c9 01       	movw	r24, r18
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	82 1b       	sub	r24, r18
    19c8:	93 0b       	sbc	r25, r19
    19ca:	04 96       	adiw	r24, 0x04	; 4
    19cc:	8c 5a       	subi	r24, 0xAC	; 172
    19ce:	9f 4f       	sbci	r25, 0xFF	; 255
    19d0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <PGM_readPtrToRam>
    19d4:	98 87       	std	Y+8, r25	; 0x08
    19d6:	8f 83       	std	Y+7, r24	; 0x07
    volatile uint8 *port = (volatile uint8*) PGM_readPtrToRam(
	    (uint16) (&ioPins[a_pin].port_addr));
    19d8:	89 85       	ldd	r24, Y+9	; 0x09
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	c9 01       	movw	r24, r18
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	82 1b       	sub	r24, r18
    19ee:	93 0b       	sbc	r25, r19
    19f0:	02 96       	adiw	r24, 0x02	; 2
    19f2:	8c 5a       	subi	r24, 0xAC	; 172
    19f4:	9f 4f       	sbci	r25, 0xFF	; 255
    19f6:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <PGM_readPtrToRam>
    19fa:	9e 83       	std	Y+6, r25	; 0x06
    19fc:	8d 83       	std	Y+5, r24	; 0x05
    uint8 pin = pgm_read_byte(&(ioPins[a_pin].pin));
    19fe:	89 85       	ldd	r24, Y+9	; 0x09
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	c9 01       	movw	r24, r18
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	82 1b       	sub	r24, r18
    1a14:	93 0b       	sbc	r25, r19
    1a16:	06 96       	adiw	r24, 0x06	; 6
    1a18:	8c 5a       	subi	r24, 0xAC	; 172
    1a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1c:	9b 83       	std	Y+3, r25	; 0x03
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
    1a20:	ea 81       	ldd	r30, Y+2	; 0x02
    1a22:	fb 81       	ldd	r31, Y+3	; 0x03
    1a24:	84 91       	lpm	r24, Z+
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	8c 83       	std	Y+4, r24	; 0x04

    if (a_state == PIN_INPUT)
    1a2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a2e:	88 23       	and	r24, r24
    1a30:	a9 f4       	brne	.+42     	; 0x1a5c <GPIO_ARR_setPinDirection+0xca>
	{
	CLEAR_BIT(*ddr, pin);
    1a32:	ef 81       	ldd	r30, Y+7	; 0x07
    1a34:	f8 85       	ldd	r31, Y+8	; 0x08
    1a36:	80 81       	ld	r24, Z
    1a38:	48 2f       	mov	r20, r24
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	02 2e       	mov	r0, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <GPIO_ARR_setPinDirection+0xba>
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	0a 94       	dec	r0
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <GPIO_ARR_setPinDirection+0xb6>
    1a50:	80 95       	com	r24
    1a52:	84 23       	and	r24, r20
    1a54:	ef 81       	ldd	r30, Y+7	; 0x07
    1a56:	f8 85       	ldd	r31, Y+8	; 0x08
    1a58:	80 83       	st	Z, r24
    1a5a:	40 c0       	rjmp	.+128    	; 0x1adc <GPIO_ARR_setPinDirection+0x14a>
	}
    else if (a_state == PIN_OUTPUT)
    1a5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	a1 f4       	brne	.+40     	; 0x1a8a <GPIO_ARR_setPinDirection+0xf8>
	{
	SET_BIT(*ddr, pin);
    1a62:	ef 81       	ldd	r30, Y+7	; 0x07
    1a64:	f8 85       	ldd	r31, Y+8	; 0x08
    1a66:	80 81       	ld	r24, Z
    1a68:	48 2f       	mov	r20, r24
    1a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	02 2e       	mov	r0, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <GPIO_ARR_setPinDirection+0xea>
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	0a 94       	dec	r0
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <GPIO_ARR_setPinDirection+0xe6>
    1a80:	84 2b       	or	r24, r20
    1a82:	ef 81       	ldd	r30, Y+7	; 0x07
    1a84:	f8 85       	ldd	r31, Y+8	; 0x08
    1a86:	80 83       	st	Z, r24
    1a88:	29 c0       	rjmp	.+82     	; 0x1adc <GPIO_ARR_setPinDirection+0x14a>
	}
    else if (a_state == PIN_INPUT_PULLUP)
    1a8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a8c:	82 30       	cpi	r24, 0x02	; 2
    1a8e:	31 f5       	brne	.+76     	; 0x1adc <GPIO_ARR_setPinDirection+0x14a>
	{
	CLEAR_BIT(*ddr, pin);
    1a90:	ef 81       	ldd	r30, Y+7	; 0x07
    1a92:	f8 85       	ldd	r31, Y+8	; 0x08
    1a94:	80 81       	ld	r24, Z
    1a96:	48 2f       	mov	r20, r24
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <GPIO_ARR_setPinDirection+0x116>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	2a 95       	dec	r18
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <GPIO_ARR_setPinDirection+0x112>
    1aac:	80 95       	com	r24
    1aae:	84 23       	and	r24, r20
    1ab0:	ef 81       	ldd	r30, Y+7	; 0x07
    1ab2:	f8 85       	ldd	r31, Y+8	; 0x08
    1ab4:	80 83       	st	Z, r24
	SET_BIT(*port, pin);
    1ab6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ab8:	fe 81       	ldd	r31, Y+6	; 0x06
    1aba:	80 81       	ld	r24, Z
    1abc:	48 2f       	mov	r20, r24
    1abe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	02 2e       	mov	r0, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <GPIO_ARR_setPinDirection+0x13e>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	0a 94       	dec	r0
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <GPIO_ARR_setPinDirection+0x13a>
    1ad4:	84 2b       	or	r24, r20
    1ad6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ad8:	fe 81       	ldd	r31, Y+6	; 0x06
    1ada:	80 83       	st	Z, r24
	}
    }
    1adc:	2a 96       	adiw	r28, 0x0a	; 10
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <GPIO_ARR_readPin>:
 *
 * @param a_pin The index of the pin in the `ioPins` array stored in flash memory.
 * @return The current state of the pin (1 for HIGH, 0 for LOW).
 */
uint8 GPIO_ARR_readPin(uint8 a_pin)
    {
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	28 97       	sbiw	r28, 0x08	; 8
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	8f 83       	std	Y+7, r24	; 0x07
    if (a_pin > NUM_OF_PINS)
    1b04:	8f 81       	ldd	r24, Y+7	; 0x07
    1b06:	81 32       	cpi	r24, 0x21	; 33
    1b08:	10 f0       	brcs	.+4      	; 0x1b0e <GPIO_ARR_readPin+0x20>
	return 0;
    1b0a:	18 86       	std	Y+8, r1	; 0x08
    1b0c:	46 c0       	rjmp	.+140    	; 0x1b9a <GPIO_ARR_readPin+0xac>
    volatile uint8 *pin_addr = (volatile uint8*) PGM_readPtrToRam(
	    (uint16) (&ioPins[a_pin].pin_addr));
    1b0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	c9 01       	movw	r24, r18
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	82 1b       	sub	r24, r18
    1b24:	93 0b       	sbc	r25, r19
    1b26:	8c 5a       	subi	r24, 0xAC	; 172
    1b28:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <PGM_readPtrToRam>
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
    uint8 pin = pgm_read_byte(&(ioPins[a_pin].pin));
    1b32:	8f 81       	ldd	r24, Y+7	; 0x07
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	c9 01       	movw	r24, r18
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	82 1b       	sub	r24, r18
    1b48:	93 0b       	sbc	r25, r19
    1b4a:	06 96       	adiw	r24, 0x06	; 6
    1b4c:	8c 5a       	subi	r24, 0xAC	; 172
    1b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b50:	9b 83       	std	Y+3, r25	; 0x03
    1b52:	8a 83       	std	Y+2, r24	; 0x02
    1b54:	ea 81       	ldd	r30, Y+2	; 0x02
    1b56:	fb 81       	ldd	r31, Y+3	; 0x03
    1b58:	84 91       	lpm	r24, Z+
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	8c 83       	std	Y+4, r24	; 0x04
    return GET_BIT(*pin_addr, pin);
    1b60:	ed 81       	ldd	r30, Y+5	; 0x05
    1b62:	fe 81       	ldd	r31, Y+6	; 0x06
    1b64:	80 81       	ld	r24, Z
    1b66:	48 2f       	mov	r20, r24
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <GPIO_ARR_readPin+0x8c>
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	2a 95       	dec	r18
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <GPIO_ARR_readPin+0x88>
    1b7e:	9a 01       	movw	r18, r20
    1b80:	28 23       	and	r18, r24
    1b82:	39 23       	and	r19, r25
    1b84:	8c 81       	ldd	r24, Y+4	; 0x04
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a9 01       	movw	r20, r18
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <GPIO_ARR_readPin+0xa4>
    1b8e:	55 95       	asr	r21
    1b90:	47 95       	ror	r20
    1b92:	8a 95       	dec	r24
    1b94:	e2 f7       	brpl	.-8      	; 0x1b8e <GPIO_ARR_readPin+0xa0>
    1b96:	ca 01       	movw	r24, r20
    1b98:	88 87       	std	Y+8, r24	; 0x08
    1b9a:	88 85       	ldd	r24, Y+8	; 0x08
    }
    1b9c:	28 96       	adiw	r28, 0x08	; 8
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <Timer0_init>:
 * The configuration parameters are passed via a pointer to a `Timer0_Config`
 * structure, which should be properly initialized before calling this function.
 *
 * @param a_timerConfig Pointer to `Timer0_Config` structure with the desired settings.
 */
void Timer0_init(Timer0_Config *a_timerConfig) {
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <Timer0_init+0x6>
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <Timer0_init+0x8>
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	9a 83       	std	Y+2, r25	; 0x02
    1bbc:	89 83       	std	Y+1, r24	; 0x01

    /* Set initial timer count */
    TCNT0_REG.byte = (a_timerConfig)->intialCount;
    1bbe:	a2 e5       	ldi	r26, 0x52	; 82
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc6:	85 81       	ldd	r24, Z+5	; 0x05
    1bc8:	8c 93       	st	X, r24

    /* Set clock source and prescaler */
    TCCR0_REG.byte &= ~(TIMER0_CS_BITMASK); // Clear lower three bits for clock source
    1bca:	a3 e5       	ldi	r26, 0x53	; 83
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e3 e5       	ldi	r30, 0x53	; 83
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	88 7f       	andi	r24, 0xF8	; 248
    1bd6:	8c 93       	st	X, r24
    TCCR0_REG.byte |= (a_timerConfig->clockSource&(TIMER0_CS_BITMASK));
    1bd8:	a3 e5       	ldi	r26, 0x53	; 83
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e3 e5       	ldi	r30, 0x53	; 83
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	98 2f       	mov	r25, r24
    1be4:	e9 81       	ldd	r30, Y+1	; 0x01
    1be6:	fa 81       	ldd	r31, Y+2	; 0x02
    1be8:	81 81       	ldd	r24, Z+1	; 0x01
    1bea:	87 70       	andi	r24, 0x07	; 7
    1bec:	89 2b       	or	r24, r25
    1bee:	8c 93       	st	X, r24

    /* Configure the timer mode */
    switch (a_timerConfig->mode) {
    1bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf4:	80 81       	ld	r24, Z
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	3c 83       	std	Y+4, r19	; 0x04
    1bfc:	2b 83       	std	Y+3, r18	; 0x03
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	91 05       	cpc	r25, r1
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <Timer0_init+0x5c>
    1c08:	41 c0       	rjmp	.+130    	; 0x1c8c <Timer0_init+0xde>
    1c0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0e:	22 30       	cpi	r18, 0x02	; 2
    1c10:	31 05       	cpc	r19, r1
    1c12:	31 f0       	breq	.+12     	; 0x1c20 <Timer0_init+0x72>
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	9c 81       	ldd	r25, Y+4	; 0x04
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <Timer0_init+0x70>
    1c1c:	83 c0       	rjmp	.+262    	; 0x1d24 <Timer0_init+0x176>
    1c1e:	aa c0       	rjmp	.+340    	; 0x1d74 <Timer0_init+0x1c6>
        case TIMER0_MODE_FAST_PWM:
            /* Configure Fast PWM mode */
            TCCR0_REG.bits.wgm00 = LOGIC_HIGH;
    1c20:	e3 e5       	ldi	r30, 0x53	; 83
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	80 64       	ori	r24, 0x40	; 64
    1c28:	80 83       	st	Z, r24
            TCCR0_REG.bits.wgm01 = LOGIC_HIGH;
    1c2a:	e3 e5       	ldi	r30, 0x53	; 83
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	88 60       	ori	r24, 0x08	; 8
    1c32:	80 83       	st	Z, r24

            /* Set Compare Output Mode */
            TCCR0_REG.bits.com00 = GET_BIT(a_timerConfig->compareOutputMode, TIMER_COMP_OUT_MODE_BIT_0);
    1c34:	a3 e5       	ldi	r26, 0x53	; 83
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3c:	82 81       	ldd	r24, Z+2	; 0x02
    1c3e:	81 70       	andi	r24, 0x01	; 1
    1c40:	81 70       	andi	r24, 0x01	; 1
    1c42:	81 70       	andi	r24, 0x01	; 1
    1c44:	81 70       	andi	r24, 0x01	; 1
    1c46:	98 2f       	mov	r25, r24
    1c48:	92 95       	swap	r25
    1c4a:	90 7f       	andi	r25, 0xF0	; 240
    1c4c:	8c 91       	ld	r24, X
    1c4e:	8f 7e       	andi	r24, 0xEF	; 239
    1c50:	89 2b       	or	r24, r25
    1c52:	8c 93       	st	X, r24
            TCCR0_REG.bits.com01 = GET_BIT(a_timerConfig->compareOutputMode, TIMER_COMP_OUT_MODE_BIT_1);
    1c54:	a3 e5       	ldi	r26, 0x53	; 83
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5c:	82 81       	ldd	r24, Z+2	; 0x02
    1c5e:	88 2f       	mov	r24, r24
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	82 70       	andi	r24, 0x02	; 2
    1c64:	90 70       	andi	r25, 0x00	; 0
    1c66:	95 95       	asr	r25
    1c68:	87 95       	ror	r24
    1c6a:	81 70       	andi	r24, 0x01	; 1
    1c6c:	81 70       	andi	r24, 0x01	; 1
    1c6e:	98 2f       	mov	r25, r24
    1c70:	92 95       	swap	r25
    1c72:	99 0f       	add	r25, r25
    1c74:	90 7e       	andi	r25, 0xE0	; 224
    1c76:	8c 91       	ld	r24, X
    1c78:	8f 7d       	andi	r24, 0xDF	; 223
    1c7a:	89 2b       	or	r24, r25
    1c7c:	8c 93       	st	X, r24

            /* Set the duty cycle value (OCR0) */
            OCR0_REG.byte = a_timerConfig->tick;
    1c7e:	ac e5       	ldi	r26, 0x5C	; 92
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e9 81       	ldd	r30, Y+1	; 0x01
    1c84:	fa 81       	ldd	r31, Y+2	; 0x02
    1c86:	84 81       	ldd	r24, Z+4	; 0x04
    1c88:	8c 93       	st	X, r24
    1c8a:	74 c0       	rjmp	.+232    	; 0x1d74 <Timer0_init+0x1c6>
            break;

        case TIMER0_MODE_CTC:
            /* Configure CTC mode */
            TCCR0_REG.bits.foc0 = LOGIC_HIGH;
    1c8c:	e3 e5       	ldi	r30, 0x53	; 83
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	80 68       	ori	r24, 0x80	; 128
    1c94:	80 83       	st	Z, r24
            TCCR0_REG.bits.wgm00 = LOGIC_LOW;
    1c96:	e3 e5       	ldi	r30, 0x53	; 83
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	8f 7b       	andi	r24, 0xBF	; 191
    1c9e:	80 83       	st	Z, r24
            TCCR0_REG.bits.wgm01 = LOGIC_HIGH;
    1ca0:	e3 e5       	ldi	r30, 0x53	; 83
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	88 60       	ori	r24, 0x08	; 8
    1ca8:	80 83       	st	Z, r24


            /* Set Compare Output Mode */
            TCCR0_REG.bits.com00 = GET_BIT(a_timerConfig->compareOutputMode, TIMER_COMP_OUT_MODE_BIT_0);
    1caa:	a3 e5       	ldi	r26, 0x53	; 83
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	81 70       	andi	r24, 0x01	; 1
    1cb6:	81 70       	andi	r24, 0x01	; 1
    1cb8:	81 70       	andi	r24, 0x01	; 1
    1cba:	81 70       	andi	r24, 0x01	; 1
    1cbc:	98 2f       	mov	r25, r24
    1cbe:	92 95       	swap	r25
    1cc0:	90 7f       	andi	r25, 0xF0	; 240
    1cc2:	8c 91       	ld	r24, X
    1cc4:	8f 7e       	andi	r24, 0xEF	; 239
    1cc6:	89 2b       	or	r24, r25
    1cc8:	8c 93       	st	X, r24
            TCCR0_REG.bits.com01 = GET_BIT(a_timerConfig->compareOutputMode, TIMER_COMP_OUT_MODE_BIT_1);
    1cca:	a3 e5       	ldi	r26, 0x53	; 83
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd2:	82 81       	ldd	r24, Z+2	; 0x02
    1cd4:	88 2f       	mov	r24, r24
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	82 70       	andi	r24, 0x02	; 2
    1cda:	90 70       	andi	r25, 0x00	; 0
    1cdc:	95 95       	asr	r25
    1cde:	87 95       	ror	r24
    1ce0:	81 70       	andi	r24, 0x01	; 1
    1ce2:	81 70       	andi	r24, 0x01	; 1
    1ce4:	98 2f       	mov	r25, r24
    1ce6:	92 95       	swap	r25
    1ce8:	99 0f       	add	r25, r25
    1cea:	90 7e       	andi	r25, 0xE0	; 224
    1cec:	8c 91       	ld	r24, X
    1cee:	8f 7d       	andi	r24, 0xDF	; 223
    1cf0:	89 2b       	or	r24, r25
    1cf2:	8c 93       	st	X, r24

            /* Enable interrupts if requested */
            if (a_timerConfig->interrupt) {
    1cf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf8:	83 81       	ldd	r24, Z+3	; 0x03
    1cfa:	88 23       	and	r24, r24
    1cfc:	51 f0       	breq	.+20     	; 0x1d12 <Timer0_init+0x164>
                TIMSK_REG.bits.ocie0 = LOGIC_HIGH;
    1cfe:	e9 e5       	ldi	r30, 0x59	; 89
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	82 60       	ori	r24, 0x02	; 2
    1d06:	80 83       	st	Z, r24
                TIMSK_REG.bits.toie0 = LOGIC_LOW;
    1d08:	e9 e5       	ldi	r30, 0x59	; 89
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	8e 7f       	andi	r24, 0xFE	; 254
    1d10:	80 83       	st	Z, r24
            }

            /* Set the compare match value (OCR0) */
            OCR0_REG.byte = a_timerConfig->tick;
    1d12:	ec e5       	ldi	r30, 0x5C	; 92
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	a9 81       	ldd	r26, Y+1	; 0x01
    1d18:	ba 81       	ldd	r27, Y+2	; 0x02
    1d1a:	14 96       	adiw	r26, 0x04	; 4
    1d1c:	8c 91       	ld	r24, X
    1d1e:	14 97       	sbiw	r26, 0x04	; 4
    1d20:	80 83       	st	Z, r24
    1d22:	28 c0       	rjmp	.+80     	; 0x1d74 <Timer0_init+0x1c6>
            break;

        case TIMER0_MODE_NORMAL:
            /* Configure Normal mode */
            TCCR0_REG.bits.foc0 = LOGIC_HIGH; // Force Output Compare
    1d24:	e3 e5       	ldi	r30, 0x53	; 83
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	80 68       	ori	r24, 0x80	; 128
    1d2c:	80 83       	st	Z, r24
            TCCR0_REG.bits.wgm00 = LOGIC_LOW;
    1d2e:	e3 e5       	ldi	r30, 0x53	; 83
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	8f 7b       	andi	r24, 0xBF	; 191
    1d36:	80 83       	st	Z, r24
            TCCR0_REG.bits.wgm01 = LOGIC_LOW;
    1d38:	e3 e5       	ldi	r30, 0x53	; 83
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	87 7f       	andi	r24, 0xF7	; 247
    1d40:	80 83       	st	Z, r24

            /* Disable Compare Output Mode */
            TCCR0_REG.bits.com00 = LOGIC_LOW;
    1d42:	e3 e5       	ldi	r30, 0x53	; 83
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	8f 7e       	andi	r24, 0xEF	; 239
    1d4a:	80 83       	st	Z, r24
            TCCR0_REG.bits.com01 = LOGIC_LOW;
    1d4c:	e3 e5       	ldi	r30, 0x53	; 83
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	8f 7d       	andi	r24, 0xDF	; 223
    1d54:	80 83       	st	Z, r24

            /* Enable overflow interrupt if requested */
            if (a_timerConfig->interrupt) {
    1d56:	e9 81       	ldd	r30, Y+1	; 0x01
    1d58:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5a:	83 81       	ldd	r24, Z+3	; 0x03
    1d5c:	88 23       	and	r24, r24
    1d5e:	51 f0       	breq	.+20     	; 0x1d74 <Timer0_init+0x1c6>
                TIMSK_REG.bits.toie0 = LOGIC_HIGH; // Enable Overflow Interrupt
    1d60:	e9 e5       	ldi	r30, 0x59	; 89
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	81 60       	ori	r24, 0x01	; 1
    1d68:	80 83       	st	Z, r24
                TIMSK_REG.bits.ocie0 = LOGIC_LOW;  // Disable Output Compare Match Interrupt
    1d6a:	e9 e5       	ldi	r30, 0x59	; 89
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	8d 7f       	andi	r24, 0xFD	; 253
    1d72:	80 83       	st	Z, r24
            }
            break;
    }
}
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <Timer0_setCallback>:
 * be executed during Timer 0 interrupts (either Output Compare Match or
 * Overflow interrupts).
 *
 * @param a_ptr2func Pointer to the callback function to be executed.
 */
void Timer0_setCallback(volatile void (a_ptr2func)(void)) {
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <Timer0_setCallback+0x6>
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    PTR2_Timer0_CallBack = a_ptr2func;
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	9a 81       	ldd	r25, Y+2	; 0x02
    1d94:	90 93 b9 01 	sts	0x01B9, r25
    1d98:	80 93 b8 01 	sts	0x01B8, r24
}
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <Timer0_setDutyCycle>:
 * This function allows the user to set the duty cycle in Fast PWM mode by
 * updating the OCR0 register with the desired duty cycle value.
 *
 * @param a_duty The duty cycle value to be set (0-255).
 */
void Timer0_setDutyCycle(uint8 a_duty) {
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	0f 92       	push	r0
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	89 83       	std	Y+1, r24	; 0x01
    OCR0_REG.byte = a_duty;
    1db2:	ec e5       	ldi	r30, 0x5C	; 92
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	80 83       	st	Z, r24
}
    1dba:	0f 90       	pop	r0
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <__vector_10>:
 *
 * This interrupt service routine is executed when a compare match occurs
 * in Timer 0. If a callback function has been registered via
 * `Timer0_setCallback`, it will be called within this ISR.
 */
ISR(TIMER0_COMP_vect) {
    1dc2:	1f 92       	push	r1
    1dc4:	0f 92       	push	r0
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	0f 92       	push	r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	2f 93       	push	r18
    1dce:	3f 93       	push	r19
    1dd0:	4f 93       	push	r20
    1dd2:	5f 93       	push	r21
    1dd4:	6f 93       	push	r22
    1dd6:	7f 93       	push	r23
    1dd8:	8f 93       	push	r24
    1dda:	9f 93       	push	r25
    1ddc:	af 93       	push	r26
    1dde:	bf 93       	push	r27
    1de0:	ef 93       	push	r30
    1de2:	ff 93       	push	r31
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    if (PTR2_Timer0_CallBack != NULL_PTR) {
    1dec:	80 91 b8 01 	lds	r24, 0x01B8
    1df0:	90 91 b9 01 	lds	r25, 0x01B9
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	29 f0       	breq	.+10     	; 0x1e02 <__vector_10+0x40>
        PTR2_Timer0_CallBack();
    1df8:	e0 91 b8 01 	lds	r30, 0x01B8
    1dfc:	f0 91 b9 01 	lds	r31, 0x01B9
    1e00:	09 95       	icall
    }
}
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	ff 91       	pop	r31
    1e08:	ef 91       	pop	r30
    1e0a:	bf 91       	pop	r27
    1e0c:	af 91       	pop	r26
    1e0e:	9f 91       	pop	r25
    1e10:	8f 91       	pop	r24
    1e12:	7f 91       	pop	r23
    1e14:	6f 91       	pop	r22
    1e16:	5f 91       	pop	r21
    1e18:	4f 91       	pop	r20
    1e1a:	3f 91       	pop	r19
    1e1c:	2f 91       	pop	r18
    1e1e:	0f 90       	pop	r0
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	0f 90       	pop	r0
    1e24:	1f 90       	pop	r1
    1e26:	18 95       	reti

00001e28 <__vector_11>:
 * This interrupt service routine is executed when Timer 0 overflows
 * (i.e., the timer count rolls over from 0xFF to 0x00). If a callback
 * function has been registered via `Timer0_setCallback`, it will be called
 * within this ISR.
 */
ISR(TIMER0_OVF_vect) {
    1e28:	1f 92       	push	r1
    1e2a:	0f 92       	push	r0
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	0f 92       	push	r0
    1e30:	11 24       	eor	r1, r1
    1e32:	2f 93       	push	r18
    1e34:	3f 93       	push	r19
    1e36:	4f 93       	push	r20
    1e38:	5f 93       	push	r21
    1e3a:	6f 93       	push	r22
    1e3c:	7f 93       	push	r23
    1e3e:	8f 93       	push	r24
    1e40:	9f 93       	push	r25
    1e42:	af 93       	push	r26
    1e44:	bf 93       	push	r27
    1e46:	ef 93       	push	r30
    1e48:	ff 93       	push	r31
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    if (PTR2_Timer0_CallBack != NULL_PTR) {
    1e52:	80 91 b8 01 	lds	r24, 0x01B8
    1e56:	90 91 b9 01 	lds	r25, 0x01B9
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	29 f0       	breq	.+10     	; 0x1e68 <__vector_11+0x40>
        PTR2_Timer0_CallBack();
    1e5e:	e0 91 b8 01 	lds	r30, 0x01B8
    1e62:	f0 91 b9 01 	lds	r31, 0x01B9
    1e66:	09 95       	icall
    }
}
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	ff 91       	pop	r31
    1e6e:	ef 91       	pop	r30
    1e70:	bf 91       	pop	r27
    1e72:	af 91       	pop	r26
    1e74:	9f 91       	pop	r25
    1e76:	8f 91       	pop	r24
    1e78:	7f 91       	pop	r23
    1e7a:	6f 91       	pop	r22
    1e7c:	5f 91       	pop	r21
    1e7e:	4f 91       	pop	r20
    1e80:	3f 91       	pop	r19
    1e82:	2f 91       	pop	r18
    1e84:	0f 90       	pop	r0
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	0f 90       	pop	r0
    1e8a:	1f 90       	pop	r1
    1e8c:	18 95       	reti

00001e8e <Buzzer_init>:
#include"../mcal/gpio.h"
#include"../common/std_types.h"
#include"buzzer.h"

void Buzzer_init() {
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62

		GPIO_ARR_setPinDirection(BUZZER_PIN, PIN_OUTPUT);
    1e96:	8b e1       	ldi	r24, 0x1B	; 27
    1e98:	61 e0       	ldi	r22, 0x01	; 1
    1e9a:	0e 94 c9 0c 	call	0x1992	; 0x1992 <GPIO_ARR_setPinDirection>

}
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <Buzzer_on>:

void Buzzer_on() {
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
#ifdef LED_POSTIVE_LOGIC
	GPIO_ARR_setPinState(BUZZER_PIN, LOGIC_HIGH);
#else
	GPIO_ARR_setPinState(BUZZER_PIN,LOGIC_LOW);
    1eac:	8b e1       	ldi	r24, 0x1B	; 27
    1eae:	60 e0       	ldi	r22, 0x00	; 0
    1eb0:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_ARR_setPinState>
#endif

}
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <Buzzer_off>:

void Buzzer_off() {
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
#ifdef LED_POSTIVE_LOGIC
	GPIO_ARR_setPinState(BUZZER_PIN, LOGIC_LOW);
#else
	GPIO_ARR_setPinState(BUZZER_PIN,LOGIC_HIGH);
    1ec2:	8b e1       	ldi	r24, 0x1B	; 27
    1ec4:	61 e0       	ldi	r22, 0x01	; 1
    1ec6:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_ARR_setPinState>
#endif

}
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <DcMotor_init>:
Timer0_Config timer0_config = { .mode = TIMER0_MODE_FAST_PWM, .clockSource =
		TIMER0_PRESCALER_8, .compareOutputMode = TIMER0_COMPARE_CLEAR,.interrupt= FALSE , .tick =
		255, .intialCount = 0

};
void DcMotor_init() {
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
	Timer0_init(&timer0_config);
    1ed8:	8e ea       	ldi	r24, 0xAE	; 174
    1eda:	91 e0       	ldi	r25, 0x01	; 1
    1edc:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <Timer0_init>
	GPIO_ARR_setPinDirection(DCMOTOR_IN_1, PIN_OUTPUT);
    1ee0:	88 e0       	ldi	r24, 0x08	; 8
    1ee2:	61 e0       	ldi	r22, 0x01	; 1
    1ee4:	0e 94 c9 0c 	call	0x1992	; 0x1992 <GPIO_ARR_setPinDirection>
	GPIO_ARR_setPinDirection(DCMOTOR_IN_2, PIN_OUTPUT);
    1ee8:	89 e0       	ldi	r24, 0x09	; 9
    1eea:	61 e0       	ldi	r22, 0x01	; 1
    1eec:	0e 94 c9 0c 	call	0x1992	; 0x1992 <GPIO_ARR_setPinDirection>
	GPIO_ARR_setPinDirection(DCMOTOR_E1, PIN_OUTPUT);
    1ef0:	8b e0       	ldi	r24, 0x0B	; 11
    1ef2:	61 e0       	ldi	r22, 0x01	; 1
    1ef4:	0e 94 c9 0c 	call	0x1992	; 0x1992 <GPIO_ARR_setPinDirection>

}
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <DcMotor_rotate>:
void DcMotor_rotate(DCMOTOR_STATE a_state, uint8 a_speed) {
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <DcMotor_rotate+0x6>
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <DcMotor_rotate+0x8>
    1f06:	0f 92       	push	r0
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	8a 83       	std	Y+2, r24	; 0x02
    1f0e:	6b 83       	std	Y+3, r22	; 0x03
	switch (a_state) {
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	3d 83       	std	Y+5, r19	; 0x05
    1f18:	2c 83       	std	Y+4, r18	; 0x04
    1f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	91 05       	cpc	r25, r1
    1f22:	91 f0       	breq	.+36     	; 0x1f48 <DcMotor_rotate+0x4a>
    1f24:	2c 81       	ldd	r18, Y+4	; 0x04
    1f26:	3d 81       	ldd	r19, Y+5	; 0x05
    1f28:	22 30       	cpi	r18, 0x02	; 2
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	b1 f0       	breq	.+44     	; 0x1f5a <DcMotor_rotate+0x5c>
    1f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f30:	9d 81       	ldd	r25, Y+5	; 0x05
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	d1 f4       	brne	.+52     	; 0x1f6a <DcMotor_rotate+0x6c>
	case CW:
		GPIO_ARR_setPinState(DCMOTOR_IN_1, LOGIC_HIGH);
    1f36:	88 e0       	ldi	r24, 0x08	; 8
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_ARR_setPinState>
		GPIO_ARR_setPinState(DCMOTOR_IN_2, LOGIC_LOW);
    1f3e:	89 e0       	ldi	r24, 0x09	; 9
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_ARR_setPinState>
    1f46:	11 c0       	rjmp	.+34     	; 0x1f6a <DcMotor_rotate+0x6c>
		break;
	case ACW:
		GPIO_ARR_setPinState(DCMOTOR_IN_2, LOGIC_HIGH);
    1f48:	89 e0       	ldi	r24, 0x09	; 9
    1f4a:	61 e0       	ldi	r22, 0x01	; 1
    1f4c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_ARR_setPinState>
		GPIO_ARR_setPinState(DCMOTOR_IN_1, LOGIC_LOW);
    1f50:	88 e0       	ldi	r24, 0x08	; 8
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_ARR_setPinState>
    1f58:	08 c0       	rjmp	.+16     	; 0x1f6a <DcMotor_rotate+0x6c>
		break;
	case STOP:
		GPIO_ARR_setPinState(DCMOTOR_IN_1, LOGIC_LOW);
    1f5a:	88 e0       	ldi	r24, 0x08	; 8
    1f5c:	60 e0       	ldi	r22, 0x00	; 0
    1f5e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_ARR_setPinState>
		GPIO_ARR_setPinState(DCMOTOR_IN_2, LOGIC_LOW);
    1f62:	89 e0       	ldi	r24, 0x09	; 9
    1f64:	60 e0       	ldi	r22, 0x00	; 0
    1f66:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_ARR_setPinState>
		break;
	};
	uint8 l_duty = MAP(a_speed, 0, 100, 0, 255);
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	48 2f       	mov	r20, r24
    1f6e:	50 e0       	ldi	r21, 0x00	; 0
    1f70:	ca 01       	movw	r24, r20
    1f72:	9c 01       	movw	r18, r24
    1f74:	22 0f       	add	r18, r18
    1f76:	33 1f       	adc	r19, r19
    1f78:	c9 01       	movw	r24, r18
    1f7a:	96 95       	lsr	r25
    1f7c:	98 2f       	mov	r25, r24
    1f7e:	88 27       	eor	r24, r24
    1f80:	97 95       	ror	r25
    1f82:	87 95       	ror	r24
    1f84:	82 1b       	sub	r24, r18
    1f86:	93 0b       	sbc	r25, r19
    1f88:	84 0f       	add	r24, r20
    1f8a:	95 1f       	adc	r25, r21
    1f8c:	24 e6       	ldi	r18, 0x64	; 100
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	b9 01       	movw	r22, r18
    1f92:	0e 94 c6 1a 	call	0x358c	; 0x358c <__divmodhi4>
    1f96:	cb 01       	movw	r24, r22
    1f98:	89 83       	std	Y+1, r24	; 0x01
	Timer0_setDutyCycle(l_duty);
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <Timer0_setDutyCycle>

}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <FlameSensor_init>:
/**
 * @brief Initializes the flame sensor pin .
 *
 * Configures the flame sensor pin as an input pin with GPIO_ARR_setPinDirection().
 */
void FlameSensor_init() {
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62

    GPIO_ARR_setPinDirection(GPIO_PD2, PIN_INPUT);
    1fb8:	8a e1       	ldi	r24, 0x1A	; 26
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	0e 94 c9 0c 	call	0x1992	; 0x1992 <GPIO_ARR_setPinDirection>
}
    1fc0:	cf 91       	pop	r28
    1fc2:	df 91       	pop	r29
    1fc4:	08 95       	ret

00001fc6 <FlameSensor_getValue>:
 * Reads the digital value from the flame sensor pin and returns the result.
 * The pin value is either HIGH (flame detected) or LOW (no flame detected).
 *
 * @return The state of the flame sensor pin (HIGH or LOW).
 */
uint8 FlameSensor_getValue() {
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62

    return GPIO_ARR_readPin(GPIO_PD2);
    1fce:	8a e1       	ldi	r24, 0x1A	; 26
    1fd0:	0e 94 77 0d 	call	0x1aee	; 0x1aee <GPIO_ARR_readPin>
}
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <LCD_sendCommand>:
 * such as clearing the screen, setting display modes, or moving the cursor.
 *
 * @param a_lcdCommand The command to be sent to the LCD (e.g., LCD_CLEAR_SCREEN_COMMAND).
 */
void LCD_sendCommand(uint8 a_lcdCommand)
{
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	c1 56       	subi	r28, 0x61	; 97
    1fe8:	d0 40       	sbci	r29, 0x00	; 0
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	f8 94       	cli
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	cd bf       	out	0x3d, r28	; 61
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	ef 59       	subi	r30, 0x9F	; 159
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 83       	st	Z, r24
    GPIO_ARR_setPinState(LCD_RS, LOW);  /* Set RS to 0 for command mode */
    1ffc:	88 e1       	ldi	r24, 0x18	; 24
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_ARR_setPinState>
    2004:	fe 01       	movw	r30, r28
    2006:	e3 5a       	subi	r30, 0xA3	; 163
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	a0 e8       	ldi	r26, 0x80	; 128
    2010:	bf e3       	ldi	r27, 0x3F	; 63
    2012:	80 83       	st	Z, r24
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	a2 83       	std	Z+2, r26	; 0x02
    2018:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    201a:	8e 01       	movw	r16, r28
    201c:	07 5a       	subi	r16, 0xA7	; 167
    201e:	1f 4f       	sbci	r17, 0xFF	; 255
    2020:	fe 01       	movw	r30, r28
    2022:	e3 5a       	subi	r30, 0xA3	; 163
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	60 81       	ld	r22, Z
    2028:	71 81       	ldd	r23, Z+1	; 0x01
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	93 81       	ldd	r25, Z+3	; 0x03
    202e:	2b ea       	ldi	r18, 0xAB	; 171
    2030:	3a ea       	ldi	r19, 0xAA	; 170
    2032:	4a ea       	ldi	r20, 0xAA	; 170
    2034:	50 e4       	ldi	r21, 0x40	; 64
    2036:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	f8 01       	movw	r30, r16
    2040:	80 83       	st	Z, r24
    2042:	91 83       	std	Z+1, r25	; 0x01
    2044:	a2 83       	std	Z+2, r26	; 0x02
    2046:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2048:	fe 01       	movw	r30, r28
    204a:	e7 5a       	subi	r30, 0xA7	; 167
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	60 81       	ld	r22, Z
    2050:	71 81       	ldd	r23, Z+1	; 0x01
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	93 81       	ldd	r25, Z+3	; 0x03
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e8       	ldi	r20, 0x80	; 128
    205c:	5f e3       	ldi	r21, 0x3F	; 63
    205e:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    2062:	88 23       	and	r24, r24
    2064:	34 f4       	brge	.+12     	; 0x2072 <LCD_sendCommand+0x98>
		__ticks = 1;
    2066:	fe 01       	movw	r30, r28
    2068:	e8 5a       	subi	r30, 0xA8	; 168
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	80 83       	st	Z, r24
    2070:	e0 c0       	rjmp	.+448    	; 0x2232 <LCD_sendCommand+0x258>
	else if (__tmp > 255)
    2072:	fe 01       	movw	r30, r28
    2074:	e7 5a       	subi	r30, 0xA7	; 167
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	60 81       	ld	r22, Z
    207a:	71 81       	ldd	r23, Z+1	; 0x01
    207c:	82 81       	ldd	r24, Z+2	; 0x02
    207e:	93 81       	ldd	r25, Z+3	; 0x03
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4f e7       	ldi	r20, 0x7F	; 127
    2086:	53 e4       	ldi	r21, 0x43	; 67
    2088:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    208c:	18 16       	cp	r1, r24
    208e:	0c f0       	brlt	.+2      	; 0x2092 <LCD_sendCommand+0xb8>
    2090:	c0 c0       	rjmp	.+384    	; 0x2212 <LCD_sendCommand+0x238>
	{
		_delay_ms(__us / 1000.0);
    2092:	fe 01       	movw	r30, r28
    2094:	e3 5a       	subi	r30, 0xA3	; 163
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	60 81       	ld	r22, Z
    209a:	71 81       	ldd	r23, Z+1	; 0x01
    209c:	82 81       	ldd	r24, Z+2	; 0x02
    209e:	93 81       	ldd	r25, Z+3	; 0x03
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	4a e7       	ldi	r20, 0x7A	; 122
    20a6:	54 e4       	ldi	r21, 0x44	; 68
    20a8:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	fe 01       	movw	r30, r28
    20b2:	ec 5a       	subi	r30, 0xAC	; 172
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 83       	st	Z, r24
    20b8:	91 83       	std	Z+1, r25	; 0x01
    20ba:	a2 83       	std	Z+2, r26	; 0x02
    20bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20be:	8e 01       	movw	r16, r28
    20c0:	00 5b       	subi	r16, 0xB0	; 176
    20c2:	1f 4f       	sbci	r17, 0xFF	; 255
    20c4:	fe 01       	movw	r30, r28
    20c6:	ec 5a       	subi	r30, 0xAC	; 172
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	60 81       	ld	r22, Z
    20cc:	71 81       	ldd	r23, Z+1	; 0x01
    20ce:	82 81       	ldd	r24, Z+2	; 0x02
    20d0:	93 81       	ldd	r25, Z+3	; 0x03
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	4a e7       	ldi	r20, 0x7A	; 122
    20d8:	55 e4       	ldi	r21, 0x45	; 69
    20da:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	f8 01       	movw	r30, r16
    20e4:	80 83       	st	Z, r24
    20e6:	91 83       	std	Z+1, r25	; 0x01
    20e8:	a2 83       	std	Z+2, r26	; 0x02
    20ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20ec:	fe 01       	movw	r30, r28
    20ee:	e0 5b       	subi	r30, 0xB0	; 176
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	93 81       	ldd	r25, Z+3	; 0x03
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e8       	ldi	r20, 0x80	; 128
    2100:	5f e3       	ldi	r21, 0x3F	; 63
    2102:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    2106:	88 23       	and	r24, r24
    2108:	44 f4       	brge	.+16     	; 0x211a <LCD_sendCommand+0x140>
		__ticks = 1;
    210a:	fe 01       	movw	r30, r28
    210c:	e2 5b       	subi	r30, 0xB2	; 178
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	91 83       	std	Z+1, r25	; 0x01
    2116:	80 83       	st	Z, r24
    2118:	64 c0       	rjmp	.+200    	; 0x21e2 <LCD_sendCommand+0x208>
	else if (__tmp > 65535)
    211a:	fe 01       	movw	r30, r28
    211c:	e0 5b       	subi	r30, 0xB0	; 176
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	60 81       	ld	r22, Z
    2122:	71 81       	ldd	r23, Z+1	; 0x01
    2124:	82 81       	ldd	r24, Z+2	; 0x02
    2126:	93 81       	ldd	r25, Z+3	; 0x03
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	3f ef       	ldi	r19, 0xFF	; 255
    212c:	4f e7       	ldi	r20, 0x7F	; 127
    212e:	57 e4       	ldi	r21, 0x47	; 71
    2130:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2134:	18 16       	cp	r1, r24
    2136:	0c f0       	brlt	.+2      	; 0x213a <LCD_sendCommand+0x160>
    2138:	43 c0       	rjmp	.+134    	; 0x21c0 <LCD_sendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213a:	fe 01       	movw	r30, r28
    213c:	ec 5a       	subi	r30, 0xAC	; 172
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	60 81       	ld	r22, Z
    2142:	71 81       	ldd	r23, Z+1	; 0x01
    2144:	82 81       	ldd	r24, Z+2	; 0x02
    2146:	93 81       	ldd	r25, Z+3	; 0x03
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e2       	ldi	r20, 0x20	; 32
    214e:	51 e4       	ldi	r21, 0x41	; 65
    2150:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	8e 01       	movw	r16, r28
    215a:	02 5b       	subi	r16, 0xB2	; 178
    215c:	1f 4f       	sbci	r17, 0xFF	; 255
    215e:	bc 01       	movw	r22, r24
    2160:	cd 01       	movw	r24, r26
    2162:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	f8 01       	movw	r30, r16
    216c:	91 83       	std	Z+1, r25	; 0x01
    216e:	80 83       	st	Z, r24
    2170:	1f c0       	rjmp	.+62     	; 0x21b0 <LCD_sendCommand+0x1d6>
    2172:	fe 01       	movw	r30, r28
    2174:	e4 5b       	subi	r30, 0xB4	; 180
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	80 e9       	ldi	r24, 0x90	; 144
    217a:	91 e0       	ldi	r25, 0x01	; 1
    217c:	91 83       	std	Z+1, r25	; 0x01
    217e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2180:	fe 01       	movw	r30, r28
    2182:	e4 5b       	subi	r30, 0xB4	; 180
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	80 81       	ld	r24, Z
    2188:	91 81       	ldd	r25, Z+1	; 0x01
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <LCD_sendCommand+0x1b0>
    218e:	fe 01       	movw	r30, r28
    2190:	e4 5b       	subi	r30, 0xB4	; 180
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	91 83       	std	Z+1, r25	; 0x01
    2196:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2198:	de 01       	movw	r26, r28
    219a:	a2 5b       	subi	r26, 0xB2	; 178
    219c:	bf 4f       	sbci	r27, 0xFF	; 255
    219e:	fe 01       	movw	r30, r28
    21a0:	e2 5b       	subi	r30, 0xB2	; 178
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	80 81       	ld	r24, Z
    21a6:	91 81       	ldd	r25, Z+1	; 0x01
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	11 96       	adiw	r26, 0x01	; 1
    21ac:	9c 93       	st	X, r25
    21ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b0:	fe 01       	movw	r30, r28
    21b2:	e2 5b       	subi	r30, 0xB2	; 178
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	80 81       	ld	r24, Z
    21b8:	91 81       	ldd	r25, Z+1	; 0x01
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	d1 f6       	brne	.-76     	; 0x2172 <LCD_sendCommand+0x198>
    21be:	4b c0       	rjmp	.+150    	; 0x2256 <LCD_sendCommand+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c0:	8e 01       	movw	r16, r28
    21c2:	02 5b       	subi	r16, 0xB2	; 178
    21c4:	1f 4f       	sbci	r17, 0xFF	; 255
    21c6:	fe 01       	movw	r30, r28
    21c8:	e0 5b       	subi	r30, 0xB0	; 176
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	60 81       	ld	r22, Z
    21ce:	71 81       	ldd	r23, Z+1	; 0x01
    21d0:	82 81       	ldd	r24, Z+2	; 0x02
    21d2:	93 81       	ldd	r25, Z+3	; 0x03
    21d4:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	f8 01       	movw	r30, r16
    21de:	91 83       	std	Z+1, r25	; 0x01
    21e0:	80 83       	st	Z, r24
    21e2:	de 01       	movw	r26, r28
    21e4:	a6 5b       	subi	r26, 0xB6	; 182
    21e6:	bf 4f       	sbci	r27, 0xFF	; 255
    21e8:	fe 01       	movw	r30, r28
    21ea:	e2 5b       	subi	r30, 0xB2	; 178
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	80 81       	ld	r24, Z
    21f0:	91 81       	ldd	r25, Z+1	; 0x01
    21f2:	11 96       	adiw	r26, 0x01	; 1
    21f4:	9c 93       	st	X, r25
    21f6:	8e 93       	st	-X, r24
    21f8:	fe 01       	movw	r30, r28
    21fa:	e6 5b       	subi	r30, 0xB6	; 182
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 81       	ld	r24, Z
    2200:	91 81       	ldd	r25, Z+1	; 0x01
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <LCD_sendCommand+0x228>
    2206:	fe 01       	movw	r30, r28
    2208:	e6 5b       	subi	r30, 0xB6	; 182
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	91 83       	std	Z+1, r25	; 0x01
    220e:	80 83       	st	Z, r24
    2210:	22 c0       	rjmp	.+68     	; 0x2256 <LCD_sendCommand+0x27c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2212:	8e 01       	movw	r16, r28
    2214:	08 5a       	subi	r16, 0xA8	; 168
    2216:	1f 4f       	sbci	r17, 0xFF	; 255
    2218:	fe 01       	movw	r30, r28
    221a:	e7 5a       	subi	r30, 0xA7	; 167
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	60 81       	ld	r22, Z
    2220:	71 81       	ldd	r23, Z+1	; 0x01
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	f8 01       	movw	r30, r16
    2230:	80 83       	st	Z, r24
    2232:	de 01       	movw	r26, r28
    2234:	a7 5b       	subi	r26, 0xB7	; 183
    2236:	bf 4f       	sbci	r27, 0xFF	; 255
    2238:	fe 01       	movw	r30, r28
    223a:	e8 5a       	subi	r30, 0xA8	; 168
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	80 81       	ld	r24, Z
    2240:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2242:	fe 01       	movw	r30, r28
    2244:	e7 5b       	subi	r30, 0xB7	; 183
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	80 81       	ld	r24, Z
    224a:	8a 95       	dec	r24
    224c:	f1 f7       	brne	.-4      	; 0x224a <LCD_sendCommand+0x270>
    224e:	fe 01       	movw	r30, r28
    2250:	e7 5b       	subi	r30, 0xB7	; 183
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 83       	st	Z, r24
    _delay_us(LCD_TA_DELAY_US);         /* Delay for timing */
    GPIO_ARR_setPinState(LCD_E, HIGH);  /* Enable the LCD */
    2256:	89 e1       	ldi	r24, 0x19	; 25
    2258:	61 e0       	ldi	r22, 0x01	; 1
    225a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_ARR_setPinState>
    225e:	fe 01       	movw	r30, r28
    2260:	eb 5b       	subi	r30, 0xBB	; 187
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	a0 e8       	ldi	r26, 0x80	; 128
    226a:	bf e3       	ldi	r27, 0x3F	; 63
    226c:	80 83       	st	Z, r24
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	a2 83       	std	Z+2, r26	; 0x02
    2272:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2274:	8e 01       	movw	r16, r28
    2276:	0f 5b       	subi	r16, 0xBF	; 191
    2278:	1f 4f       	sbci	r17, 0xFF	; 255
    227a:	fe 01       	movw	r30, r28
    227c:	eb 5b       	subi	r30, 0xBB	; 187
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	60 81       	ld	r22, Z
    2282:	71 81       	ldd	r23, Z+1	; 0x01
    2284:	82 81       	ldd	r24, Z+2	; 0x02
    2286:	93 81       	ldd	r25, Z+3	; 0x03
    2288:	2b ea       	ldi	r18, 0xAB	; 171
    228a:	3a ea       	ldi	r19, 0xAA	; 170
    228c:	4a ea       	ldi	r20, 0xAA	; 170
    228e:	50 e4       	ldi	r21, 0x40	; 64
    2290:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	f8 01       	movw	r30, r16
    229a:	80 83       	st	Z, r24
    229c:	91 83       	std	Z+1, r25	; 0x01
    229e:	a2 83       	std	Z+2, r26	; 0x02
    22a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22a2:	fe 01       	movw	r30, r28
    22a4:	ef 5b       	subi	r30, 0xBF	; 191
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	60 81       	ld	r22, Z
    22aa:	71 81       	ldd	r23, Z+1	; 0x01
    22ac:	82 81       	ldd	r24, Z+2	; 0x02
    22ae:	93 81       	ldd	r25, Z+3	; 0x03
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e8       	ldi	r20, 0x80	; 128
    22b6:	5f e3       	ldi	r21, 0x3F	; 63
    22b8:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    22bc:	88 23       	and	r24, r24
    22be:	34 f4       	brge	.+12     	; 0x22cc <LCD_sendCommand+0x2f2>
		__ticks = 1;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	fe 01       	movw	r30, r28
    22c4:	e0 5c       	subi	r30, 0xC0	; 192
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 83       	st	Z, r24
    22ca:	9d c0       	rjmp	.+314    	; 0x2406 <LCD_sendCommand+0x42c>
	else if (__tmp > 255)
    22cc:	fe 01       	movw	r30, r28
    22ce:	ef 5b       	subi	r30, 0xBF	; 191
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	60 81       	ld	r22, Z
    22d4:	71 81       	ldd	r23, Z+1	; 0x01
    22d6:	82 81       	ldd	r24, Z+2	; 0x02
    22d8:	93 81       	ldd	r25, Z+3	; 0x03
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4f e7       	ldi	r20, 0x7F	; 127
    22e0:	53 e4       	ldi	r21, 0x43	; 67
    22e2:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    22e6:	18 16       	cp	r1, r24
    22e8:	0c f0       	brlt	.+2      	; 0x22ec <LCD_sendCommand+0x312>
    22ea:	7e c0       	rjmp	.+252    	; 0x23e8 <LCD_sendCommand+0x40e>
	{
		_delay_ms(__us / 1000.0);
    22ec:	fe 01       	movw	r30, r28
    22ee:	eb 5b       	subi	r30, 0xBB	; 187
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	60 81       	ld	r22, Z
    22f4:	71 81       	ldd	r23, Z+1	; 0x01
    22f6:	82 81       	ldd	r24, Z+2	; 0x02
    22f8:	93 81       	ldd	r25, Z+3	; 0x03
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	4a e7       	ldi	r20, 0x7A	; 122
    2300:	54 e4       	ldi	r21, 0x44	; 68
    2302:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	8c af       	std	Y+60, r24	; 0x3c
    230c:	9d af       	std	Y+61, r25	; 0x3d
    230e:	ae af       	std	Y+62, r26	; 0x3e
    2310:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2312:	6c ad       	ldd	r22, Y+60	; 0x3c
    2314:	7d ad       	ldd	r23, Y+61	; 0x3d
    2316:	8e ad       	ldd	r24, Y+62	; 0x3e
    2318:	9f ad       	ldd	r25, Y+63	; 0x3f
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	4a e7       	ldi	r20, 0x7A	; 122
    2320:	55 e4       	ldi	r21, 0x45	; 69
    2322:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	88 af       	std	Y+56, r24	; 0x38
    232c:	99 af       	std	Y+57, r25	; 0x39
    232e:	aa af       	std	Y+58, r26	; 0x3a
    2330:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2332:	68 ad       	ldd	r22, Y+56	; 0x38
    2334:	79 ad       	ldd	r23, Y+57	; 0x39
    2336:	8a ad       	ldd	r24, Y+58	; 0x3a
    2338:	9b ad       	ldd	r25, Y+59	; 0x3b
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e8       	ldi	r20, 0x80	; 128
    2340:	5f e3       	ldi	r21, 0x3F	; 63
    2342:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    2346:	88 23       	and	r24, r24
    2348:	2c f4       	brge	.+10     	; 0x2354 <LCD_sendCommand+0x37a>
		__ticks = 1;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	9f ab       	std	Y+55, r25	; 0x37
    2350:	8e ab       	std	Y+54, r24	; 0x36
    2352:	3f c0       	rjmp	.+126    	; 0x23d2 <LCD_sendCommand+0x3f8>
	else if (__tmp > 65535)
    2354:	68 ad       	ldd	r22, Y+56	; 0x38
    2356:	79 ad       	ldd	r23, Y+57	; 0x39
    2358:	8a ad       	ldd	r24, Y+58	; 0x3a
    235a:	9b ad       	ldd	r25, Y+59	; 0x3b
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	3f ef       	ldi	r19, 0xFF	; 255
    2360:	4f e7       	ldi	r20, 0x7F	; 127
    2362:	57 e4       	ldi	r21, 0x47	; 71
    2364:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2368:	18 16       	cp	r1, r24
    236a:	4c f5       	brge	.+82     	; 0x23be <LCD_sendCommand+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236c:	6c ad       	ldd	r22, Y+60	; 0x3c
    236e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2370:	8e ad       	ldd	r24, Y+62	; 0x3e
    2372:	9f ad       	ldd	r25, Y+63	; 0x3f
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e2       	ldi	r20, 0x20	; 32
    237a:	51 e4       	ldi	r21, 0x41	; 65
    237c:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	bc 01       	movw	r22, r24
    2386:	cd 01       	movw	r24, r26
    2388:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	9f ab       	std	Y+55, r25	; 0x37
    2392:	8e ab       	std	Y+54, r24	; 0x36
    2394:	0f c0       	rjmp	.+30     	; 0x23b4 <LCD_sendCommand+0x3da>
    2396:	80 e9       	ldi	r24, 0x90	; 144
    2398:	91 e0       	ldi	r25, 0x01	; 1
    239a:	9d ab       	std	Y+53, r25	; 0x35
    239c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    239e:	8c a9       	ldd	r24, Y+52	; 0x34
    23a0:	9d a9       	ldd	r25, Y+53	; 0x35
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <LCD_sendCommand+0x3c8>
    23a6:	9d ab       	std	Y+53, r25	; 0x35
    23a8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23aa:	8e a9       	ldd	r24, Y+54	; 0x36
    23ac:	9f a9       	ldd	r25, Y+55	; 0x37
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	9f ab       	std	Y+55, r25	; 0x37
    23b2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b4:	8e a9       	ldd	r24, Y+54	; 0x36
    23b6:	9f a9       	ldd	r25, Y+55	; 0x37
    23b8:	00 97       	sbiw	r24, 0x00	; 0
    23ba:	69 f7       	brne	.-38     	; 0x2396 <LCD_sendCommand+0x3bc>
    23bc:	2d c0       	rjmp	.+90     	; 0x2418 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23be:	68 ad       	ldd	r22, Y+56	; 0x38
    23c0:	79 ad       	ldd	r23, Y+57	; 0x39
    23c2:	8a ad       	ldd	r24, Y+58	; 0x3a
    23c4:	9b ad       	ldd	r25, Y+59	; 0x3b
    23c6:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	9f ab       	std	Y+55, r25	; 0x37
    23d0:	8e ab       	std	Y+54, r24	; 0x36
    23d2:	8e a9       	ldd	r24, Y+54	; 0x36
    23d4:	9f a9       	ldd	r25, Y+55	; 0x37
    23d6:	9b ab       	std	Y+51, r25	; 0x33
    23d8:	8a ab       	std	Y+50, r24	; 0x32
    23da:	8a a9       	ldd	r24, Y+50	; 0x32
    23dc:	9b a9       	ldd	r25, Y+51	; 0x33
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <LCD_sendCommand+0x404>
    23e2:	9b ab       	std	Y+51, r25	; 0x33
    23e4:	8a ab       	std	Y+50, r24	; 0x32
    23e6:	18 c0       	rjmp	.+48     	; 0x2418 <LCD_sendCommand+0x43e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23e8:	fe 01       	movw	r30, r28
    23ea:	ef 5b       	subi	r30, 0xBF	; 191
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	fe 01       	movw	r30, r28
    2400:	e0 5c       	subi	r30, 0xC0	; 192
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 83       	st	Z, r24
    2406:	fe 01       	movw	r30, r28
    2408:	e0 5c       	subi	r30, 0xC0	; 192
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 81       	ld	r24, Z
    240e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2410:	89 a9       	ldd	r24, Y+49	; 0x31
    2412:	8a 95       	dec	r24
    2414:	f1 f7       	brne	.-4      	; 0x2412 <LCD_sendCommand+0x438>
    2416:	89 ab       	std	Y+49, r24	; 0x31
    _delay_us(LCD_TA_DELAY_US);         /* Delay for timing */
    GPIO_writePort(LCD_DATA_PORT, a_lcdCommand);  /* Send command to data port */
    2418:	fe 01       	movw	r30, r28
    241a:	ef 59       	subi	r30, 0x9F	; 159
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	60 81       	ld	r22, Z
    2422:	0e 94 43 08 	call	0x1086	; 0x1086 <GPIO_writePort>
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a0 e8       	ldi	r26, 0x80	; 128
    242c:	bf e3       	ldi	r27, 0x3F	; 63
    242e:	8d a7       	std	Y+45, r24	; 0x2d
    2430:	9e a7       	std	Y+46, r25	; 0x2e
    2432:	af a7       	std	Y+47, r26	; 0x2f
    2434:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2436:	6d a5       	ldd	r22, Y+45	; 0x2d
    2438:	7e a5       	ldd	r23, Y+46	; 0x2e
    243a:	8f a5       	ldd	r24, Y+47	; 0x2f
    243c:	98 a9       	ldd	r25, Y+48	; 0x30
    243e:	2b ea       	ldi	r18, 0xAB	; 171
    2440:	3a ea       	ldi	r19, 0xAA	; 170
    2442:	4a ea       	ldi	r20, 0xAA	; 170
    2444:	50 e4       	ldi	r21, 0x40	; 64
    2446:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	89 a7       	std	Y+41, r24	; 0x29
    2450:	9a a7       	std	Y+42, r25	; 0x2a
    2452:	ab a7       	std	Y+43, r26	; 0x2b
    2454:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2456:	69 a5       	ldd	r22, Y+41	; 0x29
    2458:	7a a5       	ldd	r23, Y+42	; 0x2a
    245a:	8b a5       	ldd	r24, Y+43	; 0x2b
    245c:	9c a5       	ldd	r25, Y+44	; 0x2c
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e8       	ldi	r20, 0x80	; 128
    2464:	5f e3       	ldi	r21, 0x3F	; 63
    2466:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    246a:	88 23       	and	r24, r24
    246c:	1c f4       	brge	.+6      	; 0x2474 <LCD_sendCommand+0x49a>
		__ticks = 1;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	88 a7       	std	Y+40, r24	; 0x28
    2472:	91 c0       	rjmp	.+290    	; 0x2596 <LCD_sendCommand+0x5bc>
	else if (__tmp > 255)
    2474:	69 a5       	ldd	r22, Y+41	; 0x29
    2476:	7a a5       	ldd	r23, Y+42	; 0x2a
    2478:	8b a5       	ldd	r24, Y+43	; 0x2b
    247a:	9c a5       	ldd	r25, Y+44	; 0x2c
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	4f e7       	ldi	r20, 0x7F	; 127
    2482:	53 e4       	ldi	r21, 0x43	; 67
    2484:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2488:	18 16       	cp	r1, r24
    248a:	0c f0       	brlt	.+2      	; 0x248e <LCD_sendCommand+0x4b4>
    248c:	7b c0       	rjmp	.+246    	; 0x2584 <LCD_sendCommand+0x5aa>
	{
		_delay_ms(__us / 1000.0);
    248e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2490:	7e a5       	ldd	r23, Y+46	; 0x2e
    2492:	8f a5       	ldd	r24, Y+47	; 0x2f
    2494:	98 a9       	ldd	r25, Y+48	; 0x30
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	4a e7       	ldi	r20, 0x7A	; 122
    249c:	54 e4       	ldi	r21, 0x44	; 68
    249e:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	8c a3       	std	Y+36, r24	; 0x24
    24a8:	9d a3       	std	Y+37, r25	; 0x25
    24aa:	ae a3       	std	Y+38, r26	; 0x26
    24ac:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ae:	6c a1       	ldd	r22, Y+36	; 0x24
    24b0:	7d a1       	ldd	r23, Y+37	; 0x25
    24b2:	8e a1       	ldd	r24, Y+38	; 0x26
    24b4:	9f a1       	ldd	r25, Y+39	; 0x27
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	4a e7       	ldi	r20, 0x7A	; 122
    24bc:	55 e4       	ldi	r21, 0x45	; 69
    24be:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	88 a3       	std	Y+32, r24	; 0x20
    24c8:	99 a3       	std	Y+33, r25	; 0x21
    24ca:	aa a3       	std	Y+34, r26	; 0x22
    24cc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    24ce:	68 a1       	ldd	r22, Y+32	; 0x20
    24d0:	79 a1       	ldd	r23, Y+33	; 0x21
    24d2:	8a a1       	ldd	r24, Y+34	; 0x22
    24d4:	9b a1       	ldd	r25, Y+35	; 0x23
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e8       	ldi	r20, 0x80	; 128
    24dc:	5f e3       	ldi	r21, 0x3F	; 63
    24de:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    24e2:	88 23       	and	r24, r24
    24e4:	2c f4       	brge	.+10     	; 0x24f0 <LCD_sendCommand+0x516>
		__ticks = 1;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9f 8f       	std	Y+31, r25	; 0x1f
    24ec:	8e 8f       	std	Y+30, r24	; 0x1e
    24ee:	3f c0       	rjmp	.+126    	; 0x256e <LCD_sendCommand+0x594>
	else if (__tmp > 65535)
    24f0:	68 a1       	ldd	r22, Y+32	; 0x20
    24f2:	79 a1       	ldd	r23, Y+33	; 0x21
    24f4:	8a a1       	ldd	r24, Y+34	; 0x22
    24f6:	9b a1       	ldd	r25, Y+35	; 0x23
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	3f ef       	ldi	r19, 0xFF	; 255
    24fc:	4f e7       	ldi	r20, 0x7F	; 127
    24fe:	57 e4       	ldi	r21, 0x47	; 71
    2500:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2504:	18 16       	cp	r1, r24
    2506:	4c f5       	brge	.+82     	; 0x255a <LCD_sendCommand+0x580>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2508:	6c a1       	ldd	r22, Y+36	; 0x24
    250a:	7d a1       	ldd	r23, Y+37	; 0x25
    250c:	8e a1       	ldd	r24, Y+38	; 0x26
    250e:	9f a1       	ldd	r25, Y+39	; 0x27
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e2       	ldi	r20, 0x20	; 32
    2516:	51 e4       	ldi	r21, 0x41	; 65
    2518:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	9f 8f       	std	Y+31, r25	; 0x1f
    252e:	8e 8f       	std	Y+30, r24	; 0x1e
    2530:	0f c0       	rjmp	.+30     	; 0x2550 <LCD_sendCommand+0x576>
    2532:	80 e9       	ldi	r24, 0x90	; 144
    2534:	91 e0       	ldi	r25, 0x01	; 1
    2536:	9d 8f       	std	Y+29, r25	; 0x1d
    2538:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    253a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    253c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <LCD_sendCommand+0x564>
    2542:	9d 8f       	std	Y+29, r25	; 0x1d
    2544:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2546:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2548:	9f 8d       	ldd	r25, Y+31	; 0x1f
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	9f 8f       	std	Y+31, r25	; 0x1f
    254e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2550:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2552:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	69 f7       	brne	.-38     	; 0x2532 <LCD_sendCommand+0x558>
    2558:	24 c0       	rjmp	.+72     	; 0x25a2 <LCD_sendCommand+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255a:	68 a1       	ldd	r22, Y+32	; 0x20
    255c:	79 a1       	ldd	r23, Y+33	; 0x21
    255e:	8a a1       	ldd	r24, Y+34	; 0x22
    2560:	9b a1       	ldd	r25, Y+35	; 0x23
    2562:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	9f 8f       	std	Y+31, r25	; 0x1f
    256c:	8e 8f       	std	Y+30, r24	; 0x1e
    256e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2570:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2572:	9b 8f       	std	Y+27, r25	; 0x1b
    2574:	8a 8f       	std	Y+26, r24	; 0x1a
    2576:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2578:	9b 8d       	ldd	r25, Y+27	; 0x1b
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_sendCommand+0x5a0>
    257e:	9b 8f       	std	Y+27, r25	; 0x1b
    2580:	8a 8f       	std	Y+26, r24	; 0x1a
    2582:	0f c0       	rjmp	.+30     	; 0x25a2 <LCD_sendCommand+0x5c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2584:	69 a5       	ldd	r22, Y+41	; 0x29
    2586:	7a a5       	ldd	r23, Y+42	; 0x2a
    2588:	8b a5       	ldd	r24, Y+43	; 0x2b
    258a:	9c a5       	ldd	r25, Y+44	; 0x2c
    258c:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	88 a7       	std	Y+40, r24	; 0x28
    2596:	88 a5       	ldd	r24, Y+40	; 0x28
    2598:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    259a:	89 8d       	ldd	r24, Y+25	; 0x19
    259c:	8a 95       	dec	r24
    259e:	f1 f7       	brne	.-4      	; 0x259c <LCD_sendCommand+0x5c2>
    25a0:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(LCD_TA_DELAY_US);         /* Delay for timing */
    GPIO_ARR_setPinState(LCD_E, LOW);   /* Disable the LCD to latch the command */
    25a2:	89 e1       	ldi	r24, 0x19	; 25
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_ARR_setPinState>
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	a0 e8       	ldi	r26, 0x80	; 128
    25b0:	bf e3       	ldi	r27, 0x3F	; 63
    25b2:	8d 8b       	std	Y+21, r24	; 0x15
    25b4:	9e 8b       	std	Y+22, r25	; 0x16
    25b6:	af 8b       	std	Y+23, r26	; 0x17
    25b8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25ba:	6d 89       	ldd	r22, Y+21	; 0x15
    25bc:	7e 89       	ldd	r23, Y+22	; 0x16
    25be:	8f 89       	ldd	r24, Y+23	; 0x17
    25c0:	98 8d       	ldd	r25, Y+24	; 0x18
    25c2:	2b ea       	ldi	r18, 0xAB	; 171
    25c4:	3a ea       	ldi	r19, 0xAA	; 170
    25c6:	4a ea       	ldi	r20, 0xAA	; 170
    25c8:	50 e4       	ldi	r21, 0x40	; 64
    25ca:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	89 8b       	std	Y+17, r24	; 0x11
    25d4:	9a 8b       	std	Y+18, r25	; 0x12
    25d6:	ab 8b       	std	Y+19, r26	; 0x13
    25d8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25da:	69 89       	ldd	r22, Y+17	; 0x11
    25dc:	7a 89       	ldd	r23, Y+18	; 0x12
    25de:	8b 89       	ldd	r24, Y+19	; 0x13
    25e0:	9c 89       	ldd	r25, Y+20	; 0x14
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e8       	ldi	r20, 0x80	; 128
    25e8:	5f e3       	ldi	r21, 0x3F	; 63
    25ea:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    25ee:	88 23       	and	r24, r24
    25f0:	1c f4       	brge	.+6      	; 0x25f8 <LCD_sendCommand+0x61e>
		__ticks = 1;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	88 8b       	std	Y+16, r24	; 0x10
    25f6:	91 c0       	rjmp	.+290    	; 0x271a <LCD_sendCommand+0x740>
	else if (__tmp > 255)
    25f8:	69 89       	ldd	r22, Y+17	; 0x11
    25fa:	7a 89       	ldd	r23, Y+18	; 0x12
    25fc:	8b 89       	ldd	r24, Y+19	; 0x13
    25fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	4f e7       	ldi	r20, 0x7F	; 127
    2606:	53 e4       	ldi	r21, 0x43	; 67
    2608:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    260c:	18 16       	cp	r1, r24
    260e:	0c f0       	brlt	.+2      	; 0x2612 <LCD_sendCommand+0x638>
    2610:	7b c0       	rjmp	.+246    	; 0x2708 <LCD_sendCommand+0x72e>
	{
		_delay_ms(__us / 1000.0);
    2612:	6d 89       	ldd	r22, Y+21	; 0x15
    2614:	7e 89       	ldd	r23, Y+22	; 0x16
    2616:	8f 89       	ldd	r24, Y+23	; 0x17
    2618:	98 8d       	ldd	r25, Y+24	; 0x18
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	4a e7       	ldi	r20, 0x7A	; 122
    2620:	54 e4       	ldi	r21, 0x44	; 68
    2622:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	8c 87       	std	Y+12, r24	; 0x0c
    262c:	9d 87       	std	Y+13, r25	; 0x0d
    262e:	ae 87       	std	Y+14, r26	; 0x0e
    2630:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2632:	6c 85       	ldd	r22, Y+12	; 0x0c
    2634:	7d 85       	ldd	r23, Y+13	; 0x0d
    2636:	8e 85       	ldd	r24, Y+14	; 0x0e
    2638:	9f 85       	ldd	r25, Y+15	; 0x0f
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	4a e7       	ldi	r20, 0x7A	; 122
    2640:	55 e4       	ldi	r21, 0x45	; 69
    2642:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	88 87       	std	Y+8, r24	; 0x08
    264c:	99 87       	std	Y+9, r25	; 0x09
    264e:	aa 87       	std	Y+10, r26	; 0x0a
    2650:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2652:	68 85       	ldd	r22, Y+8	; 0x08
    2654:	79 85       	ldd	r23, Y+9	; 0x09
    2656:	8a 85       	ldd	r24, Y+10	; 0x0a
    2658:	9b 85       	ldd	r25, Y+11	; 0x0b
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e8       	ldi	r20, 0x80	; 128
    2660:	5f e3       	ldi	r21, 0x3F	; 63
    2662:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    2666:	88 23       	and	r24, r24
    2668:	2c f4       	brge	.+10     	; 0x2674 <LCD_sendCommand+0x69a>
		__ticks = 1;
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9f 83       	std	Y+7, r25	; 0x07
    2670:	8e 83       	std	Y+6, r24	; 0x06
    2672:	3f c0       	rjmp	.+126    	; 0x26f2 <LCD_sendCommand+0x718>
	else if (__tmp > 65535)
    2674:	68 85       	ldd	r22, Y+8	; 0x08
    2676:	79 85       	ldd	r23, Y+9	; 0x09
    2678:	8a 85       	ldd	r24, Y+10	; 0x0a
    267a:	9b 85       	ldd	r25, Y+11	; 0x0b
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	3f ef       	ldi	r19, 0xFF	; 255
    2680:	4f e7       	ldi	r20, 0x7F	; 127
    2682:	57 e4       	ldi	r21, 0x47	; 71
    2684:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2688:	18 16       	cp	r1, r24
    268a:	4c f5       	brge	.+82     	; 0x26de <LCD_sendCommand+0x704>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268c:	6c 85       	ldd	r22, Y+12	; 0x0c
    268e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2690:	8e 85       	ldd	r24, Y+14	; 0x0e
    2692:	9f 85       	ldd	r25, Y+15	; 0x0f
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e2       	ldi	r20, 0x20	; 32
    269a:	51 e4       	ldi	r21, 0x41	; 65
    269c:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	9f 83       	std	Y+7, r25	; 0x07
    26b2:	8e 83       	std	Y+6, r24	; 0x06
    26b4:	0f c0       	rjmp	.+30     	; 0x26d4 <LCD_sendCommand+0x6fa>
    26b6:	80 e9       	ldi	r24, 0x90	; 144
    26b8:	91 e0       	ldi	r25, 0x01	; 1
    26ba:	9d 83       	std	Y+5, r25	; 0x05
    26bc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26be:	8c 81       	ldd	r24, Y+4	; 0x04
    26c0:	9d 81       	ldd	r25, Y+5	; 0x05
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <LCD_sendCommand+0x6e8>
    26c6:	9d 83       	std	Y+5, r25	; 0x05
    26c8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ca:	8e 81       	ldd	r24, Y+6	; 0x06
    26cc:	9f 81       	ldd	r25, Y+7	; 0x07
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	9f 83       	std	Y+7, r25	; 0x07
    26d2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d4:	8e 81       	ldd	r24, Y+6	; 0x06
    26d6:	9f 81       	ldd	r25, Y+7	; 0x07
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	69 f7       	brne	.-38     	; 0x26b6 <LCD_sendCommand+0x6dc>
    26dc:	24 c0       	rjmp	.+72     	; 0x2726 <LCD_sendCommand+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26de:	68 85       	ldd	r22, Y+8	; 0x08
    26e0:	79 85       	ldd	r23, Y+9	; 0x09
    26e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    26e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    26e6:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	9f 83       	std	Y+7, r25	; 0x07
    26f0:	8e 83       	std	Y+6, r24	; 0x06
    26f2:	8e 81       	ldd	r24, Y+6	; 0x06
    26f4:	9f 81       	ldd	r25, Y+7	; 0x07
    26f6:	9b 83       	std	Y+3, r25	; 0x03
    26f8:	8a 83       	std	Y+2, r24	; 0x02
    26fa:	8a 81       	ldd	r24, Y+2	; 0x02
    26fc:	9b 81       	ldd	r25, Y+3	; 0x03
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <LCD_sendCommand+0x724>
    2702:	9b 83       	std	Y+3, r25	; 0x03
    2704:	8a 83       	std	Y+2, r24	; 0x02
    2706:	0f c0       	rjmp	.+30     	; 0x2726 <LCD_sendCommand+0x74c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2708:	69 89       	ldd	r22, Y+17	; 0x11
    270a:	7a 89       	ldd	r23, Y+18	; 0x12
    270c:	8b 89       	ldd	r24, Y+19	; 0x13
    270e:	9c 89       	ldd	r25, Y+20	; 0x14
    2710:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	88 8b       	std	Y+16, r24	; 0x10
    271a:	88 89       	ldd	r24, Y+16	; 0x10
    271c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	8a 95       	dec	r24
    2722:	f1 f7       	brne	.-4      	; 0x2720 <LCD_sendCommand+0x746>
    2724:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(LCD_TA_DELAY_US);         /* Delay for timing */
}
    2726:	cf 59       	subi	r28, 0x9F	; 159
    2728:	df 4f       	sbci	r29, 0xFF	; 255
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	de bf       	out	0x3e, r29	; 62
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	cd bf       	out	0x3d, r28	; 61
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	1f 91       	pop	r17
    273a:	0f 91       	pop	r16
    273c:	08 95       	ret

0000273e <LCD_sendChar>:
 * It sets the RS pin to 1 to indicate that the data is a character.
 *
 * @param a_lcdChar The ASCII character to be sent to the LCD.
 */
void LCD_sendChar(uint8 a_lcdChar)
{
    273e:	0f 93       	push	r16
    2740:	1f 93       	push	r17
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
    274a:	c1 56       	subi	r28, 0x61	; 97
    274c:	d0 40       	sbci	r29, 0x00	; 0
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	fe 01       	movw	r30, r28
    275a:	ef 59       	subi	r30, 0x9F	; 159
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 83       	st	Z, r24
    GPIO_ARR_setPinState(LCD_RS, HIGH);  /* Set RS to 1 for data mode */
    2760:	88 e1       	ldi	r24, 0x18	; 24
    2762:	61 e0       	ldi	r22, 0x01	; 1
    2764:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_ARR_setPinState>
    2768:	fe 01       	movw	r30, r28
    276a:	e3 5a       	subi	r30, 0xA3	; 163
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	a0 e8       	ldi	r26, 0x80	; 128
    2774:	bf e3       	ldi	r27, 0x3F	; 63
    2776:	80 83       	st	Z, r24
    2778:	91 83       	std	Z+1, r25	; 0x01
    277a:	a2 83       	std	Z+2, r26	; 0x02
    277c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    277e:	8e 01       	movw	r16, r28
    2780:	07 5a       	subi	r16, 0xA7	; 167
    2782:	1f 4f       	sbci	r17, 0xFF	; 255
    2784:	fe 01       	movw	r30, r28
    2786:	e3 5a       	subi	r30, 0xA3	; 163
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	60 81       	ld	r22, Z
    278c:	71 81       	ldd	r23, Z+1	; 0x01
    278e:	82 81       	ldd	r24, Z+2	; 0x02
    2790:	93 81       	ldd	r25, Z+3	; 0x03
    2792:	2b ea       	ldi	r18, 0xAB	; 171
    2794:	3a ea       	ldi	r19, 0xAA	; 170
    2796:	4a ea       	ldi	r20, 0xAA	; 170
    2798:	50 e4       	ldi	r21, 0x40	; 64
    279a:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	f8 01       	movw	r30, r16
    27a4:	80 83       	st	Z, r24
    27a6:	91 83       	std	Z+1, r25	; 0x01
    27a8:	a2 83       	std	Z+2, r26	; 0x02
    27aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27ac:	fe 01       	movw	r30, r28
    27ae:	e7 5a       	subi	r30, 0xA7	; 167
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	60 81       	ld	r22, Z
    27b4:	71 81       	ldd	r23, Z+1	; 0x01
    27b6:	82 81       	ldd	r24, Z+2	; 0x02
    27b8:	93 81       	ldd	r25, Z+3	; 0x03
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e8       	ldi	r20, 0x80	; 128
    27c0:	5f e3       	ldi	r21, 0x3F	; 63
    27c2:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    27c6:	88 23       	and	r24, r24
    27c8:	34 f4       	brge	.+12     	; 0x27d6 <LCD_sendChar+0x98>
		__ticks = 1;
    27ca:	fe 01       	movw	r30, r28
    27cc:	e8 5a       	subi	r30, 0xA8	; 168
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	80 83       	st	Z, r24
    27d4:	e0 c0       	rjmp	.+448    	; 0x2996 <LCD_sendChar+0x258>
	else if (__tmp > 255)
    27d6:	fe 01       	movw	r30, r28
    27d8:	e7 5a       	subi	r30, 0xA7	; 167
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	60 81       	ld	r22, Z
    27de:	71 81       	ldd	r23, Z+1	; 0x01
    27e0:	82 81       	ldd	r24, Z+2	; 0x02
    27e2:	93 81       	ldd	r25, Z+3	; 0x03
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	4f e7       	ldi	r20, 0x7F	; 127
    27ea:	53 e4       	ldi	r21, 0x43	; 67
    27ec:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    27f0:	18 16       	cp	r1, r24
    27f2:	0c f0       	brlt	.+2      	; 0x27f6 <LCD_sendChar+0xb8>
    27f4:	c0 c0       	rjmp	.+384    	; 0x2976 <LCD_sendChar+0x238>
	{
		_delay_ms(__us / 1000.0);
    27f6:	fe 01       	movw	r30, r28
    27f8:	e3 5a       	subi	r30, 0xA3	; 163
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	60 81       	ld	r22, Z
    27fe:	71 81       	ldd	r23, Z+1	; 0x01
    2800:	82 81       	ldd	r24, Z+2	; 0x02
    2802:	93 81       	ldd	r25, Z+3	; 0x03
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	4a e7       	ldi	r20, 0x7A	; 122
    280a:	54 e4       	ldi	r21, 0x44	; 68
    280c:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	fe 01       	movw	r30, r28
    2816:	ec 5a       	subi	r30, 0xAC	; 172
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	80 83       	st	Z, r24
    281c:	91 83       	std	Z+1, r25	; 0x01
    281e:	a2 83       	std	Z+2, r26	; 0x02
    2820:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2822:	8e 01       	movw	r16, r28
    2824:	00 5b       	subi	r16, 0xB0	; 176
    2826:	1f 4f       	sbci	r17, 0xFF	; 255
    2828:	fe 01       	movw	r30, r28
    282a:	ec 5a       	subi	r30, 0xAC	; 172
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	60 81       	ld	r22, Z
    2830:	71 81       	ldd	r23, Z+1	; 0x01
    2832:	82 81       	ldd	r24, Z+2	; 0x02
    2834:	93 81       	ldd	r25, Z+3	; 0x03
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	4a e7       	ldi	r20, 0x7A	; 122
    283c:	55 e4       	ldi	r21, 0x45	; 69
    283e:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	f8 01       	movw	r30, r16
    2848:	80 83       	st	Z, r24
    284a:	91 83       	std	Z+1, r25	; 0x01
    284c:	a2 83       	std	Z+2, r26	; 0x02
    284e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2850:	fe 01       	movw	r30, r28
    2852:	e0 5b       	subi	r30, 0xB0	; 176
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	60 81       	ld	r22, Z
    2858:	71 81       	ldd	r23, Z+1	; 0x01
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	93 81       	ldd	r25, Z+3	; 0x03
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e8       	ldi	r20, 0x80	; 128
    2864:	5f e3       	ldi	r21, 0x3F	; 63
    2866:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    286a:	88 23       	and	r24, r24
    286c:	44 f4       	brge	.+16     	; 0x287e <LCD_sendChar+0x140>
		__ticks = 1;
    286e:	fe 01       	movw	r30, r28
    2870:	e2 5b       	subi	r30, 0xB2	; 178
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	80 83       	st	Z, r24
    287c:	64 c0       	rjmp	.+200    	; 0x2946 <LCD_sendChar+0x208>
	else if (__tmp > 65535)
    287e:	fe 01       	movw	r30, r28
    2880:	e0 5b       	subi	r30, 0xB0	; 176
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	60 81       	ld	r22, Z
    2886:	71 81       	ldd	r23, Z+1	; 0x01
    2888:	82 81       	ldd	r24, Z+2	; 0x02
    288a:	93 81       	ldd	r25, Z+3	; 0x03
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	3f ef       	ldi	r19, 0xFF	; 255
    2890:	4f e7       	ldi	r20, 0x7F	; 127
    2892:	57 e4       	ldi	r21, 0x47	; 71
    2894:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2898:	18 16       	cp	r1, r24
    289a:	0c f0       	brlt	.+2      	; 0x289e <LCD_sendChar+0x160>
    289c:	43 c0       	rjmp	.+134    	; 0x2924 <LCD_sendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289e:	fe 01       	movw	r30, r28
    28a0:	ec 5a       	subi	r30, 0xAC	; 172
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	60 81       	ld	r22, Z
    28a6:	71 81       	ldd	r23, Z+1	; 0x01
    28a8:	82 81       	ldd	r24, Z+2	; 0x02
    28aa:	93 81       	ldd	r25, Z+3	; 0x03
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e2       	ldi	r20, 0x20	; 32
    28b2:	51 e4       	ldi	r21, 0x41	; 65
    28b4:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	8e 01       	movw	r16, r28
    28be:	02 5b       	subi	r16, 0xB2	; 178
    28c0:	1f 4f       	sbci	r17, 0xFF	; 255
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	f8 01       	movw	r30, r16
    28d0:	91 83       	std	Z+1, r25	; 0x01
    28d2:	80 83       	st	Z, r24
    28d4:	1f c0       	rjmp	.+62     	; 0x2914 <LCD_sendChar+0x1d6>
    28d6:	fe 01       	movw	r30, r28
    28d8:	e4 5b       	subi	r30, 0xB4	; 180
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	80 e9       	ldi	r24, 0x90	; 144
    28de:	91 e0       	ldi	r25, 0x01	; 1
    28e0:	91 83       	std	Z+1, r25	; 0x01
    28e2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28e4:	fe 01       	movw	r30, r28
    28e6:	e4 5b       	subi	r30, 0xB4	; 180
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	80 81       	ld	r24, Z
    28ec:	91 81       	ldd	r25, Z+1	; 0x01
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <LCD_sendChar+0x1b0>
    28f2:	fe 01       	movw	r30, r28
    28f4:	e4 5b       	subi	r30, 0xB4	; 180
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	91 83       	std	Z+1, r25	; 0x01
    28fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fc:	de 01       	movw	r26, r28
    28fe:	a2 5b       	subi	r26, 0xB2	; 178
    2900:	bf 4f       	sbci	r27, 0xFF	; 255
    2902:	fe 01       	movw	r30, r28
    2904:	e2 5b       	subi	r30, 0xB2	; 178
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	80 81       	ld	r24, Z
    290a:	91 81       	ldd	r25, Z+1	; 0x01
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	11 96       	adiw	r26, 0x01	; 1
    2910:	9c 93       	st	X, r25
    2912:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2914:	fe 01       	movw	r30, r28
    2916:	e2 5b       	subi	r30, 0xB2	; 178
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	80 81       	ld	r24, Z
    291c:	91 81       	ldd	r25, Z+1	; 0x01
    291e:	00 97       	sbiw	r24, 0x00	; 0
    2920:	d1 f6       	brne	.-76     	; 0x28d6 <LCD_sendChar+0x198>
    2922:	4b c0       	rjmp	.+150    	; 0x29ba <LCD_sendChar+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2924:	8e 01       	movw	r16, r28
    2926:	02 5b       	subi	r16, 0xB2	; 178
    2928:	1f 4f       	sbci	r17, 0xFF	; 255
    292a:	fe 01       	movw	r30, r28
    292c:	e0 5b       	subi	r30, 0xB0	; 176
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	60 81       	ld	r22, Z
    2932:	71 81       	ldd	r23, Z+1	; 0x01
    2934:	82 81       	ldd	r24, Z+2	; 0x02
    2936:	93 81       	ldd	r25, Z+3	; 0x03
    2938:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	f8 01       	movw	r30, r16
    2942:	91 83       	std	Z+1, r25	; 0x01
    2944:	80 83       	st	Z, r24
    2946:	de 01       	movw	r26, r28
    2948:	a6 5b       	subi	r26, 0xB6	; 182
    294a:	bf 4f       	sbci	r27, 0xFF	; 255
    294c:	fe 01       	movw	r30, r28
    294e:	e2 5b       	subi	r30, 0xB2	; 178
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	80 81       	ld	r24, Z
    2954:	91 81       	ldd	r25, Z+1	; 0x01
    2956:	11 96       	adiw	r26, 0x01	; 1
    2958:	9c 93       	st	X, r25
    295a:	8e 93       	st	-X, r24
    295c:	fe 01       	movw	r30, r28
    295e:	e6 5b       	subi	r30, 0xB6	; 182
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	80 81       	ld	r24, Z
    2964:	91 81       	ldd	r25, Z+1	; 0x01
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	f1 f7       	brne	.-4      	; 0x2966 <LCD_sendChar+0x228>
    296a:	fe 01       	movw	r30, r28
    296c:	e6 5b       	subi	r30, 0xB6	; 182
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	91 83       	std	Z+1, r25	; 0x01
    2972:	80 83       	st	Z, r24
    2974:	22 c0       	rjmp	.+68     	; 0x29ba <LCD_sendChar+0x27c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2976:	8e 01       	movw	r16, r28
    2978:	08 5a       	subi	r16, 0xA8	; 168
    297a:	1f 4f       	sbci	r17, 0xFF	; 255
    297c:	fe 01       	movw	r30, r28
    297e:	e7 5a       	subi	r30, 0xA7	; 167
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	60 81       	ld	r22, Z
    2984:	71 81       	ldd	r23, Z+1	; 0x01
    2986:	82 81       	ldd	r24, Z+2	; 0x02
    2988:	93 81       	ldd	r25, Z+3	; 0x03
    298a:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	f8 01       	movw	r30, r16
    2994:	80 83       	st	Z, r24
    2996:	de 01       	movw	r26, r28
    2998:	a7 5b       	subi	r26, 0xB7	; 183
    299a:	bf 4f       	sbci	r27, 0xFF	; 255
    299c:	fe 01       	movw	r30, r28
    299e:	e8 5a       	subi	r30, 0xA8	; 168
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	80 81       	ld	r24, Z
    29a4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29a6:	fe 01       	movw	r30, r28
    29a8:	e7 5b       	subi	r30, 0xB7	; 183
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	80 81       	ld	r24, Z
    29ae:	8a 95       	dec	r24
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <LCD_sendChar+0x270>
    29b2:	fe 01       	movw	r30, r28
    29b4:	e7 5b       	subi	r30, 0xB7	; 183
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	80 83       	st	Z, r24
    _delay_us(LCD_TA_DELAY_US);          /* Delay for timing */
    GPIO_ARR_setPinState(LCD_E, HIGH);   /* Enable the LCD */
    29ba:	89 e1       	ldi	r24, 0x19	; 25
    29bc:	61 e0       	ldi	r22, 0x01	; 1
    29be:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_ARR_setPinState>
    29c2:	fe 01       	movw	r30, r28
    29c4:	eb 5b       	subi	r30, 0xBB	; 187
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	a0 e8       	ldi	r26, 0x80	; 128
    29ce:	bf e3       	ldi	r27, 0x3F	; 63
    29d0:	80 83       	st	Z, r24
    29d2:	91 83       	std	Z+1, r25	; 0x01
    29d4:	a2 83       	std	Z+2, r26	; 0x02
    29d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29d8:	8e 01       	movw	r16, r28
    29da:	0f 5b       	subi	r16, 0xBF	; 191
    29dc:	1f 4f       	sbci	r17, 0xFF	; 255
    29de:	fe 01       	movw	r30, r28
    29e0:	eb 5b       	subi	r30, 0xBB	; 187
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	60 81       	ld	r22, Z
    29e6:	71 81       	ldd	r23, Z+1	; 0x01
    29e8:	82 81       	ldd	r24, Z+2	; 0x02
    29ea:	93 81       	ldd	r25, Z+3	; 0x03
    29ec:	2b ea       	ldi	r18, 0xAB	; 171
    29ee:	3a ea       	ldi	r19, 0xAA	; 170
    29f0:	4a ea       	ldi	r20, 0xAA	; 170
    29f2:	50 e4       	ldi	r21, 0x40	; 64
    29f4:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	f8 01       	movw	r30, r16
    29fe:	80 83       	st	Z, r24
    2a00:	91 83       	std	Z+1, r25	; 0x01
    2a02:	a2 83       	std	Z+2, r26	; 0x02
    2a04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a06:	fe 01       	movw	r30, r28
    2a08:	ef 5b       	subi	r30, 0xBF	; 191
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	60 81       	ld	r22, Z
    2a0e:	71 81       	ldd	r23, Z+1	; 0x01
    2a10:	82 81       	ldd	r24, Z+2	; 0x02
    2a12:	93 81       	ldd	r25, Z+3	; 0x03
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e8       	ldi	r20, 0x80	; 128
    2a1a:	5f e3       	ldi	r21, 0x3F	; 63
    2a1c:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    2a20:	88 23       	and	r24, r24
    2a22:	34 f4       	brge	.+12     	; 0x2a30 <LCD_sendChar+0x2f2>
		__ticks = 1;
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	fe 01       	movw	r30, r28
    2a28:	e0 5c       	subi	r30, 0xC0	; 192
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 83       	st	Z, r24
    2a2e:	9d c0       	rjmp	.+314    	; 0x2b6a <LCD_sendChar+0x42c>
	else if (__tmp > 255)
    2a30:	fe 01       	movw	r30, r28
    2a32:	ef 5b       	subi	r30, 0xBF	; 191
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	60 81       	ld	r22, Z
    2a38:	71 81       	ldd	r23, Z+1	; 0x01
    2a3a:	82 81       	ldd	r24, Z+2	; 0x02
    2a3c:	93 81       	ldd	r25, Z+3	; 0x03
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	4f e7       	ldi	r20, 0x7F	; 127
    2a44:	53 e4       	ldi	r21, 0x43	; 67
    2a46:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2a4a:	18 16       	cp	r1, r24
    2a4c:	0c f0       	brlt	.+2      	; 0x2a50 <LCD_sendChar+0x312>
    2a4e:	7e c0       	rjmp	.+252    	; 0x2b4c <LCD_sendChar+0x40e>
	{
		_delay_ms(__us / 1000.0);
    2a50:	fe 01       	movw	r30, r28
    2a52:	eb 5b       	subi	r30, 0xBB	; 187
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	60 81       	ld	r22, Z
    2a58:	71 81       	ldd	r23, Z+1	; 0x01
    2a5a:	82 81       	ldd	r24, Z+2	; 0x02
    2a5c:	93 81       	ldd	r25, Z+3	; 0x03
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	4a e7       	ldi	r20, 0x7A	; 122
    2a64:	54 e4       	ldi	r21, 0x44	; 68
    2a66:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	8c af       	std	Y+60, r24	; 0x3c
    2a70:	9d af       	std	Y+61, r25	; 0x3d
    2a72:	ae af       	std	Y+62, r26	; 0x3e
    2a74:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a76:	6c ad       	ldd	r22, Y+60	; 0x3c
    2a78:	7d ad       	ldd	r23, Y+61	; 0x3d
    2a7a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	4a e7       	ldi	r20, 0x7A	; 122
    2a84:	55 e4       	ldi	r21, 0x45	; 69
    2a86:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	88 af       	std	Y+56, r24	; 0x38
    2a90:	99 af       	std	Y+57, r25	; 0x39
    2a92:	aa af       	std	Y+58, r26	; 0x3a
    2a94:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2a96:	68 ad       	ldd	r22, Y+56	; 0x38
    2a98:	79 ad       	ldd	r23, Y+57	; 0x39
    2a9a:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a9c:	9b ad       	ldd	r25, Y+59	; 0x3b
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	40 e8       	ldi	r20, 0x80	; 128
    2aa4:	5f e3       	ldi	r21, 0x3F	; 63
    2aa6:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    2aaa:	88 23       	and	r24, r24
    2aac:	2c f4       	brge	.+10     	; 0x2ab8 <LCD_sendChar+0x37a>
		__ticks = 1;
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	9f ab       	std	Y+55, r25	; 0x37
    2ab4:	8e ab       	std	Y+54, r24	; 0x36
    2ab6:	3f c0       	rjmp	.+126    	; 0x2b36 <LCD_sendChar+0x3f8>
	else if (__tmp > 65535)
    2ab8:	68 ad       	ldd	r22, Y+56	; 0x38
    2aba:	79 ad       	ldd	r23, Y+57	; 0x39
    2abc:	8a ad       	ldd	r24, Y+58	; 0x3a
    2abe:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	3f ef       	ldi	r19, 0xFF	; 255
    2ac4:	4f e7       	ldi	r20, 0x7F	; 127
    2ac6:	57 e4       	ldi	r21, 0x47	; 71
    2ac8:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2acc:	18 16       	cp	r1, r24
    2ace:	4c f5       	brge	.+82     	; 0x2b22 <LCD_sendChar+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad0:	6c ad       	ldd	r22, Y+60	; 0x3c
    2ad2:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ad4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ad6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e2       	ldi	r20, 0x20	; 32
    2ade:	51 e4       	ldi	r21, 0x41	; 65
    2ae0:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	bc 01       	movw	r22, r24
    2aea:	cd 01       	movw	r24, r26
    2aec:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	9f ab       	std	Y+55, r25	; 0x37
    2af6:	8e ab       	std	Y+54, r24	; 0x36
    2af8:	0f c0       	rjmp	.+30     	; 0x2b18 <LCD_sendChar+0x3da>
    2afa:	80 e9       	ldi	r24, 0x90	; 144
    2afc:	91 e0       	ldi	r25, 0x01	; 1
    2afe:	9d ab       	std	Y+53, r25	; 0x35
    2b00:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b02:	8c a9       	ldd	r24, Y+52	; 0x34
    2b04:	9d a9       	ldd	r25, Y+53	; 0x35
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	f1 f7       	brne	.-4      	; 0x2b06 <LCD_sendChar+0x3c8>
    2b0a:	9d ab       	std	Y+53, r25	; 0x35
    2b0c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b0e:	8e a9       	ldd	r24, Y+54	; 0x36
    2b10:	9f a9       	ldd	r25, Y+55	; 0x37
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	9f ab       	std	Y+55, r25	; 0x37
    2b16:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b18:	8e a9       	ldd	r24, Y+54	; 0x36
    2b1a:	9f a9       	ldd	r25, Y+55	; 0x37
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	69 f7       	brne	.-38     	; 0x2afa <LCD_sendChar+0x3bc>
    2b20:	2d c0       	rjmp	.+90     	; 0x2b7c <LCD_sendChar+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b22:	68 ad       	ldd	r22, Y+56	; 0x38
    2b24:	79 ad       	ldd	r23, Y+57	; 0x39
    2b26:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b28:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b2a:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	9f ab       	std	Y+55, r25	; 0x37
    2b34:	8e ab       	std	Y+54, r24	; 0x36
    2b36:	8e a9       	ldd	r24, Y+54	; 0x36
    2b38:	9f a9       	ldd	r25, Y+55	; 0x37
    2b3a:	9b ab       	std	Y+51, r25	; 0x33
    2b3c:	8a ab       	std	Y+50, r24	; 0x32
    2b3e:	8a a9       	ldd	r24, Y+50	; 0x32
    2b40:	9b a9       	ldd	r25, Y+51	; 0x33
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <LCD_sendChar+0x404>
    2b46:	9b ab       	std	Y+51, r25	; 0x33
    2b48:	8a ab       	std	Y+50, r24	; 0x32
    2b4a:	18 c0       	rjmp	.+48     	; 0x2b7c <LCD_sendChar+0x43e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	ef 5b       	subi	r30, 0xBF	; 191
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	60 81       	ld	r22, Z
    2b54:	71 81       	ldd	r23, Z+1	; 0x01
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	93 81       	ldd	r25, Z+3	; 0x03
    2b5a:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	fe 01       	movw	r30, r28
    2b64:	e0 5c       	subi	r30, 0xC0	; 192
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	80 83       	st	Z, r24
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e0 5c       	subi	r30, 0xC0	; 192
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	80 81       	ld	r24, Z
    2b72:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b74:	89 a9       	ldd	r24, Y+49	; 0x31
    2b76:	8a 95       	dec	r24
    2b78:	f1 f7       	brne	.-4      	; 0x2b76 <LCD_sendChar+0x438>
    2b7a:	89 ab       	std	Y+49, r24	; 0x31
    _delay_us(LCD_TA_DELAY_US);          /* Delay for timing */
    GPIO_writePort(LCD_DATA_PORT, a_lcdChar);  /* Send character to data port */
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	ef 59       	subi	r30, 0x9F	; 159
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	82 e0       	ldi	r24, 0x02	; 2
    2b84:	60 81       	ld	r22, Z
    2b86:	0e 94 43 08 	call	0x1086	; 0x1086 <GPIO_writePort>
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	a0 e8       	ldi	r26, 0x80	; 128
    2b90:	bf e3       	ldi	r27, 0x3F	; 63
    2b92:	8d a7       	std	Y+45, r24	; 0x2d
    2b94:	9e a7       	std	Y+46, r25	; 0x2e
    2b96:	af a7       	std	Y+47, r26	; 0x2f
    2b98:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b9a:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b9c:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ba0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ba2:	2b ea       	ldi	r18, 0xAB	; 171
    2ba4:	3a ea       	ldi	r19, 0xAA	; 170
    2ba6:	4a ea       	ldi	r20, 0xAA	; 170
    2ba8:	50 e4       	ldi	r21, 0x40	; 64
    2baa:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	89 a7       	std	Y+41, r24	; 0x29
    2bb4:	9a a7       	std	Y+42, r25	; 0x2a
    2bb6:	ab a7       	std	Y+43, r26	; 0x2b
    2bb8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2bba:	69 a5       	ldd	r22, Y+41	; 0x29
    2bbc:	7a a5       	ldd	r23, Y+42	; 0x2a
    2bbe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bc0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e8       	ldi	r20, 0x80	; 128
    2bc8:	5f e3       	ldi	r21, 0x3F	; 63
    2bca:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    2bce:	88 23       	and	r24, r24
    2bd0:	1c f4       	brge	.+6      	; 0x2bd8 <LCD_sendChar+0x49a>
		__ticks = 1;
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	88 a7       	std	Y+40, r24	; 0x28
    2bd6:	91 c0       	rjmp	.+290    	; 0x2cfa <LCD_sendChar+0x5bc>
	else if (__tmp > 255)
    2bd8:	69 a5       	ldd	r22, Y+41	; 0x29
    2bda:	7a a5       	ldd	r23, Y+42	; 0x2a
    2bdc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bde:	9c a5       	ldd	r25, Y+44	; 0x2c
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	4f e7       	ldi	r20, 0x7F	; 127
    2be6:	53 e4       	ldi	r21, 0x43	; 67
    2be8:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2bec:	18 16       	cp	r1, r24
    2bee:	0c f0       	brlt	.+2      	; 0x2bf2 <LCD_sendChar+0x4b4>
    2bf0:	7b c0       	rjmp	.+246    	; 0x2ce8 <LCD_sendChar+0x5aa>
	{
		_delay_ms(__us / 1000.0);
    2bf2:	6d a5       	ldd	r22, Y+45	; 0x2d
    2bf4:	7e a5       	ldd	r23, Y+46	; 0x2e
    2bf6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bf8:	98 a9       	ldd	r25, Y+48	; 0x30
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	4a e7       	ldi	r20, 0x7A	; 122
    2c00:	54 e4       	ldi	r21, 0x44	; 68
    2c02:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	8c a3       	std	Y+36, r24	; 0x24
    2c0c:	9d a3       	std	Y+37, r25	; 0x25
    2c0e:	ae a3       	std	Y+38, r26	; 0x26
    2c10:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c12:	6c a1       	ldd	r22, Y+36	; 0x24
    2c14:	7d a1       	ldd	r23, Y+37	; 0x25
    2c16:	8e a1       	ldd	r24, Y+38	; 0x26
    2c18:	9f a1       	ldd	r25, Y+39	; 0x27
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	4a e7       	ldi	r20, 0x7A	; 122
    2c20:	55 e4       	ldi	r21, 0x45	; 69
    2c22:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	88 a3       	std	Y+32, r24	; 0x20
    2c2c:	99 a3       	std	Y+33, r25	; 0x21
    2c2e:	aa a3       	std	Y+34, r26	; 0x22
    2c30:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2c32:	68 a1       	ldd	r22, Y+32	; 0x20
    2c34:	79 a1       	ldd	r23, Y+33	; 0x21
    2c36:	8a a1       	ldd	r24, Y+34	; 0x22
    2c38:	9b a1       	ldd	r25, Y+35	; 0x23
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e8       	ldi	r20, 0x80	; 128
    2c40:	5f e3       	ldi	r21, 0x3F	; 63
    2c42:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    2c46:	88 23       	and	r24, r24
    2c48:	2c f4       	brge	.+10     	; 0x2c54 <LCD_sendChar+0x516>
		__ticks = 1;
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	9f 8f       	std	Y+31, r25	; 0x1f
    2c50:	8e 8f       	std	Y+30, r24	; 0x1e
    2c52:	3f c0       	rjmp	.+126    	; 0x2cd2 <LCD_sendChar+0x594>
	else if (__tmp > 65535)
    2c54:	68 a1       	ldd	r22, Y+32	; 0x20
    2c56:	79 a1       	ldd	r23, Y+33	; 0x21
    2c58:	8a a1       	ldd	r24, Y+34	; 0x22
    2c5a:	9b a1       	ldd	r25, Y+35	; 0x23
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	3f ef       	ldi	r19, 0xFF	; 255
    2c60:	4f e7       	ldi	r20, 0x7F	; 127
    2c62:	57 e4       	ldi	r21, 0x47	; 71
    2c64:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2c68:	18 16       	cp	r1, r24
    2c6a:	4c f5       	brge	.+82     	; 0x2cbe <LCD_sendChar+0x580>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c6c:	6c a1       	ldd	r22, Y+36	; 0x24
    2c6e:	7d a1       	ldd	r23, Y+37	; 0x25
    2c70:	8e a1       	ldd	r24, Y+38	; 0x26
    2c72:	9f a1       	ldd	r25, Y+39	; 0x27
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e2       	ldi	r20, 0x20	; 32
    2c7a:	51 e4       	ldi	r21, 0x41	; 65
    2c7c:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	9f 8f       	std	Y+31, r25	; 0x1f
    2c92:	8e 8f       	std	Y+30, r24	; 0x1e
    2c94:	0f c0       	rjmp	.+30     	; 0x2cb4 <LCD_sendChar+0x576>
    2c96:	80 e9       	ldi	r24, 0x90	; 144
    2c98:	91 e0       	ldi	r25, 0x01	; 1
    2c9a:	9d 8f       	std	Y+29, r25	; 0x1d
    2c9c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c9e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ca0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <LCD_sendChar+0x564>
    2ca6:	9d 8f       	std	Y+29, r25	; 0x1d
    2ca8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2caa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	9f 8f       	std	Y+31, r25	; 0x1f
    2cb2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cb6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	69 f7       	brne	.-38     	; 0x2c96 <LCD_sendChar+0x558>
    2cbc:	24 c0       	rjmp	.+72     	; 0x2d06 <LCD_sendChar+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbe:	68 a1       	ldd	r22, Y+32	; 0x20
    2cc0:	79 a1       	ldd	r23, Y+33	; 0x21
    2cc2:	8a a1       	ldd	r24, Y+34	; 0x22
    2cc4:	9b a1       	ldd	r25, Y+35	; 0x23
    2cc6:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	9f 8f       	std	Y+31, r25	; 0x1f
    2cd0:	8e 8f       	std	Y+30, r24	; 0x1e
    2cd2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cd4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2cd6:	9b 8f       	std	Y+27, r25	; 0x1b
    2cd8:	8a 8f       	std	Y+26, r24	; 0x1a
    2cda:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cdc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	f1 f7       	brne	.-4      	; 0x2cde <LCD_sendChar+0x5a0>
    2ce2:	9b 8f       	std	Y+27, r25	; 0x1b
    2ce4:	8a 8f       	std	Y+26, r24	; 0x1a
    2ce6:	0f c0       	rjmp	.+30     	; 0x2d06 <LCD_sendChar+0x5c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ce8:	69 a5       	ldd	r22, Y+41	; 0x29
    2cea:	7a a5       	ldd	r23, Y+42	; 0x2a
    2cec:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cee:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cf0:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	88 a7       	std	Y+40, r24	; 0x28
    2cfa:	88 a5       	ldd	r24, Y+40	; 0x28
    2cfc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cfe:	89 8d       	ldd	r24, Y+25	; 0x19
    2d00:	8a 95       	dec	r24
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <LCD_sendChar+0x5c2>
    2d04:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(LCD_TA_DELAY_US);          /* Delay for timing */
    GPIO_ARR_setPinState(LCD_E, LOW);    /* Disable the LCD to latch the character */
    2d06:	89 e1       	ldi	r24, 0x19	; 25
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_ARR_setPinState>
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	a0 e8       	ldi	r26, 0x80	; 128
    2d14:	bf e3       	ldi	r27, 0x3F	; 63
    2d16:	8d 8b       	std	Y+21, r24	; 0x15
    2d18:	9e 8b       	std	Y+22, r25	; 0x16
    2d1a:	af 8b       	std	Y+23, r26	; 0x17
    2d1c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d20:	7e 89       	ldd	r23, Y+22	; 0x16
    2d22:	8f 89       	ldd	r24, Y+23	; 0x17
    2d24:	98 8d       	ldd	r25, Y+24	; 0x18
    2d26:	2b ea       	ldi	r18, 0xAB	; 171
    2d28:	3a ea       	ldi	r19, 0xAA	; 170
    2d2a:	4a ea       	ldi	r20, 0xAA	; 170
    2d2c:	50 e4       	ldi	r21, 0x40	; 64
    2d2e:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	89 8b       	std	Y+17, r24	; 0x11
    2d38:	9a 8b       	std	Y+18, r25	; 0x12
    2d3a:	ab 8b       	std	Y+19, r26	; 0x13
    2d3c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2d3e:	69 89       	ldd	r22, Y+17	; 0x11
    2d40:	7a 89       	ldd	r23, Y+18	; 0x12
    2d42:	8b 89       	ldd	r24, Y+19	; 0x13
    2d44:	9c 89       	ldd	r25, Y+20	; 0x14
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e8       	ldi	r20, 0x80	; 128
    2d4c:	5f e3       	ldi	r21, 0x3F	; 63
    2d4e:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    2d52:	88 23       	and	r24, r24
    2d54:	1c f4       	brge	.+6      	; 0x2d5c <LCD_sendChar+0x61e>
		__ticks = 1;
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	88 8b       	std	Y+16, r24	; 0x10
    2d5a:	91 c0       	rjmp	.+290    	; 0x2e7e <LCD_sendChar+0x740>
	else if (__tmp > 255)
    2d5c:	69 89       	ldd	r22, Y+17	; 0x11
    2d5e:	7a 89       	ldd	r23, Y+18	; 0x12
    2d60:	8b 89       	ldd	r24, Y+19	; 0x13
    2d62:	9c 89       	ldd	r25, Y+20	; 0x14
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	4f e7       	ldi	r20, 0x7F	; 127
    2d6a:	53 e4       	ldi	r21, 0x43	; 67
    2d6c:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2d70:	18 16       	cp	r1, r24
    2d72:	0c f0       	brlt	.+2      	; 0x2d76 <LCD_sendChar+0x638>
    2d74:	7b c0       	rjmp	.+246    	; 0x2e6c <LCD_sendChar+0x72e>
	{
		_delay_ms(__us / 1000.0);
    2d76:	6d 89       	ldd	r22, Y+21	; 0x15
    2d78:	7e 89       	ldd	r23, Y+22	; 0x16
    2d7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	4a e7       	ldi	r20, 0x7A	; 122
    2d84:	54 e4       	ldi	r21, 0x44	; 68
    2d86:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	8c 87       	std	Y+12, r24	; 0x0c
    2d90:	9d 87       	std	Y+13, r25	; 0x0d
    2d92:	ae 87       	std	Y+14, r26	; 0x0e
    2d94:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d96:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d98:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d9c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	4a e7       	ldi	r20, 0x7A	; 122
    2da4:	55 e4       	ldi	r21, 0x45	; 69
    2da6:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	88 87       	std	Y+8, r24	; 0x08
    2db0:	99 87       	std	Y+9, r25	; 0x09
    2db2:	aa 87       	std	Y+10, r26	; 0x0a
    2db4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2db6:	68 85       	ldd	r22, Y+8	; 0x08
    2db8:	79 85       	ldd	r23, Y+9	; 0x09
    2dba:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dbc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	40 e8       	ldi	r20, 0x80	; 128
    2dc4:	5f e3       	ldi	r21, 0x3F	; 63
    2dc6:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    2dca:	88 23       	and	r24, r24
    2dcc:	2c f4       	brge	.+10     	; 0x2dd8 <LCD_sendChar+0x69a>
		__ticks = 1;
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	9f 83       	std	Y+7, r25	; 0x07
    2dd4:	8e 83       	std	Y+6, r24	; 0x06
    2dd6:	3f c0       	rjmp	.+126    	; 0x2e56 <LCD_sendChar+0x718>
	else if (__tmp > 65535)
    2dd8:	68 85       	ldd	r22, Y+8	; 0x08
    2dda:	79 85       	ldd	r23, Y+9	; 0x09
    2ddc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dde:	9b 85       	ldd	r25, Y+11	; 0x0b
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	3f ef       	ldi	r19, 0xFF	; 255
    2de4:	4f e7       	ldi	r20, 0x7F	; 127
    2de6:	57 e4       	ldi	r21, 0x47	; 71
    2de8:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2dec:	18 16       	cp	r1, r24
    2dee:	4c f5       	brge	.+82     	; 0x2e42 <LCD_sendChar+0x704>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df0:	6c 85       	ldd	r22, Y+12	; 0x0c
    2df2:	7d 85       	ldd	r23, Y+13	; 0x0d
    2df4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2df6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	40 e2       	ldi	r20, 0x20	; 32
    2dfe:	51 e4       	ldi	r21, 0x41	; 65
    2e00:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	bc 01       	movw	r22, r24
    2e0a:	cd 01       	movw	r24, r26
    2e0c:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	9f 83       	std	Y+7, r25	; 0x07
    2e16:	8e 83       	std	Y+6, r24	; 0x06
    2e18:	0f c0       	rjmp	.+30     	; 0x2e38 <LCD_sendChar+0x6fa>
    2e1a:	80 e9       	ldi	r24, 0x90	; 144
    2e1c:	91 e0       	ldi	r25, 0x01	; 1
    2e1e:	9d 83       	std	Y+5, r25	; 0x05
    2e20:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e22:	8c 81       	ldd	r24, Y+4	; 0x04
    2e24:	9d 81       	ldd	r25, Y+5	; 0x05
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	f1 f7       	brne	.-4      	; 0x2e26 <LCD_sendChar+0x6e8>
    2e2a:	9d 83       	std	Y+5, r25	; 0x05
    2e2c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e30:	9f 81       	ldd	r25, Y+7	; 0x07
    2e32:	01 97       	sbiw	r24, 0x01	; 1
    2e34:	9f 83       	std	Y+7, r25	; 0x07
    2e36:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e38:	8e 81       	ldd	r24, Y+6	; 0x06
    2e3a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e3c:	00 97       	sbiw	r24, 0x00	; 0
    2e3e:	69 f7       	brne	.-38     	; 0x2e1a <LCD_sendChar+0x6dc>
    2e40:	24 c0       	rjmp	.+72     	; 0x2e8a <LCD_sendChar+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e42:	68 85       	ldd	r22, Y+8	; 0x08
    2e44:	79 85       	ldd	r23, Y+9	; 0x09
    2e46:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e48:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e4a:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	9f 83       	std	Y+7, r25	; 0x07
    2e54:	8e 83       	std	Y+6, r24	; 0x06
    2e56:	8e 81       	ldd	r24, Y+6	; 0x06
    2e58:	9f 81       	ldd	r25, Y+7	; 0x07
    2e5a:	9b 83       	std	Y+3, r25	; 0x03
    2e5c:	8a 83       	std	Y+2, r24	; 0x02
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	9b 81       	ldd	r25, Y+3	; 0x03
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	f1 f7       	brne	.-4      	; 0x2e62 <LCD_sendChar+0x724>
    2e66:	9b 83       	std	Y+3, r25	; 0x03
    2e68:	8a 83       	std	Y+2, r24	; 0x02
    2e6a:	0f c0       	rjmp	.+30     	; 0x2e8a <LCD_sendChar+0x74c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e6c:	69 89       	ldd	r22, Y+17	; 0x11
    2e6e:	7a 89       	ldd	r23, Y+18	; 0x12
    2e70:	8b 89       	ldd	r24, Y+19	; 0x13
    2e72:	9c 89       	ldd	r25, Y+20	; 0x14
    2e74:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	88 8b       	std	Y+16, r24	; 0x10
    2e7e:	88 89       	ldd	r24, Y+16	; 0x10
    2e80:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	8a 95       	dec	r24
    2e86:	f1 f7       	brne	.-4      	; 0x2e84 <LCD_sendChar+0x746>
    2e88:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(LCD_TA_DELAY_US);          /* Delay for timing */
}
    2e8a:	cf 59       	subi	r28, 0x9F	; 159
    2e8c:	df 4f       	sbci	r29, 0xFF	; 255
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	cf 91       	pop	r28
    2e9a:	df 91       	pop	r29
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	08 95       	ret

00002ea2 <LCD_init>:
 *
 * This function configures the LCD by setting the appropriate modes (2-line, 8-bit),
 * turning off the cursor, and clearing the display. It should be called once during initialization.
 */
void LCD_init()
{
    2ea2:	df 93       	push	r29
    2ea4:	cf 93       	push	r28
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	2e 97       	sbiw	r28, 0x0e	; 14
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	de bf       	out	0x3e, r29	; 62
    2eb2:	0f be       	out	0x3f, r0	; 63
    2eb4:	cd bf       	out	0x3d, r28	; 61
    GPIO_ARR_setPinDirection(LCD_RS, PIN_OUTPUT);  /* Set RS pin as output */
    2eb6:	88 e1       	ldi	r24, 0x18	; 24
    2eb8:	61 e0       	ldi	r22, 0x01	; 1
    2eba:	0e 94 c9 0c 	call	0x1992	; 0x1992 <GPIO_ARR_setPinDirection>
    GPIO_ARR_setPinDirection(LCD_E, PIN_OUTPUT);   /* Set E pin as output */
    2ebe:	89 e1       	ldi	r24, 0x19	; 25
    2ec0:	61 e0       	ldi	r22, 0x01	; 1
    2ec2:	0e 94 c9 0c 	call	0x1992	; 0x1992 <GPIO_ARR_setPinDirection>
    GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);  /* Set data port as output */
    2ec6:	82 e0       	ldi	r24, 0x02	; 2
    2ec8:	6f ef       	ldi	r22, 0xFF	; 255
    2eca:	0e 94 ff 07 	call	0xffe	; 0xffe <GPIO_setupPortDirection>
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	a0 ea       	ldi	r26, 0xA0	; 160
    2ed4:	b1 e4       	ldi	r27, 0x41	; 65
    2ed6:	8b 87       	std	Y+11, r24	; 0x0b
    2ed8:	9c 87       	std	Y+12, r25	; 0x0c
    2eda:	ad 87       	std	Y+13, r26	; 0x0d
    2edc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ede:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	4a e7       	ldi	r20, 0x7A	; 122
    2eec:	55 e4       	ldi	r21, 0x45	; 69
    2eee:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	8f 83       	std	Y+7, r24	; 0x07
    2ef8:	98 87       	std	Y+8, r25	; 0x08
    2efa:	a9 87       	std	Y+9, r26	; 0x09
    2efc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2efe:	6f 81       	ldd	r22, Y+7	; 0x07
    2f00:	78 85       	ldd	r23, Y+8	; 0x08
    2f02:	89 85       	ldd	r24, Y+9	; 0x09
    2f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	40 e8       	ldi	r20, 0x80	; 128
    2f0c:	5f e3       	ldi	r21, 0x3F	; 63
    2f0e:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    2f12:	88 23       	and	r24, r24
    2f14:	2c f4       	brge	.+10     	; 0x2f20 <LCD_init+0x7e>
		__ticks = 1;
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	9e 83       	std	Y+6, r25	; 0x06
    2f1c:	8d 83       	std	Y+5, r24	; 0x05
    2f1e:	3f c0       	rjmp	.+126    	; 0x2f9e <LCD_init+0xfc>
	else if (__tmp > 65535)
    2f20:	6f 81       	ldd	r22, Y+7	; 0x07
    2f22:	78 85       	ldd	r23, Y+8	; 0x08
    2f24:	89 85       	ldd	r24, Y+9	; 0x09
    2f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	3f ef       	ldi	r19, 0xFF	; 255
    2f2c:	4f e7       	ldi	r20, 0x7F	; 127
    2f2e:	57 e4       	ldi	r21, 0x47	; 71
    2f30:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2f34:	18 16       	cp	r1, r24
    2f36:	4c f5       	brge	.+82     	; 0x2f8a <LCD_init+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	40 e2       	ldi	r20, 0x20	; 32
    2f46:	51 e4       	ldi	r21, 0x41	; 65
    2f48:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	bc 01       	movw	r22, r24
    2f52:	cd 01       	movw	r24, r26
    2f54:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	9e 83       	std	Y+6, r25	; 0x06
    2f5e:	8d 83       	std	Y+5, r24	; 0x05
    2f60:	0f c0       	rjmp	.+30     	; 0x2f80 <LCD_init+0xde>
    2f62:	80 e9       	ldi	r24, 0x90	; 144
    2f64:	91 e0       	ldi	r25, 0x01	; 1
    2f66:	9c 83       	std	Y+4, r25	; 0x04
    2f68:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	f1 f7       	brne	.-4      	; 0x2f6e <LCD_init+0xcc>
    2f72:	9c 83       	std	Y+4, r25	; 0x04
    2f74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f76:	8d 81       	ldd	r24, Y+5	; 0x05
    2f78:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	9e 83       	std	Y+6, r25	; 0x06
    2f7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f80:	8d 81       	ldd	r24, Y+5	; 0x05
    2f82:	9e 81       	ldd	r25, Y+6	; 0x06
    2f84:	00 97       	sbiw	r24, 0x00	; 0
    2f86:	69 f7       	brne	.-38     	; 0x2f62 <LCD_init+0xc0>
    2f88:	14 c0       	rjmp	.+40     	; 0x2fb2 <LCD_init+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8c:	78 85       	ldd	r23, Y+8	; 0x08
    2f8e:	89 85       	ldd	r24, Y+9	; 0x09
    2f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f92:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	9e 83       	std	Y+6, r25	; 0x06
    2f9c:	8d 83       	std	Y+5, r24	; 0x05
    2f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa2:	9a 83       	std	Y+2, r25	; 0x02
    2fa4:	89 83       	std	Y+1, r24	; 0x01
    2fa6:	89 81       	ldd	r24, Y+1	; 0x01
    2fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <LCD_init+0x108>
    2fae:	9a 83       	std	Y+2, r25	; 0x02
    2fb0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(20);  /* Wait for LCD to power up */

    LCD_sendCommand(LCD_2_LINE_8_BIT_COMMAND);  /* Set LCD to 2 lines, 8-bit mode */
    2fb2:	88 e3       	ldi	r24, 0x38	; 56
    2fb4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_sendCommand>
    LCD_sendCommand(LCD_CURSOR_OFF_COMMAND);    /* Turn off cursor */
    2fb8:	8c e0       	ldi	r24, 0x0C	; 12
    2fba:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_sendCommand>
    LCD_sendCommand(LCD_CLEAR_SCREEN_COMMAND);  /* Clear the LCD screen */
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_sendCommand>
}
    2fc4:	2e 96       	adiw	r28, 0x0e	; 14
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	cf 91       	pop	r28
    2fd2:	df 91       	pop	r29
    2fd4:	08 95       	ret

00002fd6 <LCD_displayString>:
 *
 * @param a_lcdString Pointer to the null-terminated string to be displayed.
 * @return LCD_ERROR Returns SUCSSES if the string fits within the display, otherwise returns EXCEEDMAXCOLUMNS.
 */
uint8 LCD_displayString(const char *a_lcdString)
{
    2fd6:	df 93       	push	r29
    2fd8:	cf 93       	push	r28
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <LCD_displayString+0x6>
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <LCD_displayString+0x8>
    2fde:	0f 92       	push	r0
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	9c 83       	std	Y+4, r25	; 0x04
    2fe6:	8b 83       	std	Y+3, r24	; 0x03
    int i = 0;
    2fe8:	1a 82       	std	Y+2, r1	; 0x02
    2fea:	19 82       	std	Y+1, r1	; 0x01
    2fec:	14 c0       	rjmp	.+40     	; 0x3016 <LCD_displayString+0x40>
    while (a_lcdString[i] != '\0')
    {
        LCD_sendChar(a_lcdString[i]);  /* Send each character in the string */
    2fee:	29 81       	ldd	r18, Y+1	; 0x01
    2ff0:	3a 81       	ldd	r19, Y+2	; 0x02
    2ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	e2 0f       	add	r30, r18
    2ffa:	f3 1f       	adc	r31, r19
    2ffc:	80 81       	ld	r24, Z
    2ffe:	0e 94 9f 13 	call	0x273e	; 0x273e <LCD_sendChar>
        if (i == LCD_MAX_COLUMNS_INDEX)  /* Stop if maximum column index is reached */
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	9a 81       	ldd	r25, Y+2	; 0x02
    3006:	8f 30       	cpi	r24, 0x0F	; 15
    3008:	91 05       	cpc	r25, r1
    300a:	79 f0       	breq	.+30     	; 0x302a <LCD_displayString+0x54>
            break;
        i++;
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	9a 81       	ldd	r25, Y+2	; 0x02
    3010:	01 96       	adiw	r24, 0x01	; 1
    3012:	9a 83       	std	Y+2, r25	; 0x02
    3014:	89 83       	std	Y+1, r24	; 0x01
 * @return LCD_ERROR Returns SUCSSES if the string fits within the display, otherwise returns EXCEEDMAXCOLUMNS.
 */
uint8 LCD_displayString(const char *a_lcdString)
{
    int i = 0;
    while (a_lcdString[i] != '\0')
    3016:	29 81       	ldd	r18, Y+1	; 0x01
    3018:	3a 81       	ldd	r19, Y+2	; 0x02
    301a:	8b 81       	ldd	r24, Y+3	; 0x03
    301c:	9c 81       	ldd	r25, Y+4	; 0x04
    301e:	fc 01       	movw	r30, r24
    3020:	e2 0f       	add	r30, r18
    3022:	f3 1f       	adc	r31, r19
    3024:	80 81       	ld	r24, Z
    3026:	88 23       	and	r24, r24
    3028:	11 f7       	brne	.-60     	; 0x2fee <LCD_displayString+0x18>
        LCD_sendChar(a_lcdString[i]);  /* Send each character in the string */
        if (i == LCD_MAX_COLUMNS_INDEX)  /* Stop if maximum column index is reached */
            break;
        i++;
    }
    return i < LCD_COLUMNS ? SUCSSES : EXCEEDMAXCOLUMNS;  /* Return appropriate status */
    302a:	1d 82       	std	Y+5, r1	; 0x05
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	9a 81       	ldd	r25, Y+2	; 0x02
    3030:	80 31       	cpi	r24, 0x10	; 16
    3032:	91 05       	cpc	r25, r1
    3034:	14 f0       	brlt	.+4      	; 0x303a <LCD_displayString+0x64>
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	8d 83       	std	Y+5, r24	; 0x05
    303a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    303c:	0f 90       	pop	r0
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	cf 91       	pop	r28
    3048:	df 91       	pop	r29
    304a:	08 95       	ret

0000304c <LCD_moveCursor>:
 *
 * @param a_lcdRow The row to move the cursor to (0 to LCD_ROWS-1).
 * @param a_lcdCol The column to move the cursor to (0 to LCD_MAX_COLUMNS_INDEX).
 */
void LCD_moveCursor(uint8 a_lcdRow, uint8 a_lcdCol)
{
    304c:	df 93       	push	r29
    304e:	cf 93       	push	r28
    3050:	00 d0       	rcall	.+0      	; 0x3052 <LCD_moveCursor+0x6>
    3052:	00 d0       	rcall	.+0      	; 0x3054 <LCD_moveCursor+0x8>
    3054:	0f 92       	push	r0
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	8a 83       	std	Y+2, r24	; 0x02
    305c:	6b 83       	std	Y+3, r22	; 0x03
    uint8 lcd_memory_address;

    /* Calculate the required address in the LCD DDRAM */
    switch(a_lcdRow)
    305e:	8a 81       	ldd	r24, Y+2	; 0x02
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	3d 83       	std	Y+5, r19	; 0x05
    3066:	2c 83       	std	Y+4, r18	; 0x04
    3068:	8c 81       	ldd	r24, Y+4	; 0x04
    306a:	9d 81       	ldd	r25, Y+5	; 0x05
    306c:	81 30       	cpi	r24, 0x01	; 1
    306e:	91 05       	cpc	r25, r1
    3070:	c1 f0       	breq	.+48     	; 0x30a2 <LCD_moveCursor+0x56>
    3072:	2c 81       	ldd	r18, Y+4	; 0x04
    3074:	3d 81       	ldd	r19, Y+5	; 0x05
    3076:	22 30       	cpi	r18, 0x02	; 2
    3078:	31 05       	cpc	r19, r1
    307a:	2c f4       	brge	.+10     	; 0x3086 <LCD_moveCursor+0x3a>
    307c:	8c 81       	ldd	r24, Y+4	; 0x04
    307e:	9d 81       	ldd	r25, Y+5	; 0x05
    3080:	00 97       	sbiw	r24, 0x00	; 0
    3082:	61 f0       	breq	.+24     	; 0x309c <LCD_moveCursor+0x50>
    3084:	19 c0       	rjmp	.+50     	; 0x30b8 <LCD_moveCursor+0x6c>
    3086:	2c 81       	ldd	r18, Y+4	; 0x04
    3088:	3d 81       	ldd	r19, Y+5	; 0x05
    308a:	22 30       	cpi	r18, 0x02	; 2
    308c:	31 05       	cpc	r19, r1
    308e:	69 f0       	breq	.+26     	; 0x30aa <LCD_moveCursor+0x5e>
    3090:	8c 81       	ldd	r24, Y+4	; 0x04
    3092:	9d 81       	ldd	r25, Y+5	; 0x05
    3094:	83 30       	cpi	r24, 0x03	; 3
    3096:	91 05       	cpc	r25, r1
    3098:	61 f0       	breq	.+24     	; 0x30b2 <LCD_moveCursor+0x66>
    309a:	0e c0       	rjmp	.+28     	; 0x30b8 <LCD_moveCursor+0x6c>
    {
        case 0:
            lcd_memory_address = a_lcdCol;
    309c:	8b 81       	ldd	r24, Y+3	; 0x03
    309e:	89 83       	std	Y+1, r24	; 0x01
    30a0:	0b c0       	rjmp	.+22     	; 0x30b8 <LCD_moveCursor+0x6c>
            break;
        case 1:
            lcd_memory_address = a_lcdCol + LCD_ROW_1_OFFSET;
    30a2:	8b 81       	ldd	r24, Y+3	; 0x03
    30a4:	80 5c       	subi	r24, 0xC0	; 192
    30a6:	89 83       	std	Y+1, r24	; 0x01
    30a8:	07 c0       	rjmp	.+14     	; 0x30b8 <LCD_moveCursor+0x6c>
            break;
        case 2:
            lcd_memory_address = a_lcdCol + LCD_ROW_2_OFFSET;
    30aa:	8b 81       	ldd	r24, Y+3	; 0x03
    30ac:	80 5f       	subi	r24, 0xF0	; 240
    30ae:	89 83       	std	Y+1, r24	; 0x01
    30b0:	03 c0       	rjmp	.+6      	; 0x30b8 <LCD_moveCursor+0x6c>
            break;
        case 3:
            lcd_memory_address = a_lcdCol + LCD_ROW_3_OFFSET;
    30b2:	8b 81       	ldd	r24, Y+3	; 0x03
    30b4:	80 5b       	subi	r24, 0xB0	; 176
    30b6:	89 83       	std	Y+1, r24	; 0x01
            break;
    }

    /* Move the LCD cursor to this specific address */
    LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	80 68       	ori	r24, 0x80	; 128
    30bc:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_sendCommand>
}
    30c0:	0f 90       	pop	r0
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	08 95       	ret

000030d0 <LCD_displayStringRowColumn>:
 * @param row The row to start displaying the string (0 to LCD_ROWS-1).
 * @param col The column to start displaying the string (0 to LCD_MAX_COLUMNS_INDEX).
 * @param Str Pointer to the null-terminated string to be displayed.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    30d0:	df 93       	push	r29
    30d2:	cf 93       	push	r28
    30d4:	00 d0       	rcall	.+0      	; 0x30d6 <LCD_displayStringRowColumn+0x6>
    30d6:	00 d0       	rcall	.+0      	; 0x30d8 <LCD_displayStringRowColumn+0x8>
    30d8:	cd b7       	in	r28, 0x3d	; 61
    30da:	de b7       	in	r29, 0x3e	; 62
    30dc:	89 83       	std	Y+1, r24	; 0x01
    30de:	6a 83       	std	Y+2, r22	; 0x02
    30e0:	5c 83       	std	Y+4, r21	; 0x04
    30e2:	4b 83       	std	Y+3, r20	; 0x03
    LCD_moveCursor(row, col);  /* Move to specified row and column */
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	6a 81       	ldd	r22, Y+2	; 0x02
    30e8:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_moveCursor>
    LCD_displayString(Str);    /* Display the string at the new cursor location */
    30ec:	8b 81       	ldd	r24, Y+3	; 0x03
    30ee:	9c 81       	ldd	r25, Y+4	; 0x04
    30f0:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayString>
}
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	0f 90       	pop	r0
    30fc:	cf 91       	pop	r28
    30fe:	df 91       	pop	r29
    3100:	08 95       	ret

00003102 <LCD_intgerToString>:
 * displays the string on the LCD.
 *
 * @param data The integer value to be displayed.
 */
void LCD_intgerToString(int data)
{
    3102:	df 93       	push	r29
    3104:	cf 93       	push	r28
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
    310a:	62 97       	sbiw	r28, 0x12	; 18
    310c:	0f b6       	in	r0, 0x3f	; 63
    310e:	f8 94       	cli
    3110:	de bf       	out	0x3e, r29	; 62
    3112:	0f be       	out	0x3f, r0	; 63
    3114:	cd bf       	out	0x3d, r28	; 61
    3116:	9a 8b       	std	Y+18, r25	; 0x12
    3118:	89 8b       	std	Y+17, r24	; 0x11
    char buff[16];  /* Buffer to hold ASCII representation of the integer */
    itoa(data, buff, 10);  /* Convert integer to string (base 10) */
    311a:	89 89       	ldd	r24, Y+17	; 0x11
    311c:	9a 89       	ldd	r25, Y+18	; 0x12
    311e:	9e 01       	movw	r18, r28
    3120:	2f 5f       	subi	r18, 0xFF	; 255
    3122:	3f 4f       	sbci	r19, 0xFF	; 255
    3124:	b9 01       	movw	r22, r18
    3126:	4a e0       	ldi	r20, 0x0A	; 10
    3128:	50 e0       	ldi	r21, 0x00	; 0
    312a:	0e 94 24 1b 	call	0x3648	; 0x3648 <itoa>
    LCD_displayString(buff);  /* Display the resulting string on the LCD */
    312e:	ce 01       	movw	r24, r28
    3130:	01 96       	adiw	r24, 0x01	; 1
    3132:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayString>
}
    3136:	62 96       	adiw	r28, 0x12	; 18
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	f8 94       	cli
    313c:	de bf       	out	0x3e, r29	; 62
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	cd bf       	out	0x3d, r28	; 61
    3142:	cf 91       	pop	r28
    3144:	df 91       	pop	r29
    3146:	08 95       	ret

00003148 <LCD_clearScreen>:
 *
 * This function sends the clear screen command to the LCD, clearing all the displayed
 * characters and resetting the cursor to the home position.
 */
void LCD_clearScreen(void)
{
    3148:	df 93       	push	r29
    314a:	cf 93       	push	r28
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
    LCD_sendCommand(LCD_CLEAR_SCREEN_COMMAND);  /* Send clear display command */
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_sendCommand>
}
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <LDR_getLightIntensity>:
 *      Author: MSI
 */
#include"../common/std_types.h"
#include"../common/common_macros.h"
#include "../mcal/adc.h"
uint16 LDR_getLightIntensity(void) {
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	00 d0       	rcall	.+0      	; 0x3162 <LDR_getLightIntensity+0x6>
    3162:	00 d0       	rcall	.+0      	; 0x3164 <LDR_getLightIntensity+0x8>
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
	uint16 l_val = ADC_readChannel(0);
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	0e 94 c0 07 	call	0xf80	; 0xf80 <ADC_readChannel>
    316e:	9c 83       	std	Y+4, r25	; 0x04
    3170:	8b 83       	std	Y+3, r24	; 0x03
	int l_inten = MAP(((int)l_val), 0, 200, 0, 100);
    3172:	2b 81       	ldd	r18, Y+3	; 0x03
    3174:	3c 81       	ldd	r19, Y+4	; 0x04
    3176:	84 e6       	ldi	r24, 0x64	; 100
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	ac 01       	movw	r20, r24
    317c:	24 9f       	mul	r18, r20
    317e:	c0 01       	movw	r24, r0
    3180:	25 9f       	mul	r18, r21
    3182:	90 0d       	add	r25, r0
    3184:	34 9f       	mul	r19, r20
    3186:	90 0d       	add	r25, r0
    3188:	11 24       	eor	r1, r1
    318a:	28 ec       	ldi	r18, 0xC8	; 200
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	b9 01       	movw	r22, r18
    3190:	0e 94 c6 1a 	call	0x358c	; 0x358c <__divmodhi4>
    3194:	cb 01       	movw	r24, r22
    3196:	9a 83       	std	Y+2, r25	; 0x02
    3198:	89 83       	std	Y+1, r24	; 0x01
	return l_inten;
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	cf 91       	pop	r28
    31a8:	df 91       	pop	r29
    31aa:	08 95       	ret

000031ac <LDR_init>:
void LDR_init() {
    31ac:	df 93       	push	r29
    31ae:	cf 93       	push	r28
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
	ADC_init();
    31b4:	0e 94 87 07 	call	0xf0e	; 0xf0e <ADC_init>
}
    31b8:	cf 91       	pop	r28
    31ba:	df 91       	pop	r29
    31bc:	08 95       	ret

000031be <LED_init>:
#include"../mcal/gpio.h"
#include"../common/std_types.h"
#include"led.h"
uint8 LED_pins[] = { GPIO_PB5, GPIO_PB6, GPIO_PB7 };
void LED_init() {
    31be:	df 93       	push	r29
    31c0:	cf 93       	push	r28
    31c2:	00 d0       	rcall	.+0      	; 0x31c4 <LED_init+0x6>
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	0e c0       	rjmp	.+28     	; 0x31e6 <LED_init+0x28>
	for (int i; i < sizeof(LED_pins); i++) {
		GPIO_ARR_setPinDirection(LED_pins[i], PIN_OUTPUT);
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	9a 81       	ldd	r25, Y+2	; 0x02
    31ce:	fc 01       	movw	r30, r24
    31d0:	ec 54       	subi	r30, 0x4C	; 76
    31d2:	fe 4f       	sbci	r31, 0xFE	; 254
    31d4:	80 81       	ld	r24, Z
    31d6:	61 e0       	ldi	r22, 0x01	; 1
    31d8:	0e 94 c9 0c 	call	0x1992	; 0x1992 <GPIO_ARR_setPinDirection>
#include"../mcal/gpio.h"
#include"../common/std_types.h"
#include"led.h"
uint8 LED_pins[] = { GPIO_PB5, GPIO_PB6, GPIO_PB7 };
void LED_init() {
	for (int i; i < sizeof(LED_pins); i++) {
    31dc:	89 81       	ldd	r24, Y+1	; 0x01
    31de:	9a 81       	ldd	r25, Y+2	; 0x02
    31e0:	01 96       	adiw	r24, 0x01	; 1
    31e2:	9a 83       	std	Y+2, r25	; 0x02
    31e4:	89 83       	std	Y+1, r24	; 0x01
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ea:	83 30       	cpi	r24, 0x03	; 3
    31ec:	91 05       	cpc	r25, r1
    31ee:	68 f3       	brcs	.-38     	; 0x31ca <LED_init+0xc>
		GPIO_ARR_setPinDirection(LED_pins[i], PIN_OUTPUT);
	}
}
    31f0:	0f 90       	pop	r0
    31f2:	0f 90       	pop	r0
    31f4:	cf 91       	pop	r28
    31f6:	df 91       	pop	r29
    31f8:	08 95       	ret

000031fa <LED_on>:

void LED_on(uint8 a_ledid) {
    31fa:	df 93       	push	r29
    31fc:	cf 93       	push	r28
    31fe:	0f 92       	push	r0
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
    3204:	89 83       	std	Y+1, r24	; 0x01
#ifdef LED_POSTIVE_LOGIC
	GPIO_ARR_setPinState(LED_pins[a_ledid], LOGIC_HIGH);
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	88 2f       	mov	r24, r24
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	fc 01       	movw	r30, r24
    320e:	ec 54       	subi	r30, 0x4C	; 76
    3210:	fe 4f       	sbci	r31, 0xFE	; 254
    3212:	80 81       	ld	r24, Z
    3214:	61 e0       	ldi	r22, 0x01	; 1
    3216:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_ARR_setPinState>
#else
	GPIO_ARR_setPinState(LED_pins[a_ledid],LOGIC_LOW);
#endif

}
    321a:	0f 90       	pop	r0
    321c:	cf 91       	pop	r28
    321e:	df 91       	pop	r29
    3220:	08 95       	ret

00003222 <LED_off>:

void LED_off(uint8 a_ledid) {
    3222:	df 93       	push	r29
    3224:	cf 93       	push	r28
    3226:	0f 92       	push	r0
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
    322c:	89 83       	std	Y+1, r24	; 0x01
#ifdef LED_POSTIVE_LOGIC
	GPIO_ARR_setPinState(LED_pins[a_ledid], LOGIC_LOW);
    322e:	89 81       	ldd	r24, Y+1	; 0x01
    3230:	88 2f       	mov	r24, r24
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	fc 01       	movw	r30, r24
    3236:	ec 54       	subi	r30, 0x4C	; 76
    3238:	fe 4f       	sbci	r31, 0xFE	; 254
    323a:	80 81       	ld	r24, Z
    323c:	60 e0       	ldi	r22, 0x00	; 0
    323e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_ARR_setPinState>
#else
	GPIO_ARR_setPinState(LED_pins[a_ledid],LOGIC_HIGH);
#endif

}
    3242:	0f 90       	pop	r0
    3244:	cf 91       	pop	r28
    3246:	df 91       	pop	r29
    3248:	08 95       	ret

0000324a <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    324a:	df 93       	push	r29
    324c:	cf 93       	push	r28
    324e:	00 d0       	rcall	.+0      	; 0x3250 <LM35_getTemperature+0x6>
    3250:	0f 92       	push	r0
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    3256:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    3258:	1a 82       	std	Y+2, r1	; 0x02
    325a:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	0e 94 c0 07 	call	0xf80	; 0xf80 <ADC_readChannel>
    3262:	9a 83       	std	Y+2, r25	; 0x02
    3264:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    3266:	89 81       	ldd	r24, Y+1	; 0x01
    3268:	9a 81       	ldd	r25, Y+2	; 0x02
    326a:	cc 01       	movw	r24, r24
    326c:	a0 e0       	ldi	r26, 0x00	; 0
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	26 e9       	ldi	r18, 0x96	; 150
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	40 e0       	ldi	r20, 0x00	; 0
    3276:	50 e0       	ldi	r21, 0x00	; 0
    3278:	bc 01       	movw	r22, r24
    327a:	cd 01       	movw	r24, r26
    327c:	0e 94 a7 1a 	call	0x354e	; 0x354e <__mulsi3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	bc 01       	movw	r22, r24
    3286:	cd 01       	movw	r24, r26
    3288:	0e 94 19 05 	call	0xa32	; 0xa32 <__floatunsisf>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	bc 01       	movw	r22, r24
    3292:	cd 01       	movw	r24, r26
    3294:	2a e0       	ldi	r18, 0x0A	; 10
    3296:	37 ed       	ldi	r19, 0xD7	; 215
    3298:	43 e2       	ldi	r20, 0x23	; 35
    329a:	50 e4       	ldi	r21, 0x40	; 64
    329c:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	bc 01       	movw	r22, r24
    32a6:	cd 01       	movw	r24, r26
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 ed       	ldi	r19, 0xD0	; 208
    32ac:	4f eb       	ldi	r20, 0xBF	; 191
    32ae:	54 e4       	ldi	r21, 0x44	; 68
    32b0:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    32c6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	08 95       	ret

000032d4 <Pushbutton_init>:
 *
 *  Created on: 10 Sept 2024
 *      Author: MSI
 */
#include"pushbutton.h"
void Pushbutton_init( pushbutton * const a_button) {
    32d4:	df 93       	push	r29
    32d6:	cf 93       	push	r28
    32d8:	00 d0       	rcall	.+0      	; 0x32da <Pushbutton_init+0x6>
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
    32de:	9a 83       	std	Y+2, r25	; 0x02
    32e0:	89 83       	std	Y+1, r24	; 0x01


	(a_button->pullup == PIN_INPUT_PULLUP) ?
    32e2:	e9 81       	ldd	r30, Y+1	; 0x01
    32e4:	fa 81       	ldd	r31, Y+2	; 0x02
    32e6:	82 81       	ldd	r24, Z+2	; 0x02
    32e8:	82 30       	cpi	r24, 0x02	; 2
    32ea:	39 f4       	brne	.+14     	; 0x32fa <Pushbutton_init+0x26>
    32ec:	e9 81       	ldd	r30, Y+1	; 0x01
    32ee:	fa 81       	ldd	r31, Y+2	; 0x02
    32f0:	80 81       	ld	r24, Z
    32f2:	62 e0       	ldi	r22, 0x02	; 2
    32f4:	0e 94 c9 0c 	call	0x1992	; 0x1992 <GPIO_ARR_setPinDirection>
    32f8:	06 c0       	rjmp	.+12     	; 0x3306 <Pushbutton_init+0x32>
    32fa:	e9 81       	ldd	r30, Y+1	; 0x01
    32fc:	fa 81       	ldd	r31, Y+2	; 0x02
    32fe:	80 81       	ld	r24, Z
    3300:	60 e0       	ldi	r22, 0x00	; 0
    3302:	0e 94 c9 0c 	call	0x1992	; 0x1992 <GPIO_ARR_setPinDirection>
			GPIO_ARR_setPinDirection(a_button->pin, PIN_INPUT_PULLUP) :

			GPIO_ARR_setPinDirection(a_button->pin, PIN_INPUT);

	a_button->state = 0;
    3306:	e9 81       	ldd	r30, Y+1	; 0x01
    3308:	fa 81       	ldd	r31, Y+2	; 0x02
    330a:	11 82       	std	Z+1, r1	; 0x01

}
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	cf 91       	pop	r28
    3312:	df 91       	pop	r29
    3314:	08 95       	ret

00003316 <Pushbutton_pressed>:
uint8 Pushbutton_pressed( pushbutton *const a_button) {
    3316:	df 93       	push	r29
    3318:	cf 93       	push	r28
    331a:	00 d0       	rcall	.+0      	; 0x331c <Pushbutton_pressed+0x6>
    331c:	0f 92       	push	r0
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	9b 83       	std	Y+3, r25	; 0x03
    3324:	8a 83       	std	Y+2, r24	; 0x02
	uint8 l_val = 0;
    3326:	19 82       	std	Y+1, r1	; 0x01

	if (!GPIO_ARR_readPin(a_button->pin)) {
    3328:	ea 81       	ldd	r30, Y+2	; 0x02
    332a:	fb 81       	ldd	r31, Y+3	; 0x03
    332c:	80 81       	ld	r24, Z
    332e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <GPIO_ARR_readPin>
    3332:	88 23       	and	r24, r24
    3334:	61 f4       	brne	.+24     	; 0x334e <Pushbutton_pressed+0x38>
		if (!a_button->state) {
    3336:	ea 81       	ldd	r30, Y+2	; 0x02
    3338:	fb 81       	ldd	r31, Y+3	; 0x03
    333a:	81 81       	ldd	r24, Z+1	; 0x01
    333c:	88 23       	and	r24, r24
    333e:	59 f4       	brne	.+22     	; 0x3356 <Pushbutton_pressed+0x40>
			l_val = 1;
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	89 83       	std	Y+1, r24	; 0x01
			a_button->state = 1;
    3344:	ea 81       	ldd	r30, Y+2	; 0x02
    3346:	fb 81       	ldd	r31, Y+3	; 0x03
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	81 83       	std	Z+1, r24	; 0x01
    334c:	04 c0       	rjmp	.+8      	; 0x3356 <Pushbutton_pressed+0x40>
		}
	} else {
		l_val = 0;
    334e:	19 82       	std	Y+1, r1	; 0x01
		a_button->state = 0;
    3350:	ea 81       	ldd	r30, Y+2	; 0x02
    3352:	fb 81       	ldd	r31, Y+3	; 0x03
    3354:	11 82       	std	Z+1, r1	; 0x01

	}
	return l_val;
    3356:	89 81       	ldd	r24, Y+1	; 0x01
}
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	0f 90       	pop	r0
    335e:	cf 91       	pop	r28
    3360:	df 91       	pop	r29
    3362:	08 95       	ret

00003364 <main>:
#include"../hal/buzzer.h"
uint8 lightIntensity;
uint8 g_temperature;
boolean fan;

int main() {
    3364:	df 93       	push	r29
    3366:	cf 93       	push	r28
    3368:	cd b7       	in	r28, 0x3d	; 61
    336a:	de b7       	in	r29, 0x3e	; 62

	LED_init();
    336c:	0e 94 df 18 	call	0x31be	; 0x31be <LED_init>
	LDR_init();
    3370:	0e 94 d6 18 	call	0x31ac	; 0x31ac <LDR_init>
	LCD_init();
    3374:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_init>
	DcMotor_init();
    3378:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <DcMotor_init>
	FlameSensor_init();
    337c:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <FlameSensor_init>
	Buzzer_init();
    3380:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <Buzzer_init>
	for (;;) {
		lightIntensity = LDR_getLightIntensity();
    3384:	0e 94 ae 18 	call	0x315c	; 0x315c <LDR_getLightIntensity>
    3388:	80 93 bc 01 	sts	0x01BC, r24
		LCD_displayString("LDR=");
    338c:	80 e6       	ldi	r24, 0x60	; 96
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayString>
		LCD_intgerToString(lightIntensity);
    3394:	80 91 bc 01 	lds	r24, 0x01BC
    3398:	88 2f       	mov	r24, r24
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_intgerToString>
		LCD_sendChar('%');
    33a0:	85 e2       	ldi	r24, 0x25	; 37
    33a2:	0e 94 9f 13 	call	0x273e	; 0x273e <LCD_sendChar>
		LCD_moveCursor(0, 0);
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	60 e0       	ldi	r22, 0x00	; 0
    33aa:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_moveCursor>

		if (lightIntensity <= 15) {
    33ae:	80 91 bc 01 	lds	r24, 0x01BC
    33b2:	80 31       	cpi	r24, 0x10	; 16
    33b4:	50 f4       	brcc	.+20     	; 0x33ca <main+0x66>
			LED_on(LED_BLUE_1);
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	0e 94 fd 18 	call	0x31fa	; 0x31fa <LED_on>
			LED_on(LED_GREEN_2);
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	0e 94 fd 18 	call	0x31fa	; 0x31fa <LED_on>
			LED_on(LED_RED_3);
    33c2:	82 e0       	ldi	r24, 0x02	; 2
    33c4:	0e 94 fd 18 	call	0x31fa	; 0x31fa <LED_on>
    33c8:	2d c0       	rjmp	.+90     	; 0x3424 <main+0xc0>
		} else if (lightIntensity >= 16 && lightIntensity <= 50) {
    33ca:	80 91 bc 01 	lds	r24, 0x01BC
    33ce:	80 31       	cpi	r24, 0x10	; 16
    33d0:	70 f0       	brcs	.+28     	; 0x33ee <main+0x8a>
    33d2:	80 91 bc 01 	lds	r24, 0x01BC
    33d6:	83 33       	cpi	r24, 0x33	; 51
    33d8:	50 f4       	brcc	.+20     	; 0x33ee <main+0x8a>
			LED_off(LED_BLUE_1);
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	0e 94 11 19 	call	0x3222	; 0x3222 <LED_off>
			LED_on(LED_GREEN_2);
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	0e 94 fd 18 	call	0x31fa	; 0x31fa <LED_on>
			LED_on(LED_RED_3);
    33e6:	82 e0       	ldi	r24, 0x02	; 2
    33e8:	0e 94 fd 18 	call	0x31fa	; 0x31fa <LED_on>
    33ec:	1b c0       	rjmp	.+54     	; 0x3424 <main+0xc0>
		} else if (lightIntensity >= 51 && lightIntensity <= 70) {
    33ee:	80 91 bc 01 	lds	r24, 0x01BC
    33f2:	83 33       	cpi	r24, 0x33	; 51
    33f4:	70 f0       	brcs	.+28     	; 0x3412 <main+0xae>
    33f6:	80 91 bc 01 	lds	r24, 0x01BC
    33fa:	87 34       	cpi	r24, 0x47	; 71
    33fc:	50 f4       	brcc	.+20     	; 0x3412 <main+0xae>
			LED_off(LED_BLUE_1);
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	0e 94 11 19 	call	0x3222	; 0x3222 <LED_off>
			LED_off(LED_GREEN_2);
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	0e 94 11 19 	call	0x3222	; 0x3222 <LED_off>
			LED_on(LED_RED_3);
    340a:	82 e0       	ldi	r24, 0x02	; 2
    340c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <LED_on>
    3410:	09 c0       	rjmp	.+18     	; 0x3424 <main+0xc0>
		} else {
			LED_off(LED_BLUE_1);
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	0e 94 11 19 	call	0x3222	; 0x3222 <LED_off>
			LED_off(LED_GREEN_2);
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	0e 94 11 19 	call	0x3222	; 0x3222 <LED_off>
			LED_off(LED_RED_3);
    341e:	82 e0       	ldi	r24, 0x02	; 2
    3420:	0e 94 11 19 	call	0x3222	; 0x3222 <LED_off>
		}
		g_temperature = LM35_getTemperature();
    3424:	0e 94 25 19 	call	0x324a	; 0x324a <LM35_getTemperature>
    3428:	80 93 ba 01 	sts	0x01BA, r24
		if (g_temperature >= 40) {
    342c:	80 91 ba 01 	lds	r24, 0x01BA
    3430:	88 32       	cpi	r24, 0x28	; 40
    3432:	40 f0       	brcs	.+16     	; 0x3444 <main+0xe0>
			fan = TRUE;
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	80 93 bb 01 	sts	0x01BB, r24
			DcMotor_rotate(CW, 100);
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	64 e6       	ldi	r22, 0x64	; 100
    343e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DcMotor_rotate>
    3442:	36 c0       	rjmp	.+108    	; 0x34b0 <main+0x14c>
		} else if (g_temperature >= 35 && g_temperature < 40) {
    3444:	80 91 ba 01 	lds	r24, 0x01BA
    3448:	83 32       	cpi	r24, 0x23	; 35
    344a:	60 f0       	brcs	.+24     	; 0x3464 <main+0x100>
    344c:	80 91 ba 01 	lds	r24, 0x01BA
    3450:	88 32       	cpi	r24, 0x28	; 40
    3452:	40 f4       	brcc	.+16     	; 0x3464 <main+0x100>
			fan = TRUE;
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	80 93 bb 01 	sts	0x01BB, r24
			DcMotor_rotate(CW, 75);
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	6b e4       	ldi	r22, 0x4B	; 75
    345e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DcMotor_rotate>
    3462:	26 c0       	rjmp	.+76     	; 0x34b0 <main+0x14c>
		} else if (g_temperature >= 30 && g_temperature < 35) {
    3464:	80 91 ba 01 	lds	r24, 0x01BA
    3468:	8e 31       	cpi	r24, 0x1E	; 30
    346a:	60 f0       	brcs	.+24     	; 0x3484 <main+0x120>
    346c:	80 91 ba 01 	lds	r24, 0x01BA
    3470:	83 32       	cpi	r24, 0x23	; 35
    3472:	40 f4       	brcc	.+16     	; 0x3484 <main+0x120>
			fan = TRUE;
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	80 93 bb 01 	sts	0x01BB, r24
			DcMotor_rotate(CW, 50);
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	62 e3       	ldi	r22, 0x32	; 50
    347e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DcMotor_rotate>
    3482:	16 c0       	rjmp	.+44     	; 0x34b0 <main+0x14c>
		} else if (g_temperature >= 25 && g_temperature < 30) {
    3484:	80 91 ba 01 	lds	r24, 0x01BA
    3488:	89 31       	cpi	r24, 0x19	; 25
    348a:	60 f0       	brcs	.+24     	; 0x34a4 <main+0x140>
    348c:	80 91 ba 01 	lds	r24, 0x01BA
    3490:	8e 31       	cpi	r24, 0x1E	; 30
    3492:	40 f4       	brcc	.+16     	; 0x34a4 <main+0x140>
			fan = TRUE;
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	80 93 bb 01 	sts	0x01BB, r24
			DcMotor_rotate(CW, 25);
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	69 e1       	ldi	r22, 0x19	; 25
    349e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DcMotor_rotate>
    34a2:	06 c0       	rjmp	.+12     	; 0x34b0 <main+0x14c>
		} else {
			fan = FALSE;
    34a4:	10 92 bb 01 	sts	0x01BB, r1
			DcMotor_rotate(STOP, 0);
    34a8:	82 e0       	ldi	r24, 0x02	; 2
    34aa:	60 e0       	ldi	r22, 0x00	; 0
    34ac:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DcMotor_rotate>
		}
		if (FlameSensor_getValue()) {
    34b0:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <FlameSensor_getValue>
    34b4:	88 23       	and	r24, r24
    34b6:	99 f0       	breq	.+38     	; 0x34de <main+0x17a>
			Buzzer_on();
    34b8:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <Buzzer_on>
			LCD_moveCursor(0, 0);
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	60 e0       	ldi	r22, 0x00	; 0
    34c0:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_moveCursor>
			LCD_displayString(" CRITICAL ALERT");
    34c4:	85 e6       	ldi	r24, 0x65	; 101
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayString>
			LCD_moveCursor(1, 0);
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	60 e0       	ldi	r22, 0x00	; 0
    34d0:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_moveCursor>
			LCD_displayString("      FIRE      ");
    34d4:	85 e7       	ldi	r24, 0x75	; 117
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayString>
    34dc:	53 cf       	rjmp	.-346    	; 0x3384 <main+0x20>
		} else {
			Buzzer_off();
    34de:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <Buzzer_off>
			LCD_moveCursor(0, 0);
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	60 e0       	ldi	r22, 0x00	; 0
    34e6:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_moveCursor>
			if (fan == TRUE) {
    34ea:	80 91 bb 01 	lds	r24, 0x01BB
    34ee:	81 30       	cpi	r24, 0x01	; 1
    34f0:	29 f4       	brne	.+10     	; 0x34fc <main+0x198>
				LCD_displayString("FAN is ON ");
    34f2:	86 e8       	ldi	r24, 0x86	; 134
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayString>
    34fa:	04 c0       	rjmp	.+8      	; 0x3504 <main+0x1a0>
			} else {
				LCD_displayString("FAN is OFF");
    34fc:	81 e9       	ldi	r24, 0x91	; 145
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayString>
			}

			LCD_moveCursor(1, 0);
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	60 e0       	ldi	r22, 0x00	; 0
    3508:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_moveCursor>
			LCD_displayString("Temp=");
    350c:	8c e9       	ldi	r24, 0x9C	; 156
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayString>
			LCD_intgerToString(g_temperature);
    3514:	80 91 ba 01 	lds	r24, 0x01BA
    3518:	88 2f       	mov	r24, r24
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_intgerToString>
			LCD_displayString("C");
    3520:	82 ea       	ldi	r24, 0xA2	; 162
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayString>

			LCD_moveCursor(1, 9);
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	69 e0       	ldi	r22, 0x09	; 9
    352c:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_moveCursor>
			LCD_displayString("LDR=");
    3530:	80 e6       	ldi	r24, 0x60	; 96
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayString>
			LCD_intgerToString(lightIntensity);
    3538:	80 91 bc 01 	lds	r24, 0x01BC
    353c:	88 2f       	mov	r24, r24
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_intgerToString>
			LCD_displayString("%");
    3544:	84 ea       	ldi	r24, 0xA4	; 164
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <LCD_displayString>
    354c:	1b cf       	rjmp	.-458    	; 0x3384 <main+0x20>

0000354e <__mulsi3>:
    354e:	62 9f       	mul	r22, r18
    3550:	d0 01       	movw	r26, r0
    3552:	73 9f       	mul	r23, r19
    3554:	f0 01       	movw	r30, r0
    3556:	82 9f       	mul	r24, r18
    3558:	e0 0d       	add	r30, r0
    355a:	f1 1d       	adc	r31, r1
    355c:	64 9f       	mul	r22, r20
    355e:	e0 0d       	add	r30, r0
    3560:	f1 1d       	adc	r31, r1
    3562:	92 9f       	mul	r25, r18
    3564:	f0 0d       	add	r31, r0
    3566:	83 9f       	mul	r24, r19
    3568:	f0 0d       	add	r31, r0
    356a:	74 9f       	mul	r23, r20
    356c:	f0 0d       	add	r31, r0
    356e:	65 9f       	mul	r22, r21
    3570:	f0 0d       	add	r31, r0
    3572:	99 27       	eor	r25, r25
    3574:	72 9f       	mul	r23, r18
    3576:	b0 0d       	add	r27, r0
    3578:	e1 1d       	adc	r30, r1
    357a:	f9 1f       	adc	r31, r25
    357c:	63 9f       	mul	r22, r19
    357e:	b0 0d       	add	r27, r0
    3580:	e1 1d       	adc	r30, r1
    3582:	f9 1f       	adc	r31, r25
    3584:	bd 01       	movw	r22, r26
    3586:	cf 01       	movw	r24, r30
    3588:	11 24       	eor	r1, r1
    358a:	08 95       	ret

0000358c <__divmodhi4>:
    358c:	97 fb       	bst	r25, 7
    358e:	09 2e       	mov	r0, r25
    3590:	07 26       	eor	r0, r23
    3592:	0a d0       	rcall	.+20     	; 0x35a8 <__divmodhi4_neg1>
    3594:	77 fd       	sbrc	r23, 7
    3596:	04 d0       	rcall	.+8      	; 0x35a0 <__divmodhi4_neg2>
    3598:	0c d0       	rcall	.+24     	; 0x35b2 <__udivmodhi4>
    359a:	06 d0       	rcall	.+12     	; 0x35a8 <__divmodhi4_neg1>
    359c:	00 20       	and	r0, r0
    359e:	1a f4       	brpl	.+6      	; 0x35a6 <__divmodhi4_exit>

000035a0 <__divmodhi4_neg2>:
    35a0:	70 95       	com	r23
    35a2:	61 95       	neg	r22
    35a4:	7f 4f       	sbci	r23, 0xFF	; 255

000035a6 <__divmodhi4_exit>:
    35a6:	08 95       	ret

000035a8 <__divmodhi4_neg1>:
    35a8:	f6 f7       	brtc	.-4      	; 0x35a6 <__divmodhi4_exit>
    35aa:	90 95       	com	r25
    35ac:	81 95       	neg	r24
    35ae:	9f 4f       	sbci	r25, 0xFF	; 255
    35b0:	08 95       	ret

000035b2 <__udivmodhi4>:
    35b2:	aa 1b       	sub	r26, r26
    35b4:	bb 1b       	sub	r27, r27
    35b6:	51 e1       	ldi	r21, 0x11	; 17
    35b8:	07 c0       	rjmp	.+14     	; 0x35c8 <__udivmodhi4_ep>

000035ba <__udivmodhi4_loop>:
    35ba:	aa 1f       	adc	r26, r26
    35bc:	bb 1f       	adc	r27, r27
    35be:	a6 17       	cp	r26, r22
    35c0:	b7 07       	cpc	r27, r23
    35c2:	10 f0       	brcs	.+4      	; 0x35c8 <__udivmodhi4_ep>
    35c4:	a6 1b       	sub	r26, r22
    35c6:	b7 0b       	sbc	r27, r23

000035c8 <__udivmodhi4_ep>:
    35c8:	88 1f       	adc	r24, r24
    35ca:	99 1f       	adc	r25, r25
    35cc:	5a 95       	dec	r21
    35ce:	a9 f7       	brne	.-22     	; 0x35ba <__udivmodhi4_loop>
    35d0:	80 95       	com	r24
    35d2:	90 95       	com	r25
    35d4:	bc 01       	movw	r22, r24
    35d6:	cd 01       	movw	r24, r26
    35d8:	08 95       	ret

000035da <__prologue_saves__>:
    35da:	2f 92       	push	r2
    35dc:	3f 92       	push	r3
    35de:	4f 92       	push	r4
    35e0:	5f 92       	push	r5
    35e2:	6f 92       	push	r6
    35e4:	7f 92       	push	r7
    35e6:	8f 92       	push	r8
    35e8:	9f 92       	push	r9
    35ea:	af 92       	push	r10
    35ec:	bf 92       	push	r11
    35ee:	cf 92       	push	r12
    35f0:	df 92       	push	r13
    35f2:	ef 92       	push	r14
    35f4:	ff 92       	push	r15
    35f6:	0f 93       	push	r16
    35f8:	1f 93       	push	r17
    35fa:	cf 93       	push	r28
    35fc:	df 93       	push	r29
    35fe:	cd b7       	in	r28, 0x3d	; 61
    3600:	de b7       	in	r29, 0x3e	; 62
    3602:	ca 1b       	sub	r28, r26
    3604:	db 0b       	sbc	r29, r27
    3606:	0f b6       	in	r0, 0x3f	; 63
    3608:	f8 94       	cli
    360a:	de bf       	out	0x3e, r29	; 62
    360c:	0f be       	out	0x3f, r0	; 63
    360e:	cd bf       	out	0x3d, r28	; 61
    3610:	09 94       	ijmp

00003612 <__epilogue_restores__>:
    3612:	2a 88       	ldd	r2, Y+18	; 0x12
    3614:	39 88       	ldd	r3, Y+17	; 0x11
    3616:	48 88       	ldd	r4, Y+16	; 0x10
    3618:	5f 84       	ldd	r5, Y+15	; 0x0f
    361a:	6e 84       	ldd	r6, Y+14	; 0x0e
    361c:	7d 84       	ldd	r7, Y+13	; 0x0d
    361e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3620:	9b 84       	ldd	r9, Y+11	; 0x0b
    3622:	aa 84       	ldd	r10, Y+10	; 0x0a
    3624:	b9 84       	ldd	r11, Y+9	; 0x09
    3626:	c8 84       	ldd	r12, Y+8	; 0x08
    3628:	df 80       	ldd	r13, Y+7	; 0x07
    362a:	ee 80       	ldd	r14, Y+6	; 0x06
    362c:	fd 80       	ldd	r15, Y+5	; 0x05
    362e:	0c 81       	ldd	r16, Y+4	; 0x04
    3630:	1b 81       	ldd	r17, Y+3	; 0x03
    3632:	aa 81       	ldd	r26, Y+2	; 0x02
    3634:	b9 81       	ldd	r27, Y+1	; 0x01
    3636:	ce 0f       	add	r28, r30
    3638:	d1 1d       	adc	r29, r1
    363a:	0f b6       	in	r0, 0x3f	; 63
    363c:	f8 94       	cli
    363e:	de bf       	out	0x3e, r29	; 62
    3640:	0f be       	out	0x3f, r0	; 63
    3642:	cd bf       	out	0x3d, r28	; 61
    3644:	ed 01       	movw	r28, r26
    3646:	08 95       	ret

00003648 <itoa>:
    3648:	fb 01       	movw	r30, r22
    364a:	9f 01       	movw	r18, r30
    364c:	e8 94       	clt
    364e:	42 30       	cpi	r20, 0x02	; 2
    3650:	c4 f0       	brlt	.+48     	; 0x3682 <itoa+0x3a>
    3652:	45 32       	cpi	r20, 0x25	; 37
    3654:	b4 f4       	brge	.+44     	; 0x3682 <itoa+0x3a>
    3656:	4a 30       	cpi	r20, 0x0A	; 10
    3658:	29 f4       	brne	.+10     	; 0x3664 <itoa+0x1c>
    365a:	97 fb       	bst	r25, 7
    365c:	1e f4       	brtc	.+6      	; 0x3664 <itoa+0x1c>
    365e:	90 95       	com	r25
    3660:	81 95       	neg	r24
    3662:	9f 4f       	sbci	r25, 0xFF	; 255
    3664:	64 2f       	mov	r22, r20
    3666:	77 27       	eor	r23, r23
    3668:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__udivmodhi4>
    366c:	80 5d       	subi	r24, 0xD0	; 208
    366e:	8a 33       	cpi	r24, 0x3A	; 58
    3670:	0c f0       	brlt	.+2      	; 0x3674 <itoa+0x2c>
    3672:	89 5d       	subi	r24, 0xD9	; 217
    3674:	81 93       	st	Z+, r24
    3676:	cb 01       	movw	r24, r22
    3678:	00 97       	sbiw	r24, 0x00	; 0
    367a:	a1 f7       	brne	.-24     	; 0x3664 <itoa+0x1c>
    367c:	16 f4       	brtc	.+4      	; 0x3682 <itoa+0x3a>
    367e:	5d e2       	ldi	r21, 0x2D	; 45
    3680:	51 93       	st	Z+, r21
    3682:	10 82       	st	Z, r1
    3684:	c9 01       	movw	r24, r18
    3686:	0c 94 45 1b 	jmp	0x368a	; 0x368a <strrev>

0000368a <strrev>:
    368a:	dc 01       	movw	r26, r24
    368c:	fc 01       	movw	r30, r24
    368e:	67 2f       	mov	r22, r23
    3690:	71 91       	ld	r23, Z+
    3692:	77 23       	and	r23, r23
    3694:	e1 f7       	brne	.-8      	; 0x368e <strrev+0x4>
    3696:	32 97       	sbiw	r30, 0x02	; 2
    3698:	04 c0       	rjmp	.+8      	; 0x36a2 <strrev+0x18>
    369a:	7c 91       	ld	r23, X
    369c:	6d 93       	st	X+, r22
    369e:	70 83       	st	Z, r23
    36a0:	62 91       	ld	r22, -Z
    36a2:	ae 17       	cp	r26, r30
    36a4:	bf 07       	cpc	r27, r31
    36a6:	c8 f3       	brcs	.-14     	; 0x369a <strrev+0x10>
    36a8:	08 95       	ret

000036aa <_exit>:
    36aa:	f8 94       	cli

000036ac <__stop_program>:
    36ac:	ff cf       	rjmp	.-2      	; 0x36ac <__stop_program>
